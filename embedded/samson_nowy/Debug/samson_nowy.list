
samson_nowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006338  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080064c8  080064c8  000164c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065b8  080065b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065c0  080065c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065c0  080065c0  000165c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065c4  080065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080065c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000070  08006638  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08006638  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d6c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002580  00000000  00000000  00034e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001340  00000000  00000000  00037390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  000386d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029c3d  00000000  00000000  000398e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eec9  00000000  00000000  00063525  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001081dc  00000000  00000000  000723ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017a5ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005974  00000000  00000000  0017a648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064b0 	.word	0x080064b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080064b0 	.word	0x080064b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2 , ptr , len , 50);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	b29a      	uxth	r2, r3
 8000580:	2332      	movs	r3, #50	; 0x32
 8000582:	68b9      	ldr	r1, [r7, #8]
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <_write+0x24>)
 8000586:	f004 fbfd 	bl	8004d84 <HAL_UART_Transmit>
    return len;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000019c 	.word	0x2000019c

08000598 <calculate_CRC16>:

uint16_t calculate_CRC16(const uint8_t *data, uint16_t length) {
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 80005a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a8:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 80005aa:	2300      	movs	r3, #0
 80005ac:	81bb      	strh	r3, [r7, #12]
 80005ae:	e026      	b.n	80005fe <calculate_CRC16+0x66>
        crc ^= data[i];
 80005b0:	89bb      	ldrh	r3, [r7, #12]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	89fb      	ldrh	r3, [r7, #14]
 80005bc:	4053      	eors	r3, r2
 80005be:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 80005c0:	2300      	movs	r3, #0
 80005c2:	72fb      	strb	r3, [r7, #11]
 80005c4:	e015      	b.n	80005f2 <calculate_CRC16+0x5a>
            if (crc & 0x0001) {
 80005c6:	89fb      	ldrh	r3, [r7, #14]
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00a      	beq.n	80005e6 <calculate_CRC16+0x4e>
                crc >>= 1;
 80005d0:	89fb      	ldrh	r3, [r7, #14]
 80005d2:	085b      	lsrs	r3, r3, #1
 80005d4:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 80005d6:	89fb      	ldrh	r3, [r7, #14]
 80005d8:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80005dc:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80005e0:	43db      	mvns	r3, r3
 80005e2:	81fb      	strh	r3, [r7, #14]
 80005e4:	e002      	b.n	80005ec <calculate_CRC16+0x54>
            } else {
                crc >>= 1;
 80005e6:	89fb      	ldrh	r3, [r7, #14]
 80005e8:	085b      	lsrs	r3, r3, #1
 80005ea:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 80005ec:	7afb      	ldrb	r3, [r7, #11]
 80005ee:	3301      	adds	r3, #1
 80005f0:	72fb      	strb	r3, [r7, #11]
 80005f2:	7afb      	ldrb	r3, [r7, #11]
 80005f4:	2b07      	cmp	r3, #7
 80005f6:	d9e6      	bls.n	80005c6 <calculate_CRC16+0x2e>
    for (uint16_t i = 0; i < length; i++) {
 80005f8:	89bb      	ldrh	r3, [r7, #12]
 80005fa:	3301      	adds	r3, #1
 80005fc:	81bb      	strh	r3, [r7, #12]
 80005fe:	89ba      	ldrh	r2, [r7, #12]
 8000600:	887b      	ldrh	r3, [r7, #2]
 8000602:	429a      	cmp	r2, r3
 8000604:	d3d4      	bcc.n	80005b0 <calculate_CRC16+0x18>
            }
        }
    }
    return crc;
 8000606:	89fb      	ldrh	r3, [r7, #14]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <send_adc_value>:

void send_adc_value() {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
    uint8_t frame[9];
    frame[0] = 0xAA;
 800061a:	23aa      	movs	r3, #170	; 0xaa
 800061c:	713b      	strb	r3, [r7, #4]
    frame[1] = (adc_values[0] >> 8) & 0xFF;
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <send_adc_value+0x88>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	b29b      	uxth	r3, r3
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	717b      	strb	r3, [r7, #5]
    frame[2] = adc_values[0] & 0xFF;
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <send_adc_value+0x88>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	b29b      	uxth	r3, r3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	71bb      	strb	r3, [r7, #6]
    frame[3] = (adc_values[1] >> 8) & 0xFF;
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <send_adc_value+0x88>)
 8000638:	885b      	ldrh	r3, [r3, #2]
 800063a:	b29b      	uxth	r3, r3
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	b29b      	uxth	r3, r3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	71fb      	strb	r3, [r7, #7]
    frame[4] = adc_values[1] & 0xFF;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <send_adc_value+0x88>)
 8000646:	885b      	ldrh	r3, [r3, #2]
 8000648:	b29b      	uxth	r3, r3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	723b      	strb	r3, [r7, #8]
    frame[5] = (adc_values[2] >> 8) & 0xFF;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <send_adc_value+0x88>)
 8000650:	889b      	ldrh	r3, [r3, #4]
 8000652:	b29b      	uxth	r3, r3
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	b29b      	uxth	r3, r3
 8000658:	b2db      	uxtb	r3, r3
 800065a:	727b      	strb	r3, [r7, #9]
    frame[6] = adc_values[2] & 0xFF;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <send_adc_value+0x88>)
 800065e:	889b      	ldrh	r3, [r3, #4]
 8000660:	b29b      	uxth	r3, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	72bb      	strb	r3, [r7, #10]
    uint16_t crc;
    crc = calculate_CRC16(&frame[1], 6);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	3301      	adds	r3, #1
 800066a:	2106      	movs	r1, #6
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff93 	bl	8000598 <calculate_CRC16>
 8000672:	4603      	mov	r3, r0
 8000674:	81fb      	strh	r3, [r7, #14]
    frame[7] = (crc >> 8) & 0xFF;
 8000676:	89fb      	ldrh	r3, [r7, #14]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	b29b      	uxth	r3, r3
 800067c:	b2db      	uxtb	r3, r3
 800067e:	72fb      	strb	r3, [r7, #11]
    frame[8] = crc & 0xFF;
 8000680:	89fb      	ldrh	r3, [r7, #14]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, frame, 9, HAL_MAX_DELAY);
 8000686:	1d39      	adds	r1, r7, #4
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	2209      	movs	r2, #9
 800068e:	4804      	ldr	r0, [pc, #16]	; (80006a0 <send_adc_value+0x8c>)
 8000690:	f004 fb78 	bl	8004d84 <HAL_UART_Transmit>
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000021c 	.word	0x2000021c
 80006a0:	2000019c 	.word	0x2000019c

080006a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d106      	bne.n	80006c2 <HAL_TIM_PeriodElapsedCallback+0x1e>
	  if(pressed){
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		  send_adc_value();
 80006be:	f7ff ffa9 	bl	8000614 <send_adc_value>
	  }
  }
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000150 	.word	0x20000150
 80006d0:	2000014c 	.word	0x2000014c

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fca3 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f85f 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 fa0b 	bl	8000afc <MX_GPIO_Init>
  MX_DMA_Init();
 80006e6:	f000 f9eb 	bl	8000ac0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006ea:	f000 f9b9 	bl	8000a60 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006ee:	f000 f8df 	bl	80008b0 <MX_ADC1_Init>
  MX_TIM6_Init();
 80006f2:	f000 f97f 	bl	80009f4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80006f6:	217f      	movs	r1, #127	; 0x7f
 80006f8:	4821      	ldr	r0, [pc, #132]	; (8000780 <main+0xac>)
 80006fa:	f001 feb8 	bl	800246e <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, 3);
 80006fe:	2203      	movs	r2, #3
 8000700:	4920      	ldr	r1, [pc, #128]	; (8000784 <main+0xb0>)
 8000702:	481f      	ldr	r0, [pc, #124]	; (8000780 <main+0xac>)
 8000704:	f001 f85a 	bl	80017bc <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 8000708:	481f      	ldr	r0, [pc, #124]	; (8000788 <main+0xb4>)
 800070a:	f003 fff5 	bl	80046f8 <HAL_TIM_Base_Start_IT>

  prev_press_time = 0;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <main+0xb8>)
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
  prev_state = GPIO_PIN_SET;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <main+0xbc>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
  pressed = 0;
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <main+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]

  printf("przed while\n\r");
 8000720:	481d      	ldr	r0, [pc, #116]	; (8000798 <main+0xc4>)
 8000722:	f004 ffe1 	bl	80056e8 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GPIO_PinState current_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072a:	481c      	ldr	r0, [pc, #112]	; (800079c <main+0xc8>)
 800072c:	f002 fc5e 	bl	8002fec <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	71fb      	strb	r3, [r7, #7]
	  if(current_state != prev_state){
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <main+0xbc>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	79fa      	ldrb	r2, [r7, #7]
 800073c:	429a      	cmp	r2, r3
 800073e:	d0f2      	beq.n	8000726 <main+0x52>
		  if((HAL_GetTick() - prev_press_time) > 50){
 8000740:	f000 fce0 	bl	8001104 <HAL_GetTick>
 8000744:	4602      	mov	r2, r0
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <main+0xb8>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	2b32      	cmp	r3, #50	; 0x32
 800074e:	d9ea      	bls.n	8000726 <main+0x52>
			  prev_press_time = HAL_GetTick();
 8000750:	f000 fcd8 	bl	8001104 <HAL_GetTick>
 8000754:	4602      	mov	r2, r0
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <main+0xb8>)
 8000758:	601a      	str	r2, [r3, #0]
			  prev_state = current_state;
 800075a:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <main+0xbc>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	7013      	strb	r3, [r2, #0]
			  if(current_state == GPIO_PIN_RESET){
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1df      	bne.n	8000726 <main+0x52>
				  pressed = !pressed;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <main+0xc0>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	bf0c      	ite	eq
 8000770:	2301      	moveq	r3, #1
 8000772:	2300      	movne	r3, #0
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <main+0xc0>)
 800077a:	701a      	strb	r2, [r3, #0]
  {
 800077c:	e7d3      	b.n	8000726 <main+0x52>
 800077e:	bf00      	nop
 8000780:	200000a0 	.word	0x200000a0
 8000784:	2000021c 	.word	0x2000021c
 8000788:	20000150 	.word	0x20000150
 800078c:	2000009c 	.word	0x2000009c
 8000790:	20000098 	.word	0x20000098
 8000794:	2000014c 	.word	0x2000014c
 8000798:	080064c8 	.word	0x080064c8
 800079c:	48000800 	.word	0x48000800

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0b8      	sub	sp, #224	; 0xe0
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007aa:	2244      	movs	r2, #68	; 0x44
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 ff92 	bl	80056d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c4:	463b      	mov	r3, r7
 80007c6:	2288      	movs	r2, #136	; 0x88
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 ff84 	bl	80056d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007de:	2310      	movs	r3, #16
 80007e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ea:	2302      	movs	r3, #2
 80007ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007f6:	230a      	movs	r3, #10
 80007f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007fc:	2307      	movs	r3, #7
 80007fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000802:	2302      	movs	r3, #2
 8000804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fc7e 	bl	8003114 <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800081e:	f000 f9d5 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	230f      	movs	r3, #15
 8000824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2303      	movs	r3, #3
 800082a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000840:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000844:	2104      	movs	r1, #4
 8000846:	4618      	mov	r0, r3
 8000848:	f003 f84a 	bl	80038e0 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000852:	f000 f9bb 	bl	8000bcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000856:	f244 0302 	movw	r3, #16386	; 0x4002
 800085a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800085c:	2300      	movs	r3, #0
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000860:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000864:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000866:	2302      	movs	r3, #2
 8000868:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 800086e:	230a      	movs	r3, #10
 8000870:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000872:	2307      	movs	r3, #7
 8000874:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000876:	2302      	movs	r3, #2
 8000878:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800087e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000882:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4618      	mov	r0, r3
 8000888:	f003 fa2e 	bl	8003ce8 <HAL_RCCEx_PeriphCLKConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000892:	f000 f99b 	bl	8000bcc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000896:	f44f 7000 	mov.w	r0, #512	; 0x200
 800089a:	f002 fbe5 	bl	8003068 <HAL_PWREx_ControlVoltageScaling>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80008a4:	f000 f992 	bl	8000bcc <Error_Handler>
  }
}
 80008a8:	bf00      	nop
 80008aa:	37e0      	adds	r7, #224	; 0xe0
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
 80008d0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008d2:	4b43      	ldr	r3, [pc, #268]	; (80009e0 <MX_ADC1_Init+0x130>)
 80008d4:	4a43      	ldr	r2, [pc, #268]	; (80009e4 <MX_ADC1_Init+0x134>)
 80008d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008d8:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <MX_ADC1_Init+0x130>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008de:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <MX_ADC1_Init+0x130>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e4:	4b3e      	ldr	r3, [pc, #248]	; (80009e0 <MX_ADC1_Init+0x130>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008ea:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <MX_ADC1_Init+0x130>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f0:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <MX_ADC1_Init+0x130>)
 80008f2:	2204      	movs	r2, #4
 80008f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008f6:	4b3a      	ldr	r3, [pc, #232]	; (80009e0 <MX_ADC1_Init+0x130>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008fc:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <MX_ADC1_Init+0x130>)
 80008fe:	2201      	movs	r2, #1
 8000900:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000902:	4b37      	ldr	r3, [pc, #220]	; (80009e0 <MX_ADC1_Init+0x130>)
 8000904:	2203      	movs	r2, #3
 8000906:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000908:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <MX_ADC1_Init+0x130>)
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000910:	4b33      	ldr	r3, [pc, #204]	; (80009e0 <MX_ADC1_Init+0x130>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <MX_ADC1_Init+0x130>)
 8000918:	2200      	movs	r2, #0
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800091c:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <MX_ADC1_Init+0x130>)
 800091e:	2201      	movs	r2, #1
 8000920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <MX_ADC1_Init+0x130>)
 8000926:	2200      	movs	r2, #0
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <MX_ADC1_Init+0x130>)
 800092c:	2201      	movs	r2, #1
 800092e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <MX_ADC1_Init+0x130>)
 8000934:	2210      	movs	r2, #16
 8000936:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_5;
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_ADC1_Init+0x130>)
 800093a:	22a0      	movs	r2, #160	; 0xa0
 800093c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <MX_ADC1_Init+0x130>)
 8000940:	2200      	movs	r2, #0
 8000942:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_ADC1_Init+0x130>)
 8000946:	2201      	movs	r2, #1
 8000948:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800094a:	4825      	ldr	r0, [pc, #148]	; (80009e0 <MX_ADC1_Init+0x130>)
 800094c:	f000 fde2 	bl	8001514 <HAL_ADC_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000956:	f000 f939 	bl	8000bcc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	481e      	ldr	r0, [pc, #120]	; (80009e0 <MX_ADC1_Init+0x130>)
 8000966:	f001 fde3 	bl	8002530 <HAL_ADCEx_MultiModeConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000970:	f000 f92c 	bl	8000bcc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <MX_ADC1_Init+0x138>)
 8000976:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000978:	2306      	movs	r3, #6
 800097a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800097c:	2307      	movs	r3, #7
 800097e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000980:	237f      	movs	r3, #127	; 0x7f
 8000982:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000984:	2304      	movs	r3, #4
 8000986:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4813      	ldr	r0, [pc, #76]	; (80009e0 <MX_ADC1_Init+0x130>)
 8000992:	f000 ffe5 	bl	8001960 <HAL_ADC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 800099c:	f000 f916 	bl	8000bcc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_ADC1_Init+0x13c>)
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009a4:	230c      	movs	r3, #12
 80009a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <MX_ADC1_Init+0x130>)
 80009ae:	f000 ffd7 	bl	8001960 <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80009b8:	f000 f908 	bl	8000bcc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_ADC1_Init+0x140>)
 80009be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009c0:	2312      	movs	r3, #18
 80009c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_ADC1_Init+0x130>)
 80009ca:	f000 ffc9 	bl	8001960 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80009d4:	f000 f8fa 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000a0 	.word	0x200000a0
 80009e4:	50040000 	.word	0x50040000
 80009e8:	04300002 	.word	0x04300002
 80009ec:	08600004 	.word	0x08600004
 80009f0:	0c900008 	.word	0x0c900008

080009f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_TIM6_Init+0x64>)
 8000a06:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <MX_TIM6_Init+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PRESCALER_2kHz;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_TIM6_Init+0x64>)
 8000a0c:	2227      	movs	r2, #39	; 0x27
 8000a0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_TIM6_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_PERIOD;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_TIM6_Init+0x64>)
 8000a18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a1c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_TIM6_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <MX_TIM6_Init+0x64>)
 8000a26:	f003 fe0f 	bl	8004648 <HAL_TIM_Base_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a30:	f000 f8cc 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a34:	2320      	movs	r3, #32
 8000a36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_TIM6_Init+0x64>)
 8000a42:	f004 f8ab 	bl	8004b9c <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a4c:	f000 f8be 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000150 	.word	0x20000150
 8000a5c:	40001000 	.word	0x40001000

08000a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <MX_USART2_UART_Init+0x5c>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a6c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000aa4:	f004 f920 	bl	8004ce8 <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aae:	f000 f88d 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000019c 	.word	0x2000019c
 8000abc:	40004400 	.word	0x40004400

08000ac0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_DMA_Init+0x38>)
 8000ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <MX_DMA_Init+0x38>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6493      	str	r3, [r2, #72]	; 0x48
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_DMA_Init+0x38>)
 8000ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	200b      	movs	r0, #11
 8000ae4:	f001 feab 	bl	800283e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ae8:	200b      	movs	r0, #11
 8000aea:	f001 fec4 	bl	8002876 <HAL_NVIC_EnableIRQ>

}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b2b      	ldr	r3, [pc, #172]	; (8000bc0 <MX_GPIO_Init+0xc4>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a2a      	ldr	r2, [pc, #168]	; (8000bc0 <MX_GPIO_Init+0xc4>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <MX_GPIO_Init+0xc4>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2a:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <MX_GPIO_Init+0xc4>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a24      	ldr	r2, [pc, #144]	; (8000bc0 <MX_GPIO_Init+0xc4>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <MX_GPIO_Init+0xc4>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_GPIO_Init+0xc4>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	4a1e      	ldr	r2, [pc, #120]	; (8000bc0 <MX_GPIO_Init+0xc4>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_GPIO_Init+0xc4>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_GPIO_Init+0xc4>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <MX_GPIO_Init+0xc4>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_GPIO_Init+0xc4>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2120      	movs	r1, #32
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f002 fa4f 	bl	800301c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_GPIO_Init+0xc8>)
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <MX_GPIO_Init+0xcc>)
 8000b94:	f002 f882 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b98:	2320      	movs	r3, #32
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb2:	f002 f873 	bl	8002c9c <HAL_GPIO_Init>

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	10210000 	.word	0x10210000
 8000bc8:	48000800 	.word	0x48000800

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_MspInit+0x44>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_MspInit+0x44>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6613      	str	r3, [r2, #96]	; 0x60
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_MspInit+0x44>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_MspInit+0x44>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x44>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	6593      	str	r3, [r2, #88]	; 0x58
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x44>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a2a      	ldr	r2, [pc, #168]	; (8000cec <HAL_ADC_MspInit+0xc8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d14e      	bne.n	8000ce4 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c46:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <HAL_ADC_MspInit+0xcc>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <HAL_ADC_MspInit+0xcc>)
 8000c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c52:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <HAL_ADC_MspInit+0xcc>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <HAL_ADC_MspInit+0xcc>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a23      	ldr	r2, [pc, #140]	; (8000cf0 <HAL_ADC_MspInit+0xcc>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_ADC_MspInit+0xcc>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000c76:	2307      	movs	r3, #7
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c7a:	230b      	movs	r3, #11
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	481a      	ldr	r0, [pc, #104]	; (8000cf4 <HAL_ADC_MspInit+0xd0>)
 8000c8a:	f002 f807 	bl	8002c9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <HAL_ADC_MspInit+0xd4>)
 8000c90:	4a1a      	ldr	r2, [pc, #104]	; (8000cfc <HAL_ADC_MspInit+0xd8>)
 8000c92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_ADC_MspInit+0xd4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_ADC_MspInit+0xd4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_ADC_MspInit+0xd4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_ADC_MspInit+0xd4>)
 8000ca8:	2280      	movs	r2, #128	; 0x80
 8000caa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_ADC_MspInit+0xd4>)
 8000cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_ADC_MspInit+0xd4>)
 8000cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_ADC_MspInit+0xd4>)
 8000cbe:	2220      	movs	r2, #32
 8000cc0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_ADC_MspInit+0xd4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cc8:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <HAL_ADC_MspInit+0xd4>)
 8000cca:	f001 fdef 	bl	80028ac <HAL_DMA_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000cd4:	f7ff ff7a 	bl	8000bcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_ADC_MspInit+0xd4>)
 8000cdc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000cde:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <HAL_ADC_MspInit+0xd4>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	; 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	50040000 	.word	0x50040000
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	48000800 	.word	0x48000800
 8000cf8:	20000104 	.word	0x20000104
 8000cfc:	40020008 	.word	0x40020008

08000d00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_TIM_Base_MspInit+0x44>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d113      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_TIM_Base_MspInit+0x48>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <HAL_TIM_Base_MspInit+0x48>)
 8000d18:	f043 0310 	orr.w	r3, r3, #16
 8000d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_TIM_Base_MspInit+0x48>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2103      	movs	r1, #3
 8000d2e:	2036      	movs	r0, #54	; 0x36
 8000d30:	f001 fd85 	bl	800283e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d34:	2036      	movs	r0, #54	; 0x36
 8000d36:	f001 fd9e 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40001000 	.word	0x40001000
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <HAL_UART_MspInit+0x7c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d128      	bne.n	8000dc0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_UART_MspInit+0x80>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <HAL_UART_MspInit+0x80>)
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_UART_MspInit+0x80>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_UART_MspInit+0x80>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_UART_MspInit+0x80>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_UART_MspInit+0x80>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dae:	2307      	movs	r3, #7
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f001 ff6e 	bl	8002c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 f95a 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <DMA1_Channel1_IRQHandler+0x10>)
 8000e32:	f001 fe53 	bl	8002adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000104 	.word	0x20000104

08000e40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <TIM6_DAC_IRQHandler+0x10>)
 8000e46:	f003 fcc7 	bl	80047d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000150 	.word	0x20000150

08000e54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	e00a      	b.n	8000e7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e66:	f3af 8000 	nop.w
 8000e6a:	4601      	mov	r1, r0
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	60ba      	str	r2, [r7, #8]
 8000e72:	b2ca      	uxtb	r2, r1
 8000e74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dbf0      	blt.n	8000e66 <_read+0x12>
	}

return len;
 8000e84:	687b      	ldr	r3, [r7, #4]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
	return -1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb6:	605a      	str	r2, [r3, #4]
	return 0;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_isatty>:

int _isatty(int file)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f004 fbac 	bl	8005684 <__errno>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	230c      	movs	r3, #12
 8000f30:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <_sbrk+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20018000 	.word	0x20018000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	2000008c 	.word	0x2000008c
 8000f60:	20000230 	.word	0x20000230

08000f64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <SystemInit+0x64>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6e:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <SystemInit+0x64>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <SystemInit+0x68>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <SystemInit+0x68>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <SystemInit+0x68>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <SystemInit+0x68>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <SystemInit+0x68>)
 8000f90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <SystemInit+0x68>)
 8000f9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fa0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <SystemInit+0x68>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <SystemInit+0x68>)
 8000fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <SystemInit+0x68>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SystemInit+0x64>)
 8000fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fba:	609a      	str	r2, [r3, #8]
#endif
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd4:	f7ff ffc6 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fda:	e003      	b.n	8000fe4 <LoopCopyDataInit>

08000fdc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fe0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fe2:	3104      	adds	r1, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fe4:	480a      	ldr	r0, [pc, #40]	; (8001010 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fe8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fec:	d3f6      	bcc.n	8000fdc <CopyDataInit>
	ldr	r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ff0:	e002      	b.n	8000ff8 <LoopFillZerobss>

08000ff2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ff2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ff4:	f842 3b04 	str.w	r3, [r2], #4

08000ff8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <LoopForever+0x16>)
	cmp	r2, r3
 8000ffa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ffc:	d3f9      	bcc.n	8000ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f004 fb47 	bl	8005690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001002:	f7ff fb67 	bl	80006d4 <main>

08001006 <LoopForever>:

LoopForever:
    b LoopForever
 8001006:	e7fe      	b.n	8001006 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001008:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800100c:	080065c8 	.word	0x080065c8
	ldr	r0, =_sdata
 8001010:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001014:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001018:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800101c:	2000022c 	.word	0x2000022c

08001020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC1_2_IRQHandler>
	...

08001024 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_Init+0x3c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <HAL_Init+0x3c>)
 8001034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001038:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103a:	2003      	movs	r0, #3
 800103c:	f001 fbf4 	bl	8002828 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001040:	2000      	movs	r0, #0
 8001042:	f000 f80f 	bl	8001064 <HAL_InitTick>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	e001      	b.n	8001056 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001052:	f7ff fdc3 	bl	8000bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001056:	79fb      	ldrb	r3, [r7, #7]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40022000 	.word	0x40022000

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_InitTick+0x6c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d023      	beq.n	80010c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_InitTick+0x70>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_InitTick+0x6c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fbff 	bl	8002892 <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10f      	bne.n	80010ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d809      	bhi.n	80010b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f001 fbc9 	bl	800283e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_InitTick+0x74>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e007      	b.n	80010c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e004      	b.n	80010c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
 80010be:	e001      	b.n	80010c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000224 	.word	0x20000224

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000224 	.word	0x20000224

0800111c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	431a      	orrs	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	609a      	str	r2, [r3, #8]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	609a      	str	r2, [r3, #8]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3360      	adds	r3, #96	; 0x60
 8001196:	461a      	mov	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <LL_ADC_SetOffset+0x44>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	4313      	orrs	r3, r2
 80011b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011bc:	bf00      	nop
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	03fff000 	.word	0x03fff000

080011cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3360      	adds	r3, #96	; 0x60
 80011da:	461a      	mov	r2, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3360      	adds	r3, #96	; 0x60
 8001208:	461a      	mov	r2, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	431a      	orrs	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001222:	bf00      	nop
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	3330      	adds	r3, #48	; 0x30
 8001264:	461a      	mov	r2, r3
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	4413      	add	r3, r2
 8001272:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	f003 031f 	and.w	r3, r3, #31
 800127e:	211f      	movs	r1, #31
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	401a      	ands	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	0e9b      	lsrs	r3, r3, #26
 800128c:	f003 011f 	and.w	r1, r3, #31
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	f003 031f 	and.w	r3, r3, #31
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	431a      	orrs	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012a0:	bf00      	nop
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3314      	adds	r3, #20
 80012bc:	461a      	mov	r2, r3
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	0e5b      	lsrs	r3, r3, #25
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	4413      	add	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	0d1b      	lsrs	r3, r3, #20
 80012d4:	f003 031f 	and.w	r3, r3, #31
 80012d8:	2107      	movs	r1, #7
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	401a      	ands	r2, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	0d1b      	lsrs	r3, r3, #20
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	431a      	orrs	r2, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012f6:	bf00      	nop
 80012f8:	371c      	adds	r7, #28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800131c:	43db      	mvns	r3, r3
 800131e:	401a      	ands	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0318 	and.w	r3, r3, #24
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001328:	40d9      	lsrs	r1, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	400b      	ands	r3, r1
 800132e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001332:	431a      	orrs	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	0007ffff 	.word	0x0007ffff

0800134c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 031f 	and.w	r3, r3, #31
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001378:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6093      	str	r3, [r2, #8]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800139c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013a0:	d101      	bne.n	80013a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013f0:	d101      	bne.n	80013f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001414:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001418:	f043 0201 	orr.w	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800143c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001440:	f043 0202 	orr.w	r2, r3, #2
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <LL_ADC_IsEnabled+0x18>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <LL_ADC_IsEnabled+0x1a>
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b02      	cmp	r3, #2
 800148c:	d101      	bne.n	8001492 <LL_ADC_IsDisableOngoing+0x18>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <LL_ADC_IsDisableOngoing+0x1a>
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014b4:	f043 0204 	orr.w	r2, r3, #4
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d101      	bne.n	80014e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d101      	bne.n	8001506 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e134      	b.n	8001798 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001538:	2b00      	cmp	r3, #0
 800153a:	d109      	bne.n	8001550 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fb71 	bl	8000c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff19 	bl	800138c <LL_ADC_IsDeepPowerDownEnabled>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff feff 	bl	8001368 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff34 	bl	80013dc <LL_ADC_IsInternalRegulatorEnabled>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d113      	bne.n	80015a2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff18 	bl	80013b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001584:	4b86      	ldr	r3, [pc, #536]	; (80017a0 <HAL_ADC_Init+0x28c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	099b      	lsrs	r3, r3, #6
 800158a:	4a86      	ldr	r2, [pc, #536]	; (80017a4 <HAL_ADC_Init+0x290>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	099b      	lsrs	r3, r3, #6
 8001592:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001594:	e002      	b.n	800159c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3b01      	subs	r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f9      	bne.n	8001596 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ff18 	bl	80013dc <LL_ADC_IsInternalRegulatorEnabled>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10d      	bne.n	80015ce <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b6:	f043 0210 	orr.w	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	f043 0201 	orr.w	r2, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ff78 	bl	80014c8 <LL_ADC_REG_IsConversionOngoing>
 80015d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f040 80cf 	bne.w	8001786 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f040 80cb 	bne.w	8001786 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015f8:	f043 0202 	orr.w	r2, r3, #2
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff25 	bl	8001454 <LL_ADC_IsEnabled>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d115      	bne.n	800163c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001610:	4865      	ldr	r0, [pc, #404]	; (80017a8 <HAL_ADC_Init+0x294>)
 8001612:	f7ff ff1f 	bl	8001454 <LL_ADC_IsEnabled>
 8001616:	4604      	mov	r4, r0
 8001618:	4864      	ldr	r0, [pc, #400]	; (80017ac <HAL_ADC_Init+0x298>)
 800161a:	f7ff ff1b 	bl	8001454 <LL_ADC_IsEnabled>
 800161e:	4603      	mov	r3, r0
 8001620:	431c      	orrs	r4, r3
 8001622:	4863      	ldr	r0, [pc, #396]	; (80017b0 <HAL_ADC_Init+0x29c>)
 8001624:	f7ff ff16 	bl	8001454 <LL_ADC_IsEnabled>
 8001628:	4603      	mov	r3, r0
 800162a:	4323      	orrs	r3, r4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d105      	bne.n	800163c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4619      	mov	r1, r3
 8001636:	485f      	ldr	r0, [pc, #380]	; (80017b4 <HAL_ADC_Init+0x2a0>)
 8001638:	f7ff fd70 	bl	800111c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7e5b      	ldrb	r3, [r3, #25]
 8001640:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001646:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800164c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001652:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d106      	bne.n	8001678 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	3b01      	subs	r3, #1
 8001670:	045b      	lsls	r3, r3, #17
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	2b00      	cmp	r3, #0
 800167e:	d009      	beq.n	8001694 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <HAL_ADC_Init+0x2a4>)
 800169c:	4013      	ands	r3, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	69b9      	ldr	r1, [r7, #24]
 80016a4:	430b      	orrs	r3, r1
 80016a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff0b 	bl	80014c8 <LL_ADC_REG_IsConversionOngoing>
 80016b2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff18 	bl	80014ee <LL_ADC_INJ_IsConversionOngoing>
 80016be:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d13d      	bne.n	8001742 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d13a      	bne.n	8001742 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016d0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016d8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016e8:	f023 0302 	bic.w	r3, r3, #2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	69b9      	ldr	r1, [r7, #24]
 80016f2:	430b      	orrs	r3, r1
 80016f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d118      	bne.n	8001732 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800170a:	f023 0304 	bic.w	r3, r3, #4
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001716:	4311      	orrs	r1, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800171c:	4311      	orrs	r1, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001722:	430a      	orrs	r2, r1
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	611a      	str	r2, [r3, #16]
 8001730:	e007      	b.n	8001742 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0201 	bic.w	r2, r2, #1
 8001740:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d10c      	bne.n	8001764 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	f023 010f 	bic.w	r1, r3, #15
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	1e5a      	subs	r2, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	631a      	str	r2, [r3, #48]	; 0x30
 8001762:	e007      	b.n	8001774 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 020f 	bic.w	r2, r2, #15
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001778:	f023 0303 	bic.w	r3, r3, #3
 800177c:	f043 0201 	orr.w	r2, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	655a      	str	r2, [r3, #84]	; 0x54
 8001784:	e007      	b.n	8001796 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178a:	f043 0210 	orr.w	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001796:	7ffb      	ldrb	r3, [r7, #31]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3724      	adds	r7, #36	; 0x24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd90      	pop	{r4, r7, pc}
 80017a0:	20000000 	.word	0x20000000
 80017a4:	053e2d63 	.word	0x053e2d63
 80017a8:	50040000 	.word	0x50040000
 80017ac:	50040100 	.word	0x50040100
 80017b0:	50040200 	.word	0x50040200
 80017b4:	50040300 	.word	0x50040300
 80017b8:	fff0c007 	.word	0xfff0c007

080017bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017c8:	4850      	ldr	r0, [pc, #320]	; (800190c <HAL_ADC_Start_DMA+0x150>)
 80017ca:	f7ff fdbf 	bl	800134c <LL_ADC_GetMultimode>
 80017ce:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fe77 	bl	80014c8 <LL_ADC_REG_IsConversionOngoing>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f040 808e 	bne.w	80018fe <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_ADC_Start_DMA+0x34>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e089      	b.n	8001904 <HAL_ADC_Start_DMA+0x148>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d005      	beq.n	800180a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	2b05      	cmp	r3, #5
 8001802:	d002      	beq.n	800180a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	2b09      	cmp	r3, #9
 8001808:	d172      	bne.n	80018f0 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 fc96 	bl	800213c <ADC_Enable>
 8001810:	4603      	mov	r3, r0
 8001812:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d165      	bne.n	80018e6 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a37      	ldr	r2, [pc, #220]	; (8001910 <HAL_ADC_Start_DMA+0x154>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d002      	beq.n	800183e <HAL_ADC_Start_DMA+0x82>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	e000      	b.n	8001840 <HAL_ADC_Start_DMA+0x84>
 800183e:	4b35      	ldr	r3, [pc, #212]	; (8001914 <HAL_ADC_Start_DMA+0x158>)
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	4293      	cmp	r3, r2
 8001846:	d002      	beq.n	800184e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d105      	bne.n	800185a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001852:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	f023 0206 	bic.w	r2, r3, #6
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	659a      	str	r2, [r3, #88]	; 0x58
 8001872:	e002      	b.n	800187a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	4a26      	ldr	r2, [pc, #152]	; (8001918 <HAL_ADC_Start_DMA+0x15c>)
 8001880:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	4a25      	ldr	r2, [pc, #148]	; (800191c <HAL_ADC_Start_DMA+0x160>)
 8001888:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	4a24      	ldr	r2, [pc, #144]	; (8001920 <HAL_ADC_Start_DMA+0x164>)
 8001890:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	221c      	movs	r2, #28
 8001898:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0210 	orr.w	r2, r2, #16
 80018b0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3340      	adds	r3, #64	; 0x40
 80018cc:	4619      	mov	r1, r3
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f001 f8a3 	bl	8002a1c <HAL_DMA_Start_IT>
 80018d6:	4603      	mov	r3, r0
 80018d8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fdde 	bl	80014a0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80018e4:	e00d      	b.n	8001902 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80018ee:	e008      	b.n	8001902 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80018fc:	e001      	b.n	8001902 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018fe:	2302      	movs	r3, #2
 8001900:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001902:	7dfb      	ldrb	r3, [r7, #23]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	50040300 	.word	0x50040300
 8001910:	50040100 	.word	0x50040100
 8001914:	50040000 	.word	0x50040000
 8001918:	080022a1 	.word	0x080022a1
 800191c:	08002379 	.word	0x08002379
 8001920:	08002395 	.word	0x08002395

08001924 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b0b6      	sub	sp, #216	; 0xd8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x22>
 800197e:	2302      	movs	r3, #2
 8001980:	e3c6      	b.n	8002110 <HAL_ADC_ConfigChannel+0x7b0>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fd9a 	bl	80014c8 <LL_ADC_REG_IsConversionOngoing>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 83a7 	bne.w	80020ea <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d824      	bhi.n	80019ee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	3b02      	subs	r3, #2
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d81b      	bhi.n	80019e6 <HAL_ADC_ConfigChannel+0x86>
 80019ae:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <HAL_ADC_ConfigChannel+0x54>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	080019cd 	.word	0x080019cd
 80019bc:	080019d5 	.word	0x080019d5
 80019c0:	080019dd 	.word	0x080019dd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	220c      	movs	r2, #12
 80019c8:	605a      	str	r2, [r3, #4]
          break;
 80019ca:	e011      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2212      	movs	r2, #18
 80019d0:	605a      	str	r2, [r3, #4]
          break;
 80019d2:	e00d      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2218      	movs	r2, #24
 80019d8:	605a      	str	r2, [r3, #4]
          break;
 80019da:	e009      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e2:	605a      	str	r2, [r3, #4]
          break;
 80019e4:	e004      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2206      	movs	r2, #6
 80019ea:	605a      	str	r2, [r3, #4]
          break;
 80019ec:	e000      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80019ee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6859      	ldr	r1, [r3, #4]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	f7ff fc29 	bl	8001254 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fd5e 	bl	80014c8 <LL_ADC_REG_IsConversionOngoing>
 8001a0c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fd6a 	bl	80014ee <LL_ADC_INJ_IsConversionOngoing>
 8001a1a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 81a6 	bne.w	8001d74 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f040 81a1 	bne.w	8001d74 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6819      	ldr	r1, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f7ff fc34 	bl	80012ac <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	08db      	lsrs	r3, r3, #3
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d00a      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	6919      	ldr	r1, [r3, #16]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a76:	f7ff fb85 	bl	8001184 <LL_ADC_SetOffset>
 8001a7a:	e17b      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fba2 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10a      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x148>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fb97 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	0e9b      	lsrs	r3, r3, #26
 8001aa2:	f003 021f 	and.w	r2, r3, #31
 8001aa6:	e01e      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x186>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fb8c 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ac6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001aca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ace:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	e004      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001ada:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d105      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x19e>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	0e9b      	lsrs	r3, r3, #26
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	e018      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x1d0>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001b22:	2320      	movs	r3, #32
 8001b24:	e004      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001b26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d106      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fb5b 	bl	80011f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2101      	movs	r1, #1
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fb3f 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10a      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x20e>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fb34 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	0e9b      	lsrs	r3, r3, #26
 8001b68:	f003 021f 	and.w	r2, r3, #31
 8001b6c:	e01e      	b.n	8001bac <HAL_ADC_ConfigChannel+0x24c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2101      	movs	r1, #1
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fb29 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	e004      	b.n	8001baa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001ba0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d105      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x264>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0e9b      	lsrs	r3, r3, #26
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	e018      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x296>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001bd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001be8:	2320      	movs	r3, #32
 8001bea:	e004      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d106      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2101      	movs	r1, #1
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff faf8 	bl	80011f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fadc 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10a      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x2d4>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2102      	movs	r1, #2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fad1 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	0e9b      	lsrs	r3, r3, #26
 8001c2e:	f003 021f 	and.w	r2, r3, #31
 8001c32:	e01e      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x312>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2102      	movs	r1, #2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fac6 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001c62:	2320      	movs	r3, #32
 8001c64:	e004      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001c66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d105      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x32a>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	e016      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x358>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001caa:	2320      	movs	r3, #32
 8001cac:	e004      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001cae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d106      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fa97 	bl	80011f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2103      	movs	r1, #3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fa7b 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10a      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x396>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2103      	movs	r1, #3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fa70 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	0e9b      	lsrs	r3, r3, #26
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	e017      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x3c6>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2103      	movs	r1, #3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fa65 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d10:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e003      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d105      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x3de>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	0e9b      	lsrs	r3, r3, #26
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	e011      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x402>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001d56:	2320      	movs	r3, #32
 8001d58:	e003      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d106      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2103      	movs	r1, #3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fa42 	bl	80011f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fb6b 	bl	8001454 <LL_ADC_IsEnabled>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f040 813f 	bne.w	8002004 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6819      	ldr	r1, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	461a      	mov	r2, r3
 8001d94:	f7ff fab6 	bl	8001304 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4a8e      	ldr	r2, [pc, #568]	; (8001fd8 <HAL_ADC_ConfigChannel+0x678>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	f040 8130 	bne.w	8002004 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10b      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x46c>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0e9b      	lsrs	r3, r3, #26
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	2b09      	cmp	r3, #9
 8001dc2:	bf94      	ite	ls
 8001dc4:	2301      	movls	r3, #1
 8001dc6:	2300      	movhi	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e019      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x4a0>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ddc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001de4:	2320      	movs	r3, #32
 8001de6:	e003      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	2b09      	cmp	r3, #9
 8001df8:	bf94      	ite	ls
 8001dfa:	2301      	movls	r3, #1
 8001dfc:	2300      	movhi	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d079      	beq.n	8001ef8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x4c0>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0e9b      	lsrs	r3, r3, #26
 8001e16:	3301      	adds	r3, #1
 8001e18:	069b      	lsls	r3, r3, #26
 8001e1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e1e:	e015      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x4ec>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e30:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	e003      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	069b      	lsls	r3, r3, #26
 8001e48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d109      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x50c>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0e9b      	lsrs	r3, r3, #26
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	e017      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x53c>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e7c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001e84:	2320      	movs	r3, #32
 8001e86:	e003      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	ea42 0103 	orr.w	r1, r2, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10a      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x562>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0e9b      	lsrs	r3, r3, #26
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	051b      	lsls	r3, r3, #20
 8001ec0:	e018      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x594>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001eda:	2320      	movs	r3, #32
 8001edc:	e003      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f003 021f 	and.w	r2, r3, #31
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	e080      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d107      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x5b4>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	0e9b      	lsrs	r3, r3, #26
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	069b      	lsls	r3, r3, #26
 8001f0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f12:	e015      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x5e0>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	e003      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	3301      	adds	r3, #1
 8001f3a:	069b      	lsls	r3, r3, #26
 8001f3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d109      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x600>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0e9b      	lsrs	r3, r3, #26
 8001f52:	3301      	adds	r3, #1
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	2101      	movs	r1, #1
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	e017      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x630>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	61fb      	str	r3, [r7, #28]
  return result;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001f78:	2320      	movs	r3, #32
 8001f7a:	e003      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	3301      	adds	r3, #1
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	ea42 0103 	orr.w	r1, r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10d      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x65c>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0e9b      	lsrs	r3, r3, #26
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b1e      	subs	r3, #30
 8001fb4:	051b      	lsls	r3, r3, #20
 8001fb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fba:	e01d      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x698>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	613b      	str	r3, [r7, #16]
  return result;
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d103      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	e005      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x684>
 8001fd8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f003 021f 	and.w	r2, r3, #31
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b1e      	subs	r3, #30
 8001ff2:	051b      	lsls	r3, r3, #20
 8001ff4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	6892      	ldr	r2, [r2, #8]
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7ff f954 	bl	80012ac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b43      	ldr	r3, [pc, #268]	; (8002118 <HAL_ADC_ConfigChannel+0x7b8>)
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d079      	beq.n	8002104 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002010:	4842      	ldr	r0, [pc, #264]	; (800211c <HAL_ADC_ConfigChannel+0x7bc>)
 8002012:	f7ff f8a9 	bl	8001168 <LL_ADC_GetCommonPathInternalCh>
 8002016:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a40      	ldr	r2, [pc, #256]	; (8002120 <HAL_ADC_ConfigChannel+0x7c0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d12b      	bne.n	800207c <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d125      	bne.n	800207c <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a3b      	ldr	r2, [pc, #236]	; (8002124 <HAL_ADC_ConfigChannel+0x7c4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_ADC_ConfigChannel+0x6e4>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a3a      	ldr	r2, [pc, #232]	; (8002128 <HAL_ADC_ConfigChannel+0x7c8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d15c      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002044:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002048:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800204c:	4619      	mov	r1, r3
 800204e:	4833      	ldr	r0, [pc, #204]	; (800211c <HAL_ADC_ConfigChannel+0x7bc>)
 8002050:	f7ff f877 	bl	8001142 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002054:	4b35      	ldr	r3, [pc, #212]	; (800212c <HAL_ADC_ConfigChannel+0x7cc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	099b      	lsrs	r3, r3, #6
 800205a:	4a35      	ldr	r2, [pc, #212]	; (8002130 <HAL_ADC_ConfigChannel+0x7d0>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	099a      	lsrs	r2, r3, #6
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800206c:	e002      	b.n	8002074 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	3b01      	subs	r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f9      	bne.n	800206e <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800207a:	e040      	b.n	80020fe <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2c      	ldr	r2, [pc, #176]	; (8002134 <HAL_ADC_ConfigChannel+0x7d4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d118      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x758>
 8002086:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800208a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d112      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a23      	ldr	r2, [pc, #140]	; (8002124 <HAL_ADC_ConfigChannel+0x7c4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d004      	beq.n	80020a6 <HAL_ADC_ConfigChannel+0x746>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a21      	ldr	r2, [pc, #132]	; (8002128 <HAL_ADC_ConfigChannel+0x7c8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d12d      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ae:	4619      	mov	r1, r3
 80020b0:	481a      	ldr	r0, [pc, #104]	; (800211c <HAL_ADC_ConfigChannel+0x7bc>)
 80020b2:	f7ff f846 	bl	8001142 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b6:	e024      	b.n	8002102 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <HAL_ADC_ConfigChannel+0x7d8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d120      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d11a      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a14      	ldr	r2, [pc, #80]	; (8002124 <HAL_ADC_ConfigChannel+0x7c4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d115      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020e0:	4619      	mov	r1, r3
 80020e2:	480e      	ldr	r0, [pc, #56]	; (800211c <HAL_ADC_ConfigChannel+0x7bc>)
 80020e4:	f7ff f82d 	bl	8001142 <LL_ADC_SetCommonPathInternalCh>
 80020e8:	e00c      	b.n	8002104 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	f043 0220 	orr.w	r2, r3, #32
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80020fc:	e002      	b.n	8002104 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020fe:	bf00      	nop
 8002100:	e000      	b.n	8002104 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002102:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800210c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002110:	4618      	mov	r0, r3
 8002112:	37d8      	adds	r7, #216	; 0xd8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	80080000 	.word	0x80080000
 800211c:	50040300 	.word	0x50040300
 8002120:	c7520000 	.word	0xc7520000
 8002124:	50040000 	.word	0x50040000
 8002128:	50040200 	.word	0x50040200
 800212c:	20000000 	.word	0x20000000
 8002130:	053e2d63 	.word	0x053e2d63
 8002134:	cb840000 	.word	0xcb840000
 8002138:	80000001 	.word	0x80000001

0800213c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f983 	bl	8001454 <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d146      	bne.n	80021e2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	4b24      	ldr	r3, [pc, #144]	; (80021ec <ADC_Enable+0xb0>)
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00d      	beq.n	800217e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002166:	f043 0210 	orr.w	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e032      	b.n	80021e4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f93e 	bl	8001404 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002188:	f7fe ffbc 	bl	8001104 <HAL_GetTick>
 800218c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800218e:	e021      	b.n	80021d4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff f95d 	bl	8001454 <LL_ADC_IsEnabled>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d104      	bne.n	80021aa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff f92d 	bl	8001404 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021aa:	f7fe ffab 	bl	8001104 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d90d      	bls.n	80021d4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021bc:	f043 0210 	orr.w	r2, r3, #16
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e007      	b.n	80021e4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d1d6      	bne.n	8002190 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	8000003f 	.word	0x8000003f

080021f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff f93c 	bl	800147a <LL_ADC_IsDisableOngoing>
 8002202:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff f923 	bl	8001454 <LL_ADC_IsEnabled>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d040      	beq.n	8002296 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d13d      	bne.n	8002296 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030d 	and.w	r3, r3, #13
 8002224:	2b01      	cmp	r3, #1
 8002226:	d10c      	bne.n	8002242 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff f8fd 	bl	800142c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2203      	movs	r2, #3
 8002238:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800223a:	f7fe ff63 	bl	8001104 <HAL_GetTick>
 800223e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002240:	e022      	b.n	8002288 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	f043 0210 	orr.w	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	f043 0201 	orr.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e01c      	b.n	8002298 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800225e:	f7fe ff51 	bl	8001104 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d90d      	bls.n	8002288 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002270:	f043 0210 	orr.w	r2, r3, #16
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e007      	b.n	8002298 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1e3      	bne.n	800225e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d14b      	bne.n	8002352 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d021      	beq.n	8002318 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe ffa8 	bl	800122e <LL_ADC_REG_IsTriggerSourceSWStart>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d032      	beq.n	800234a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d12b      	bne.n	800234a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11f      	bne.n	800234a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	655a      	str	r2, [r3, #84]	; 0x54
 8002316:	e018      	b.n	800234a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d111      	bne.n	800234a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f7ff faea 	bl	8001924 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002350:	e00e      	b.n	8002370 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f7ff faf4 	bl	800194c <HAL_ADC_ErrorCallback>
}
 8002364:	e004      	b.n	8002370 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	4798      	blx	r3
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f7ff fad6 	bl	8001938 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	f043 0204 	orr.w	r2, r3, #4
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7ff fac6 	bl	800194c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <LL_ADC_IsEnabled>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <LL_ADC_IsEnabled+0x18>
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <LL_ADC_IsEnabled+0x1a>
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <LL_ADC_StartCalibration>:
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002400:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800240a:	4313      	orrs	r3, r2
 800240c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	609a      	str	r2, [r3, #8]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_IsCalibrationOnGoing>:
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002434:	d101      	bne.n	800243a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_REG_IsConversionOngoing>:
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b04      	cmp	r3, #4
 800245a:	d101      	bne.n	8002460 <LL_ADC_REG_IsConversionOngoing+0x18>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_ADCEx_Calibration_Start+0x1c>
 8002486:	2302      	movs	r3, #2
 8002488:	e04d      	b.n	8002526 <HAL_ADCEx_Calibration_Start+0xb8>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff feac 	bl	80021f0 <ADC_Disable>
 8002498:	4603      	mov	r3, r0
 800249a:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d136      	bne.n	8002510 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024aa:	f023 0302 	bic.w	r3, r3, #2
 80024ae:	f043 0202 	orr.w	r2, r3, #2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6839      	ldr	r1, [r7, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff96 	bl	80023ee <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80024c2:	e014      	b.n	80024ee <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	3301      	adds	r3, #1
 80024c8:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80024d0:	d30d      	bcc.n	80024ee <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f023 0312 	bic.w	r3, r3, #18
 80024da:	f043 0210 	orr.w	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e01b      	b.n	8002526 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff94 	bl	8002420 <LL_ADC_IsCalibrationOnGoing>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1e2      	bne.n	80024c4 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	f023 0303 	bic.w	r3, r3, #3
 8002506:	f043 0201 	orr.w	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
 800250e:	e005      	b.n	800251c <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f043 0210 	orr.w	r2, r3, #16
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b09f      	sub	sp, #124	; 0x7c
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800254a:	2302      	movs	r3, #2
 800254c:	e08f      	b.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a47      	ldr	r2, [pc, #284]	; (8002678 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d102      	bne.n	8002566 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002560:	4b46      	ldr	r3, [pc, #280]	; (800267c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	e001      	b.n	800256a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10b      	bne.n	8002588 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002574:	f043 0220 	orr.w	r2, r3, #32
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e072      	b.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ff5c 	bl	8002448 <LL_ADC_REG_IsConversionOngoing>
 8002590:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ff56 	bl	8002448 <LL_ADC_REG_IsConversionOngoing>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d154      	bne.n	800264c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80025a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d151      	bne.n	800264c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025a8:	4b35      	ldr	r3, [pc, #212]	; (8002680 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025aa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d02c      	beq.n	800260e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025c6:	035b      	lsls	r3, r3, #13
 80025c8:	430b      	orrs	r3, r1
 80025ca:	431a      	orrs	r2, r3
 80025cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025d0:	4829      	ldr	r0, [pc, #164]	; (8002678 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80025d2:	f7ff fef9 	bl	80023c8 <LL_ADC_IsEnabled>
 80025d6:	4604      	mov	r4, r0
 80025d8:	4828      	ldr	r0, [pc, #160]	; (800267c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80025da:	f7ff fef5 	bl	80023c8 <LL_ADC_IsEnabled>
 80025de:	4603      	mov	r3, r0
 80025e0:	431c      	orrs	r4, r3
 80025e2:	4828      	ldr	r0, [pc, #160]	; (8002684 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025e4:	f7ff fef0 	bl	80023c8 <LL_ADC_IsEnabled>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4323      	orrs	r3, r4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d137      	bne.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025f8:	f023 030f 	bic.w	r3, r3, #15
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	6811      	ldr	r1, [r2, #0]
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	6892      	ldr	r2, [r2, #8]
 8002604:	430a      	orrs	r2, r1
 8002606:	431a      	orrs	r2, r3
 8002608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800260a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800260c:	e028      	b.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800260e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002618:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800261a:	4817      	ldr	r0, [pc, #92]	; (8002678 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800261c:	f7ff fed4 	bl	80023c8 <LL_ADC_IsEnabled>
 8002620:	4604      	mov	r4, r0
 8002622:	4816      	ldr	r0, [pc, #88]	; (800267c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002624:	f7ff fed0 	bl	80023c8 <LL_ADC_IsEnabled>
 8002628:	4603      	mov	r3, r0
 800262a:	431c      	orrs	r4, r3
 800262c:	4815      	ldr	r0, [pc, #84]	; (8002684 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800262e:	f7ff fecb 	bl	80023c8 <LL_ADC_IsEnabled>
 8002632:	4603      	mov	r3, r0
 8002634:	4323      	orrs	r3, r4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d112      	bne.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800263a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002642:	f023 030f 	bic.w	r3, r3, #15
 8002646:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002648:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800264a:	e009      	b.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002650:	f043 0220 	orr.w	r2, r3, #32
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800265e:	e000      	b.n	8002662 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002660:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800266a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800266e:	4618      	mov	r0, r3
 8002670:	377c      	adds	r7, #124	; 0x7c
 8002672:	46bd      	mov	sp, r7
 8002674:	bd90      	pop	{r4, r7, pc}
 8002676:	bf00      	nop
 8002678:	50040000 	.word	0x50040000
 800267c:	50040100 	.word	0x50040100
 8002680:	50040300 	.word	0x50040300
 8002684:	50040200 	.word	0x50040200

08002688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <__NVIC_SetPriorityGrouping+0x44>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a4:	4013      	ands	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ba:	4a04      	ldr	r2, [pc, #16]	; (80026cc <__NVIC_SetPriorityGrouping+0x44>)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	60d3      	str	r3, [r2, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <__NVIC_GetPriorityGrouping+0x18>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	f003 0307 	and.w	r3, r3, #7
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	db0b      	blt.n	8002716 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	4907      	ldr	r1, [pc, #28]	; (8002724 <__NVIC_EnableIRQ+0x38>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2001      	movs	r0, #1
 800270e:	fa00 f202 	lsl.w	r2, r0, r2
 8002712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000e100 	.word	0xe000e100

08002728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	2b00      	cmp	r3, #0
 800273a:	db0a      	blt.n	8002752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	490c      	ldr	r1, [pc, #48]	; (8002774 <__NVIC_SetPriority+0x4c>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	440b      	add	r3, r1
 800274c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002750:	e00a      	b.n	8002768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4908      	ldr	r1, [pc, #32]	; (8002778 <__NVIC_SetPriority+0x50>)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	3b04      	subs	r3, #4
 8002760:	0112      	lsls	r2, r2, #4
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	440b      	add	r3, r1
 8002766:	761a      	strb	r2, [r3, #24]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000e100 	.word	0xe000e100
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f1c3 0307 	rsb	r3, r3, #7
 8002796:	2b04      	cmp	r3, #4
 8002798:	bf28      	it	cs
 800279a:	2304      	movcs	r3, #4
 800279c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d902      	bls.n	80027ac <NVIC_EncodePriority+0x30>
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3b03      	subs	r3, #3
 80027aa:	e000      	b.n	80027ae <NVIC_EncodePriority+0x32>
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	401a      	ands	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43d9      	mvns	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	4313      	orrs	r3, r2
         );
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	; 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f4:	d301      	bcc.n	80027fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00f      	b.n	800281a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <SysTick_Config+0x40>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002802:	210f      	movs	r1, #15
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	f7ff ff8e 	bl	8002728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <SysTick_Config+0x40>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002812:	4b04      	ldr	r3, [pc, #16]	; (8002824 <SysTick_Config+0x40>)
 8002814:	2207      	movs	r2, #7
 8002816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	e000e010 	.word	0xe000e010

08002828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff29 	bl	8002688 <__NVIC_SetPriorityGrouping>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002850:	f7ff ff3e 	bl	80026d0 <__NVIC_GetPriorityGrouping>
 8002854:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	6978      	ldr	r0, [r7, #20]
 800285c:	f7ff ff8e 	bl	800277c <NVIC_EncodePriority>
 8002860:	4602      	mov	r2, r0
 8002862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff5d 	bl	8002728 <__NVIC_SetPriority>
}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff31 	bl	80026ec <__NVIC_EnableIRQ>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ffa2 	bl	80027e4 <SysTick_Config>
 80028a0:	4603      	mov	r3, r0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e098      	b.n	80029f0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b4d      	ldr	r3, [pc, #308]	; (80029fc <HAL_DMA_Init+0x150>)
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d80f      	bhi.n	80028ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <HAL_DMA_Init+0x154>)
 80028d2:	4413      	add	r3, r2
 80028d4:	4a4b      	ldr	r2, [pc, #300]	; (8002a04 <HAL_DMA_Init+0x158>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	009a      	lsls	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a48      	ldr	r2, [pc, #288]	; (8002a08 <HAL_DMA_Init+0x15c>)
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
 80028e8:	e00e      	b.n	8002908 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b46      	ldr	r3, [pc, #280]	; (8002a0c <HAL_DMA_Init+0x160>)
 80028f2:	4413      	add	r3, r2
 80028f4:	4a43      	ldr	r2, [pc, #268]	; (8002a04 <HAL_DMA_Init+0x158>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	009a      	lsls	r2, r3, #2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a42      	ldr	r2, [pc, #264]	; (8002a10 <HAL_DMA_Init+0x164>)
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800292c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002938:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002944:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002962:	d039      	beq.n	80029d8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <HAL_DMA_Init+0x15c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d11a      	bne.n	80029a4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800296e:	4b29      	ldr	r3, [pc, #164]	; (8002a14 <HAL_DMA_Init+0x168>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f003 031c 	and.w	r3, r3, #28
 800297a:	210f      	movs	r1, #15
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	4924      	ldr	r1, [pc, #144]	; (8002a14 <HAL_DMA_Init+0x168>)
 8002984:	4013      	ands	r3, r2
 8002986:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002988:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <HAL_DMA_Init+0x168>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	f003 031c 	and.w	r3, r3, #28
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	491d      	ldr	r1, [pc, #116]	; (8002a14 <HAL_DMA_Init+0x168>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
 80029a2:	e019      	b.n	80029d8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80029a4:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <HAL_DMA_Init+0x16c>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	f003 031c 	and.w	r3, r3, #28
 80029b0:	210f      	movs	r1, #15
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	4917      	ldr	r1, [pc, #92]	; (8002a18 <HAL_DMA_Init+0x16c>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_DMA_Init+0x16c>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	f003 031c 	and.w	r3, r3, #28
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	4911      	ldr	r1, [pc, #68]	; (8002a18 <HAL_DMA_Init+0x16c>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40020407 	.word	0x40020407
 8002a00:	bffdfff8 	.word	0xbffdfff8
 8002a04:	cccccccd 	.word	0xcccccccd
 8002a08:	40020000 	.word	0x40020000
 8002a0c:	bffdfbf8 	.word	0xbffdfbf8
 8002a10:	40020400 	.word	0x40020400
 8002a14:	400200a8 	.word	0x400200a8
 8002a18:	400204a8 	.word	0x400204a8

08002a1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_DMA_Start_IT+0x20>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e04b      	b.n	8002ad4 <HAL_DMA_Start_IT+0xb8>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d13a      	bne.n	8002ac6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f8e0 	bl	8002c3a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 020e 	orr.w	r2, r2, #14
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	e00f      	b.n	8002ab4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0204 	bic.w	r2, r2, #4
 8002aa2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 020a 	orr.w	r2, r2, #10
 8002ab2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e005      	b.n	8002ad2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	f003 031c 	and.w	r3, r3, #28
 8002afc:	2204      	movs	r2, #4
 8002afe:	409a      	lsls	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d026      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x7a>
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d021      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0204 	bic.w	r2, r2, #4
 8002b2e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	f003 021c 	and.w	r2, r3, #28
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	2104      	movs	r1, #4
 8002b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b42:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d071      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002b54:	e06c      	b.n	8002c30 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f003 031c 	and.w	r3, r3, #28
 8002b5e:	2202      	movs	r2, #2
 8002b60:	409a      	lsls	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d02e      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xec>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d029      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10b      	bne.n	8002b9a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 020a 	bic.w	r2, r2, #10
 8002b90:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f003 021c 	and.w	r2, r3, #28
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d038      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002bc6:	e033      	b.n	8002c30 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	f003 031c 	and.w	r3, r3, #28
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d02a      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x156>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d025      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 020e 	bic.w	r2, r2, #14
 8002bf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	f003 021c 	and.w	r2, r3, #28
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2101      	movs	r1, #1
 8002c04:	fa01 f202 	lsl.w	r2, r1, r2
 8002c08:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d004      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
}
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4c:	f003 021c 	and.w	r2, r3, #28
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	2101      	movs	r1, #1
 8002c56:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d108      	bne.n	8002c7e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c7c:	e007      	b.n	8002c8e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	60da      	str	r2, [r3, #12]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002caa:	e17f      	b.n	8002fac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8171 	beq.w	8002fa6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d00b      	beq.n	8002ce4 <HAL_GPIO_Init+0x48>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d007      	beq.n	8002ce4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cd8:	2b11      	cmp	r3, #17
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b12      	cmp	r3, #18
 8002ce2:	d130      	bne.n	8002d46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4013      	ands	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	f003 0201 	and.w	r2, r3, #1
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d118      	bne.n	8002d84 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	08db      	lsrs	r3, r3, #3
 8002d6e:	f003 0201 	and.w	r2, r3, #1
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	2203      	movs	r2, #3
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x128>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b12      	cmp	r3, #18
 8002dc2:	d123      	bne.n	8002e0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	08da      	lsrs	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3208      	adds	r2, #8
 8002dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	220f      	movs	r2, #15
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	08da      	lsrs	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3208      	adds	r2, #8
 8002e06:	6939      	ldr	r1, [r7, #16]
 8002e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0203 	and.w	r2, r3, #3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80ac 	beq.w	8002fa6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4e:	4b5e      	ldr	r3, [pc, #376]	; (8002fc8 <HAL_GPIO_Init+0x32c>)
 8002e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e52:	4a5d      	ldr	r2, [pc, #372]	; (8002fc8 <HAL_GPIO_Init+0x32c>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6613      	str	r3, [r2, #96]	; 0x60
 8002e5a:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <HAL_GPIO_Init+0x32c>)
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e66:	4a59      	ldr	r2, [pc, #356]	; (8002fcc <HAL_GPIO_Init+0x330>)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	220f      	movs	r2, #15
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e90:	d025      	beq.n	8002ede <HAL_GPIO_Init+0x242>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4e      	ldr	r2, [pc, #312]	; (8002fd0 <HAL_GPIO_Init+0x334>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01f      	beq.n	8002eda <HAL_GPIO_Init+0x23e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4d      	ldr	r2, [pc, #308]	; (8002fd4 <HAL_GPIO_Init+0x338>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d019      	beq.n	8002ed6 <HAL_GPIO_Init+0x23a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4c      	ldr	r2, [pc, #304]	; (8002fd8 <HAL_GPIO_Init+0x33c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_GPIO_Init+0x236>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4b      	ldr	r2, [pc, #300]	; (8002fdc <HAL_GPIO_Init+0x340>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00d      	beq.n	8002ece <HAL_GPIO_Init+0x232>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4a      	ldr	r2, [pc, #296]	; (8002fe0 <HAL_GPIO_Init+0x344>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <HAL_GPIO_Init+0x22e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a49      	ldr	r2, [pc, #292]	; (8002fe4 <HAL_GPIO_Init+0x348>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_GPIO_Init+0x22a>
 8002ec2:	2306      	movs	r3, #6
 8002ec4:	e00c      	b.n	8002ee0 <HAL_GPIO_Init+0x244>
 8002ec6:	2307      	movs	r3, #7
 8002ec8:	e00a      	b.n	8002ee0 <HAL_GPIO_Init+0x244>
 8002eca:	2305      	movs	r3, #5
 8002ecc:	e008      	b.n	8002ee0 <HAL_GPIO_Init+0x244>
 8002ece:	2304      	movs	r3, #4
 8002ed0:	e006      	b.n	8002ee0 <HAL_GPIO_Init+0x244>
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e004      	b.n	8002ee0 <HAL_GPIO_Init+0x244>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e002      	b.n	8002ee0 <HAL_GPIO_Init+0x244>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_GPIO_Init+0x244>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	f002 0203 	and.w	r2, r2, #3
 8002ee6:	0092      	lsls	r2, r2, #2
 8002ee8:	4093      	lsls	r3, r2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ef0:	4936      	ldr	r1, [pc, #216]	; (8002fcc <HAL_GPIO_Init+0x330>)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002efe:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <HAL_GPIO_Init+0x34c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f22:	4a31      	ldr	r2, [pc, #196]	; (8002fe8 <HAL_GPIO_Init+0x34c>)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002f28:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <HAL_GPIO_Init+0x34c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <HAL_GPIO_Init+0x34c>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f52:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <HAL_GPIO_Init+0x34c>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f76:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <HAL_GPIO_Init+0x34c>)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <HAL_GPIO_Init+0x34c>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fa0:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <HAL_GPIO_Init+0x34c>)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f47f ae78 	bne.w	8002cac <HAL_GPIO_Init+0x10>
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	371c      	adds	r7, #28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40010000 	.word	0x40010000
 8002fd0:	48000400 	.word	0x48000400
 8002fd4:	48000800 	.word	0x48000800
 8002fd8:	48000c00 	.word	0x48000c00
 8002fdc:	48001000 	.word	0x48001000
 8002fe0:	48001400 	.word	0x48001400
 8002fe4:	48001800 	.word	0x48001800
 8002fe8:	40010400 	.word	0x40010400

08002fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	887b      	ldrh	r3, [r7, #2]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
 8003008:	e001      	b.n	800300e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	807b      	strh	r3, [r7, #2]
 8003028:	4613      	mov	r3, r2
 800302a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800302c:	787b      	ldrb	r3, [r7, #1]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003032:	887a      	ldrh	r2, [r7, #2]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003038:	e002      	b.n	8003040 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <HAL_PWREx_GetVoltageRange+0x18>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40007000 	.word	0x40007000

08003068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003076:	d130      	bne.n	80030da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003078:	4b23      	ldr	r3, [pc, #140]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d038      	beq.n	80030f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800308e:	4a1e      	ldr	r2, [pc, #120]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003094:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003096:	4b1d      	ldr	r3, [pc, #116]	; (800310c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2232      	movs	r2, #50	; 0x32
 800309c:	fb02 f303 	mul.w	r3, r2, r3
 80030a0:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	0c9b      	lsrs	r3, r3, #18
 80030a8:	3301      	adds	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ac:	e002      	b.n	80030b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030b4:	4b14      	ldr	r3, [pc, #80]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c0:	d102      	bne.n	80030c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f2      	bne.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d4:	d110      	bne.n	80030f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e00f      	b.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e6:	d007      	beq.n	80030f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030e8:	4b07      	ldr	r3, [pc, #28]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030f0:	4a05      	ldr	r2, [pc, #20]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40007000 	.word	0x40007000
 800310c:	20000000 	.word	0x20000000
 8003110:	431bde83 	.word	0x431bde83

08003114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e3d4      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003126:	4ba1      	ldr	r3, [pc, #644]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003130:	4b9e      	ldr	r3, [pc, #632]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80e4 	beq.w	8003310 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <HAL_RCC_OscConfig+0x4a>
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b0c      	cmp	r3, #12
 8003152:	f040 808b 	bne.w	800326c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b01      	cmp	r3, #1
 800315a:	f040 8087 	bne.w	800326c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800315e:	4b93      	ldr	r3, [pc, #588]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_RCC_OscConfig+0x62>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e3ac      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1a      	ldr	r2, [r3, #32]
 800317a:	4b8c      	ldr	r3, [pc, #560]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d004      	beq.n	8003190 <HAL_RCC_OscConfig+0x7c>
 8003186:	4b89      	ldr	r3, [pc, #548]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800318e:	e005      	b.n	800319c <HAL_RCC_OscConfig+0x88>
 8003190:	4b86      	ldr	r3, [pc, #536]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800319c:	4293      	cmp	r3, r2
 800319e:	d223      	bcs.n	80031e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fd3f 	bl	8003c28 <RCC_SetFlashLatencyFromMSIRange>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e38d      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b4:	4b7d      	ldr	r3, [pc, #500]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a7c      	ldr	r2, [pc, #496]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80031ba:	f043 0308 	orr.w	r3, r3, #8
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b7a      	ldr	r3, [pc, #488]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4977      	ldr	r1, [pc, #476]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d2:	4b76      	ldr	r3, [pc, #472]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	4972      	ldr	r1, [pc, #456]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
 80031e6:	e025      	b.n	8003234 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e8:	4b70      	ldr	r3, [pc, #448]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6f      	ldr	r2, [pc, #444]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80031ee:	f043 0308 	orr.w	r3, r3, #8
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4b6d      	ldr	r3, [pc, #436]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	496a      	ldr	r1, [pc, #424]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003206:	4b69      	ldr	r3, [pc, #420]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	4965      	ldr	r1, [pc, #404]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fcff 	bl	8003c28 <RCC_SetFlashLatencyFromMSIRange>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e34d      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003234:	f000 fc36 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003238:	4601      	mov	r1, r0
 800323a:	4b5c      	ldr	r3, [pc, #368]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	4a5a      	ldr	r2, [pc, #360]	; (80033b0 <HAL_RCC_OscConfig+0x29c>)
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	fa21 f303 	lsr.w	r3, r1, r3
 8003250:	4a58      	ldr	r2, [pc, #352]	; (80033b4 <HAL_RCC_OscConfig+0x2a0>)
 8003252:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003254:	4b58      	ldr	r3, [pc, #352]	; (80033b8 <HAL_RCC_OscConfig+0x2a4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd ff03 	bl	8001064 <HAL_InitTick>
 800325e:	4603      	mov	r3, r0
 8003260:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d052      	beq.n	800330e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	e331      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d032      	beq.n	80032da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003274:	4b4d      	ldr	r3, [pc, #308]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a4c      	ldr	r2, [pc, #304]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003280:	f7fd ff40 	bl	8001104 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003288:	f7fd ff3c 	bl	8001104 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e31a      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800329a:	4b44      	ldr	r3, [pc, #272]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a6:	4b41      	ldr	r3, [pc, #260]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a40      	ldr	r2, [pc, #256]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80032ac:	f043 0308 	orr.w	r3, r3, #8
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	493b      	ldr	r1, [pc, #236]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032c4:	4b39      	ldr	r3, [pc, #228]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	4936      	ldr	r1, [pc, #216]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
 80032d8:	e01a      	b.n	8003310 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032da:	4b34      	ldr	r3, [pc, #208]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a33      	ldr	r2, [pc, #204]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032e6:	f7fd ff0d 	bl	8001104 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ee:	f7fd ff09 	bl	8001104 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e2e7      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003300:	4b2a      	ldr	r3, [pc, #168]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f0      	bne.n	80032ee <HAL_RCC_OscConfig+0x1da>
 800330c:	e000      	b.n	8003310 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800330e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d074      	beq.n	8003406 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b08      	cmp	r3, #8
 8003320:	d005      	beq.n	800332e <HAL_RCC_OscConfig+0x21a>
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d10e      	bne.n	8003346 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2b03      	cmp	r3, #3
 800332c:	d10b      	bne.n	8003346 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332e:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d064      	beq.n	8003404 <HAL_RCC_OscConfig+0x2f0>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d160      	bne.n	8003404 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e2c4      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334e:	d106      	bne.n	800335e <HAL_RCC_OscConfig+0x24a>
 8003350:	4b16      	ldr	r3, [pc, #88]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a15      	ldr	r2, [pc, #84]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	e01d      	b.n	800339a <HAL_RCC_OscConfig+0x286>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003366:	d10c      	bne.n	8003382 <HAL_RCC_OscConfig+0x26e>
 8003368:	4b10      	ldr	r3, [pc, #64]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0f      	ldr	r2, [pc, #60]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 800336e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a0c      	ldr	r2, [pc, #48]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 800337a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	e00b      	b.n	800339a <HAL_RCC_OscConfig+0x286>
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a09      	ldr	r2, [pc, #36]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	4b07      	ldr	r3, [pc, #28]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a06      	ldr	r2, [pc, #24]	; (80033ac <HAL_RCC_OscConfig+0x298>)
 8003394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003398:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01c      	beq.n	80033dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7fd feaf 	bl	8001104 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a8:	e011      	b.n	80033ce <HAL_RCC_OscConfig+0x2ba>
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
 80033b0:	080064d8 	.word	0x080064d8
 80033b4:	20000000 	.word	0x20000000
 80033b8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fd fea2 	bl	8001104 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e280      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ce:	4baf      	ldr	r3, [pc, #700]	; (800368c <HAL_RCC_OscConfig+0x578>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x2a8>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fd fe92 	bl	8001104 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fd fe8e 	bl	8001104 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e26c      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033f6:	4ba5      	ldr	r3, [pc, #660]	; (800368c <HAL_RCC_OscConfig+0x578>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x2d0>
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d060      	beq.n	80034d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d005      	beq.n	8003424 <HAL_RCC_OscConfig+0x310>
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2b0c      	cmp	r3, #12
 800341c:	d119      	bne.n	8003452 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d116      	bne.n	8003452 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003424:	4b99      	ldr	r3, [pc, #612]	; (800368c <HAL_RCC_OscConfig+0x578>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_OscConfig+0x328>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e249      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343c:	4b93      	ldr	r3, [pc, #588]	; (800368c <HAL_RCC_OscConfig+0x578>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	061b      	lsls	r3, r3, #24
 800344a:	4990      	ldr	r1, [pc, #576]	; (800368c <HAL_RCC_OscConfig+0x578>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003450:	e040      	b.n	80034d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d023      	beq.n	80034a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800345a:	4b8c      	ldr	r3, [pc, #560]	; (800368c <HAL_RCC_OscConfig+0x578>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a8b      	ldr	r2, [pc, #556]	; (800368c <HAL_RCC_OscConfig+0x578>)
 8003460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003466:	f7fd fe4d 	bl	8001104 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346e:	f7fd fe49 	bl	8001104 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e227      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003480:	4b82      	ldr	r3, [pc, #520]	; (800368c <HAL_RCC_OscConfig+0x578>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348c:	4b7f      	ldr	r3, [pc, #508]	; (800368c <HAL_RCC_OscConfig+0x578>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	497c      	ldr	r1, [pc, #496]	; (800368c <HAL_RCC_OscConfig+0x578>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
 80034a0:	e018      	b.n	80034d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a2:	4b7a      	ldr	r3, [pc, #488]	; (800368c <HAL_RCC_OscConfig+0x578>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a79      	ldr	r2, [pc, #484]	; (800368c <HAL_RCC_OscConfig+0x578>)
 80034a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fd fe29 	bl	8001104 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b6:	f7fd fe25 	bl	8001104 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e203      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034c8:	4b70      	ldr	r3, [pc, #448]	; (800368c <HAL_RCC_OscConfig+0x578>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d03c      	beq.n	800355a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01c      	beq.n	8003522 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e8:	4b68      	ldr	r3, [pc, #416]	; (800368c <HAL_RCC_OscConfig+0x578>)
 80034ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ee:	4a67      	ldr	r2, [pc, #412]	; (800368c <HAL_RCC_OscConfig+0x578>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fd fe04 	bl	8001104 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003500:	f7fd fe00 	bl	8001104 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e1de      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003512:	4b5e      	ldr	r3, [pc, #376]	; (800368c <HAL_RCC_OscConfig+0x578>)
 8003514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ef      	beq.n	8003500 <HAL_RCC_OscConfig+0x3ec>
 8003520:	e01b      	b.n	800355a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003522:	4b5a      	ldr	r3, [pc, #360]	; (800368c <HAL_RCC_OscConfig+0x578>)
 8003524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003528:	4a58      	ldr	r2, [pc, #352]	; (800368c <HAL_RCC_OscConfig+0x578>)
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fd fde7 	bl	8001104 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353a:	f7fd fde3 	bl	8001104 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e1c1      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800354c:	4b4f      	ldr	r3, [pc, #316]	; (800368c <HAL_RCC_OscConfig+0x578>)
 800354e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1ef      	bne.n	800353a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80a6 	beq.w	80036b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003568:	2300      	movs	r3, #0
 800356a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800356c:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_RCC_OscConfig+0x578>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10d      	bne.n	8003594 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003578:	4b44      	ldr	r3, [pc, #272]	; (800368c <HAL_RCC_OscConfig+0x578>)
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	4a43      	ldr	r2, [pc, #268]	; (800368c <HAL_RCC_OscConfig+0x578>)
 800357e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003582:	6593      	str	r3, [r2, #88]	; 0x58
 8003584:	4b41      	ldr	r3, [pc, #260]	; (800368c <HAL_RCC_OscConfig+0x578>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003590:	2301      	movs	r3, #1
 8003592:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003594:	4b3e      	ldr	r3, [pc, #248]	; (8003690 <HAL_RCC_OscConfig+0x57c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d118      	bne.n	80035d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035a0:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <HAL_RCC_OscConfig+0x57c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3a      	ldr	r2, [pc, #232]	; (8003690 <HAL_RCC_OscConfig+0x57c>)
 80035a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ac:	f7fd fdaa 	bl	8001104 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b4:	f7fd fda6 	bl	8001104 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e184      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c6:	4b32      	ldr	r3, [pc, #200]	; (8003690 <HAL_RCC_OscConfig+0x57c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d108      	bne.n	80035ec <HAL_RCC_OscConfig+0x4d8>
 80035da:	4b2c      	ldr	r3, [pc, #176]	; (800368c <HAL_RCC_OscConfig+0x578>)
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e0:	4a2a      	ldr	r2, [pc, #168]	; (800368c <HAL_RCC_OscConfig+0x578>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035ea:	e024      	b.n	8003636 <HAL_RCC_OscConfig+0x522>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d110      	bne.n	8003616 <HAL_RCC_OscConfig+0x502>
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <HAL_RCC_OscConfig+0x578>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	4a24      	ldr	r2, [pc, #144]	; (800368c <HAL_RCC_OscConfig+0x578>)
 80035fc:	f043 0304 	orr.w	r3, r3, #4
 8003600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003604:	4b21      	ldr	r3, [pc, #132]	; (800368c <HAL_RCC_OscConfig+0x578>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	4a20      	ldr	r2, [pc, #128]	; (800368c <HAL_RCC_OscConfig+0x578>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003614:	e00f      	b.n	8003636 <HAL_RCC_OscConfig+0x522>
 8003616:	4b1d      	ldr	r3, [pc, #116]	; (800368c <HAL_RCC_OscConfig+0x578>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	4a1b      	ldr	r2, [pc, #108]	; (800368c <HAL_RCC_OscConfig+0x578>)
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003626:	4b19      	ldr	r3, [pc, #100]	; (800368c <HAL_RCC_OscConfig+0x578>)
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362c:	4a17      	ldr	r2, [pc, #92]	; (800368c <HAL_RCC_OscConfig+0x578>)
 800362e:	f023 0304 	bic.w	r3, r3, #4
 8003632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d016      	beq.n	800366c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363e:	f7fd fd61 	bl	8001104 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7fd fd5d 	bl	8001104 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e139      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_OscConfig+0x578>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0ed      	beq.n	8003646 <HAL_RCC_OscConfig+0x532>
 800366a:	e01a      	b.n	80036a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7fd fd4a 	bl	8001104 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003672:	e00f      	b.n	8003694 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003674:	f7fd fd46 	bl	8001104 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d906      	bls.n	8003694 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e122      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
 800368a:	bf00      	nop
 800368c:	40021000 	.word	0x40021000
 8003690:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003694:	4b90      	ldr	r3, [pc, #576]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e8      	bne.n	8003674 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a2:	7ffb      	ldrb	r3, [r7, #31]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d105      	bne.n	80036b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a8:	4b8b      	ldr	r3, [pc, #556]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	4a8a      	ldr	r2, [pc, #552]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 80036ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 8108 	beq.w	80038ce <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	f040 80d0 	bne.w	8003868 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036c8:	4b83      	ldr	r3, [pc, #524]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f003 0203 	and.w	r2, r3, #3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	429a      	cmp	r2, r3
 80036da:	d130      	bne.n	800373e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	3b01      	subs	r3, #1
 80036e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d127      	bne.n	800373e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d11f      	bne.n	800373e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003708:	2a07      	cmp	r2, #7
 800370a:	bf14      	ite	ne
 800370c:	2201      	movne	r2, #1
 800370e:	2200      	moveq	r2, #0
 8003710:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003712:	4293      	cmp	r3, r2
 8003714:	d113      	bne.n	800373e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	3b01      	subs	r3, #1
 8003724:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d109      	bne.n	800373e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	3b01      	subs	r3, #1
 8003738:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d06e      	beq.n	800381c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d069      	beq.n	8003818 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003744:	4b64      	ldr	r3, [pc, #400]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d105      	bne.n	800375c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003750:	4b61      	ldr	r3, [pc, #388]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0b7      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003760:	4b5d      	ldr	r3, [pc, #372]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a5c      	ldr	r2, [pc, #368]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 8003766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800376a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800376c:	f7fd fcca 	bl	8001104 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fd fcc6 	bl	8001104 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e0a4      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003786:	4b54      	ldr	r3, [pc, #336]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003792:	4b51      	ldr	r3, [pc, #324]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	4b51      	ldr	r3, [pc, #324]	; (80038dc <HAL_RCC_OscConfig+0x7c8>)
 8003798:	4013      	ands	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037a2:	3a01      	subs	r2, #1
 80037a4:	0112      	lsls	r2, r2, #4
 80037a6:	4311      	orrs	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037ac:	0212      	lsls	r2, r2, #8
 80037ae:	4311      	orrs	r1, r2
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037b4:	0852      	lsrs	r2, r2, #1
 80037b6:	3a01      	subs	r2, #1
 80037b8:	0552      	lsls	r2, r2, #21
 80037ba:	4311      	orrs	r1, r2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037c0:	0852      	lsrs	r2, r2, #1
 80037c2:	3a01      	subs	r2, #1
 80037c4:	0652      	lsls	r2, r2, #25
 80037c6:	4311      	orrs	r1, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037cc:	0912      	lsrs	r2, r2, #4
 80037ce:	0452      	lsls	r2, r2, #17
 80037d0:	430a      	orrs	r2, r1
 80037d2:	4941      	ldr	r1, [pc, #260]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037d8:	4b3f      	ldr	r3, [pc, #252]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a3e      	ldr	r2, [pc, #248]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 80037de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037e4:	4b3c      	ldr	r3, [pc, #240]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4a3b      	ldr	r2, [pc, #236]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 80037ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037f0:	f7fd fc88 	bl	8001104 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fd fc84 	bl	8001104 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e062      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380a:	4b33      	ldr	r3, [pc, #204]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003816:	e05a      	b.n	80038ce <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e059      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800381c:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d152      	bne.n	80038ce <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003828:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a2a      	ldr	r2, [pc, #168]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 800382e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003832:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003834:	4b28      	ldr	r3, [pc, #160]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4a27      	ldr	r2, [pc, #156]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 800383a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003840:	f7fd fc60 	bl	8001104 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003848:	f7fd fc5c 	bl	8001104 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e03a      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385a:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x734>
 8003866:	e032      	b.n	80038ce <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d02d      	beq.n	80038ca <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386e:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a19      	ldr	r2, [pc, #100]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 8003874:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003878:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800387a:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d105      	bne.n	8003892 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003886:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 800388c:	f023 0303 	bic.w	r3, r3, #3
 8003890:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	4a10      	ldr	r2, [pc, #64]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 8003898:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800389c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fd fc2f 	bl	8001104 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038aa:	f7fd fc2b 	bl	8001104 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e009      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_RCC_OscConfig+0x7c4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x796>
 80038c8:	e001      	b.n	80038ce <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	f99d808c 	.word	0xf99d808c

080038e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0c8      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f4:	4b66      	ldr	r3, [pc, #408]	; (8003a90 <HAL_RCC_ClockConfig+0x1b0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d910      	bls.n	8003924 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b63      	ldr	r3, [pc, #396]	; (8003a90 <HAL_RCC_ClockConfig+0x1b0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 0207 	bic.w	r2, r3, #7
 800390a:	4961      	ldr	r1, [pc, #388]	; (8003a90 <HAL_RCC_ClockConfig+0x1b0>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b5f      	ldr	r3, [pc, #380]	; (8003a90 <HAL_RCC_ClockConfig+0x1b0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0b0      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d04c      	beq.n	80039ca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d107      	bne.n	8003948 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003938:	4b56      	ldr	r3, [pc, #344]	; (8003a94 <HAL_RCC_ClockConfig+0x1b4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d121      	bne.n	8003988 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e09e      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d107      	bne.n	8003960 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003950:	4b50      	ldr	r3, [pc, #320]	; (8003a94 <HAL_RCC_ClockConfig+0x1b4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d115      	bne.n	8003988 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e092      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d107      	bne.n	8003978 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003968:	4b4a      	ldr	r3, [pc, #296]	; (8003a94 <HAL_RCC_ClockConfig+0x1b4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e086      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003978:	4b46      	ldr	r3, [pc, #280]	; (8003a94 <HAL_RCC_ClockConfig+0x1b4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e07e      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003988:	4b42      	ldr	r3, [pc, #264]	; (8003a94 <HAL_RCC_ClockConfig+0x1b4>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f023 0203 	bic.w	r2, r3, #3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	493f      	ldr	r1, [pc, #252]	; (8003a94 <HAL_RCC_ClockConfig+0x1b4>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399a:	f7fd fbb3 	bl	8001104 <HAL_GetTick>
 800399e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a0:	e00a      	b.n	80039b8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a2:	f7fd fbaf 	bl	8001104 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e066      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b8:	4b36      	ldr	r3, [pc, #216]	; (8003a94 <HAL_RCC_ClockConfig+0x1b4>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 020c 	and.w	r2, r3, #12
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d1eb      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d6:	4b2f      	ldr	r3, [pc, #188]	; (8003a94 <HAL_RCC_ClockConfig+0x1b4>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	492c      	ldr	r1, [pc, #176]	; (8003a94 <HAL_RCC_ClockConfig+0x1b4>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e8:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <HAL_RCC_ClockConfig+0x1b0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d210      	bcs.n	8003a18 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b26      	ldr	r3, [pc, #152]	; (8003a90 <HAL_RCC_ClockConfig+0x1b0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 0207 	bic.w	r2, r3, #7
 80039fe:	4924      	ldr	r1, [pc, #144]	; (8003a90 <HAL_RCC_ClockConfig+0x1b0>)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <HAL_RCC_ClockConfig+0x1b0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e036      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a24:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <HAL_RCC_ClockConfig+0x1b4>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4918      	ldr	r1, [pc, #96]	; (8003a94 <HAL_RCC_ClockConfig+0x1b4>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a42:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <HAL_RCC_ClockConfig+0x1b4>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4910      	ldr	r1, [pc, #64]	; (8003a94 <HAL_RCC_ClockConfig+0x1b4>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a56:	f000 f825 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003a5a:	4601      	mov	r1, r0
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <HAL_RCC_ClockConfig+0x1b4>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	5cd3      	ldrb	r3, [r2, r3]
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a72:	4a0a      	ldr	r2, [pc, #40]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd faf2 	bl	8001064 <HAL_InitTick>
 8003a80:	4603      	mov	r3, r0
 8003a82:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a84:	7afb      	ldrb	r3, [r7, #11]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40022000 	.word	0x40022000
 8003a94:	40021000 	.word	0x40021000
 8003a98:	080064d8 	.word	0x080064d8
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	20000004 	.word	0x20000004

08003aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	; 0x24
 8003aa8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab2:	4b3d      	ldr	r3, [pc, #244]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003abc:	4b3a      	ldr	r3, [pc, #232]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b0c      	cmp	r3, #12
 8003ad0:	d121      	bne.n	8003b16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d11e      	bne.n	8003b16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ad8:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d107      	bne.n	8003af4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ae4:	4b30      	ldr	r3, [pc, #192]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aea:	0a1b      	lsrs	r3, r3, #8
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	e005      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003af4:	4b2c      	ldr	r3, [pc, #176]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b00:	4a2a      	ldr	r2, [pc, #168]	; (8003bac <HAL_RCC_GetSysClockFreq+0x108>)
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10d      	bne.n	8003b2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b14:	e00a      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d102      	bne.n	8003b22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b1c:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	e004      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b28:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d133      	bne.n	8003b9a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b32:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d002      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0xa4>
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d003      	beq.n	8003b4e <HAL_RCC_GetSysClockFreq+0xaa>
 8003b46:	e005      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b48:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b4a:	617b      	str	r3, [r7, #20]
      break;
 8003b4c:	e005      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b4e:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b50:	617b      	str	r3, [r7, #20]
      break;
 8003b52:	e002      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	617b      	str	r3, [r7, #20]
      break;
 8003b58:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b5a:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	3301      	adds	r3, #1
 8003b66:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b68:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	fb02 f203 	mul.w	r2, r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	0e5b      	lsrs	r3, r3, #25
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b9a:	69bb      	ldr	r3, [r7, #24]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3724      	adds	r7, #36	; 0x24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	080064f0 	.word	0x080064f0
 8003bb0:	00f42400 	.word	0x00f42400
 8003bb4:	007a1200 	.word	0x007a1200

08003bb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	20000000 	.word	0x20000000

08003bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bd4:	f7ff fff0 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003bd8:	4601      	mov	r1, r0
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	4a04      	ldr	r2, [pc, #16]	; (8003bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003be6:	5cd3      	ldrb	r3, [r2, r3]
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	080064e8 	.word	0x080064e8

08003bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c00:	f7ff ffda 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003c04:	4601      	mov	r1, r0
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	0adb      	lsrs	r3, r3, #11
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c12:	5cd3      	ldrb	r3, [r2, r3]
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000
 8003c24:	080064e8 	.word	0x080064e8

08003c28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c30:	2300      	movs	r3, #0
 8003c32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c34:	4b2a      	ldr	r3, [pc, #168]	; (8003ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c40:	f7ff fa04 	bl	800304c <HAL_PWREx_GetVoltageRange>
 8003c44:	6178      	str	r0, [r7, #20]
 8003c46:	e014      	b.n	8003c72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c48:	4b25      	ldr	r3, [pc, #148]	; (8003ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	4a24      	ldr	r2, [pc, #144]	; (8003ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c52:	6593      	str	r3, [r2, #88]	; 0x58
 8003c54:	4b22      	ldr	r3, [pc, #136]	; (8003ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c60:	f7ff f9f4 	bl	800304c <HAL_PWREx_GetVoltageRange>
 8003c64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c66:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c78:	d10b      	bne.n	8003c92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b80      	cmp	r3, #128	; 0x80
 8003c7e:	d919      	bls.n	8003cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2ba0      	cmp	r3, #160	; 0xa0
 8003c84:	d902      	bls.n	8003c8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c86:	2302      	movs	r3, #2
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	e013      	b.n	8003cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	e010      	b.n	8003cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b80      	cmp	r3, #128	; 0x80
 8003c96:	d902      	bls.n	8003c9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c98:	2303      	movs	r3, #3
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	e00a      	b.n	8003cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d102      	bne.n	8003caa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	e004      	b.n	8003cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b70      	cmp	r3, #112	; 0x70
 8003cae:	d101      	bne.n	8003cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f023 0207 	bic.w	r2, r3, #7
 8003cbc:	4909      	ldr	r1, [pc, #36]	; (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d001      	beq.n	8003cd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40022000 	.word	0x40022000

08003ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d03f      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d0c:	d01c      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d12:	d802      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00e      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003d18:	e01f      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003d1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d1e:	d003      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003d20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d24:	d01c      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003d26:	e018      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d28:	4b85      	ldr	r3, [pc, #532]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4a84      	ldr	r2, [pc, #528]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d34:	e015      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fab9 	bl	80042b4 <RCCEx_PLLSAI1_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d46:	e00c      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3320      	adds	r3, #32
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fba0 	bl	8004494 <RCCEx_PLLSAI2_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d58:	e003      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d5e:	e000      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d62:	7cfb      	ldrb	r3, [r7, #19]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d68:	4b75      	ldr	r3, [pc, #468]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d76:	4972      	ldr	r1, [pc, #456]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d7e:	e001      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d80:	7cfb      	ldrb	r3, [r7, #19]
 8003d82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d03f      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d98:	d01c      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d9e:	d802      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00e      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003da4:	e01f      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003da6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003daa:	d003      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003dac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003db0:	d01c      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003db2:	e018      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003db4:	4b62      	ldr	r3, [pc, #392]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a61      	ldr	r2, [pc, #388]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dc0:	e015      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fa73 	bl	80042b4 <RCCEx_PLLSAI1_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dd2:	e00c      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3320      	adds	r3, #32
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fb5a 	bl	8004494 <RCCEx_PLLSAI2_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003de4:	e003      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	74fb      	strb	r3, [r7, #19]
      break;
 8003dea:	e000      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dee:	7cfb      	ldrb	r3, [r7, #19]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10b      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003df4:	4b52      	ldr	r3, [pc, #328]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e02:	494f      	ldr	r1, [pc, #316]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e0a:	e001      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80a0 	beq.w	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e22:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003e32:	2300      	movs	r3, #0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00d      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e38:	4b41      	ldr	r3, [pc, #260]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3c:	4a40      	ldr	r2, [pc, #256]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e42:	6593      	str	r3, [r2, #88]	; 0x58
 8003e44:	4b3e      	ldr	r3, [pc, #248]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e50:	2301      	movs	r3, #1
 8003e52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e54:	4b3b      	ldr	r3, [pc, #236]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a3a      	ldr	r2, [pc, #232]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e60:	f7fd f950 	bl	8001104 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e66:	e009      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e68:	f7fd f94c 	bl	8001104 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d902      	bls.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	74fb      	strb	r3, [r7, #19]
        break;
 8003e7a:	e005      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e7c:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ef      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003e88:	7cfb      	ldrb	r3, [r7, #19]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d15c      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e8e:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01f      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d019      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003eac:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eb8:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebe:	4a20      	ldr	r2, [pc, #128]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ed8:	4a19      	ldr	r2, [pc, #100]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d016      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eea:	f7fd f90b 	bl	8001104 <HAL_GetTick>
 8003eee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ef0:	e00b      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fd f907 	bl	8001104 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d902      	bls.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	74fb      	strb	r3, [r7, #19]
            break;
 8003f08:	e006      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0ec      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f1e:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2e:	4904      	ldr	r1, [pc, #16]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f36:	e009      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f38:	7cfb      	ldrb	r3, [r7, #19]
 8003f3a:	74bb      	strb	r3, [r7, #18]
 8003f3c:	e006      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f4c:	7c7b      	ldrb	r3, [r7, #17]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d105      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f52:	4b9e      	ldr	r3, [pc, #632]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	4a9d      	ldr	r2, [pc, #628]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f6a:	4b98      	ldr	r3, [pc, #608]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f023 0203 	bic.w	r2, r3, #3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	4994      	ldr	r1, [pc, #592]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f8c:	4b8f      	ldr	r3, [pc, #572]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f023 020c 	bic.w	r2, r3, #12
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	498c      	ldr	r1, [pc, #560]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fae:	4b87      	ldr	r3, [pc, #540]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	4983      	ldr	r1, [pc, #524]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fd0:	4b7e      	ldr	r3, [pc, #504]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	497b      	ldr	r1, [pc, #492]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ff2:	4b76      	ldr	r3, [pc, #472]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004000:	4972      	ldr	r1, [pc, #456]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004014:	4b6d      	ldr	r3, [pc, #436]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	496a      	ldr	r1, [pc, #424]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004036:	4b65      	ldr	r3, [pc, #404]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004044:	4961      	ldr	r1, [pc, #388]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004058:	4b5c      	ldr	r3, [pc, #368]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004066:	4959      	ldr	r1, [pc, #356]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800407a:	4b54      	ldr	r3, [pc, #336]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004080:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004088:	4950      	ldr	r1, [pc, #320]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800409c:	4b4b      	ldr	r3, [pc, #300]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	4948      	ldr	r1, [pc, #288]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040be:	4b43      	ldr	r3, [pc, #268]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	493f      	ldr	r1, [pc, #252]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d028      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040e0:	4b3a      	ldr	r3, [pc, #232]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ee:	4937      	ldr	r1, [pc, #220]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040fe:	d106      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004100:	4b32      	ldr	r3, [pc, #200]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4a31      	ldr	r2, [pc, #196]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800410a:	60d3      	str	r3, [r2, #12]
 800410c:	e011      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004112:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004116:	d10c      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3304      	adds	r3, #4
 800411c:	2101      	movs	r1, #1
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f8c8 	bl	80042b4 <RCCEx_PLLSAI1_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800412e:	7cfb      	ldrb	r3, [r7, #19]
 8004130:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d028      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004144:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	491f      	ldr	r1, [pc, #124]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415c:	d106      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800415e:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	4a1a      	ldr	r2, [pc, #104]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004164:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004168:	60d3      	str	r3, [r2, #12]
 800416a:	e011      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004174:	d10c      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3304      	adds	r3, #4
 800417a:	2101      	movs	r1, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f000 f899 	bl	80042b4 <RCCEx_PLLSAI1_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004186:	7cfb      	ldrb	r3, [r7, #19]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800418c:	7cfb      	ldrb	r3, [r7, #19]
 800418e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d02b      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041aa:	4908      	ldr	r1, [pc, #32]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ba:	d109      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041bc:	4b03      	ldr	r3, [pc, #12]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	4a02      	ldr	r2, [pc, #8]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041c6:	60d3      	str	r3, [r2, #12]
 80041c8:	e014      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80041ca:	bf00      	nop
 80041cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3304      	adds	r3, #4
 80041de:	2101      	movs	r1, #1
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 f867 	bl	80042b4 <RCCEx_PLLSAI1_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ea:	7cfb      	ldrb	r3, [r7, #19]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80041f0:	7cfb      	ldrb	r3, [r7, #19]
 80041f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d02f      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004200:	4b2b      	ldr	r3, [pc, #172]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800420e:	4928      	ldr	r1, [pc, #160]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800421a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800421e:	d10d      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	2102      	movs	r1, #2
 8004226:	4618      	mov	r0, r3
 8004228:	f000 f844 	bl	80042b4 <RCCEx_PLLSAI1_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d014      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004236:	7cfb      	ldrb	r3, [r7, #19]
 8004238:	74bb      	strb	r3, [r7, #18]
 800423a:	e011      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004244:	d10c      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3320      	adds	r3, #32
 800424a:	2102      	movs	r1, #2
 800424c:	4618      	mov	r0, r3
 800424e:	f000 f921 	bl	8004494 <RCCEx_PLLSAI2_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800426c:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800427a:	490d      	ldr	r1, [pc, #52]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004294:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800429e:	4904      	ldr	r1, [pc, #16]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40021000 	.word	0x40021000

080042b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042c2:	4b73      	ldr	r3, [pc, #460]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d018      	beq.n	8004300 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042ce:	4b70      	ldr	r3, [pc, #448]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f003 0203 	and.w	r2, r3, #3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d10d      	bne.n	80042fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
       ||
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042e6:	4b6a      	ldr	r3, [pc, #424]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
       ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d044      	beq.n	8004384 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
 80042fe:	e041      	b.n	8004384 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d00c      	beq.n	8004322 <RCCEx_PLLSAI1_Config+0x6e>
 8004308:	2b03      	cmp	r3, #3
 800430a:	d013      	beq.n	8004334 <RCCEx_PLLSAI1_Config+0x80>
 800430c:	2b01      	cmp	r3, #1
 800430e:	d120      	bne.n	8004352 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004310:	4b5f      	ldr	r3, [pc, #380]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d11d      	bne.n	8004358 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004320:	e01a      	b.n	8004358 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004322:	4b5b      	ldr	r3, [pc, #364]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432a:	2b00      	cmp	r3, #0
 800432c:	d116      	bne.n	800435c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004332:	e013      	b.n	800435c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004334:	4b56      	ldr	r3, [pc, #344]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10f      	bne.n	8004360 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004340:	4b53      	ldr	r3, [pc, #332]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004350:	e006      	b.n	8004360 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
      break;
 8004356:	e004      	b.n	8004362 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004358:	bf00      	nop
 800435a:	e002      	b.n	8004362 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800435c:	bf00      	nop
 800435e:	e000      	b.n	8004362 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004360:	bf00      	nop
    }

    if(status == HAL_OK)
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10d      	bne.n	8004384 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004368:	4b49      	ldr	r3, [pc, #292]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6819      	ldr	r1, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	3b01      	subs	r3, #1
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	430b      	orrs	r3, r1
 800437e:	4944      	ldr	r1, [pc, #272]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004380:	4313      	orrs	r3, r2
 8004382:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d17d      	bne.n	8004486 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800438a:	4b41      	ldr	r3, [pc, #260]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a40      	ldr	r2, [pc, #256]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004390:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004396:	f7fc feb5 	bl	8001104 <HAL_GetTick>
 800439a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800439c:	e009      	b.n	80043b2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800439e:	f7fc feb1 	bl	8001104 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d902      	bls.n	80043b2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	73fb      	strb	r3, [r7, #15]
        break;
 80043b0:	e005      	b.n	80043be <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043b2:	4b37      	ldr	r3, [pc, #220]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1ef      	bne.n	800439e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d160      	bne.n	8004486 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d111      	bne.n	80043ee <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043ca:	4b31      	ldr	r3, [pc, #196]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80043d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6892      	ldr	r2, [r2, #8]
 80043da:	0211      	lsls	r1, r2, #8
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	68d2      	ldr	r2, [r2, #12]
 80043e0:	0912      	lsrs	r2, r2, #4
 80043e2:	0452      	lsls	r2, r2, #17
 80043e4:	430a      	orrs	r2, r1
 80043e6:	492a      	ldr	r1, [pc, #168]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	610b      	str	r3, [r1, #16]
 80043ec:	e027      	b.n	800443e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d112      	bne.n	800441a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043f4:	4b26      	ldr	r3, [pc, #152]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80043fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6892      	ldr	r2, [r2, #8]
 8004404:	0211      	lsls	r1, r2, #8
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6912      	ldr	r2, [r2, #16]
 800440a:	0852      	lsrs	r2, r2, #1
 800440c:	3a01      	subs	r2, #1
 800440e:	0552      	lsls	r2, r2, #21
 8004410:	430a      	orrs	r2, r1
 8004412:	491f      	ldr	r1, [pc, #124]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004414:	4313      	orrs	r3, r2
 8004416:	610b      	str	r3, [r1, #16]
 8004418:	e011      	b.n	800443e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800441a:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004422:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6892      	ldr	r2, [r2, #8]
 800442a:	0211      	lsls	r1, r2, #8
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6952      	ldr	r2, [r2, #20]
 8004430:	0852      	lsrs	r2, r2, #1
 8004432:	3a01      	subs	r2, #1
 8004434:	0652      	lsls	r2, r2, #25
 8004436:	430a      	orrs	r2, r1
 8004438:	4915      	ldr	r1, [pc, #84]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800443e:	4b14      	ldr	r3, [pc, #80]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a13      	ldr	r2, [pc, #76]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004444:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004448:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444a:	f7fc fe5b 	bl	8001104 <HAL_GetTick>
 800444e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004450:	e009      	b.n	8004466 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004452:	f7fc fe57 	bl	8001104 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d902      	bls.n	8004466 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	73fb      	strb	r3, [r7, #15]
          break;
 8004464:	e005      	b.n	8004472 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004466:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0ef      	beq.n	8004452 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	4903      	ldr	r1, [pc, #12]	; (8004490 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004486:	7bfb      	ldrb	r3, [r7, #15]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000

08004494 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044a2:	4b68      	ldr	r3, [pc, #416]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d018      	beq.n	80044e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044ae:	4b65      	ldr	r3, [pc, #404]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0203 	and.w	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d10d      	bne.n	80044da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
       ||
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044c6:	4b5f      	ldr	r3, [pc, #380]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
       ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d044      	beq.n	8004564 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
 80044de:	e041      	b.n	8004564 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d00c      	beq.n	8004502 <RCCEx_PLLSAI2_Config+0x6e>
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d013      	beq.n	8004514 <RCCEx_PLLSAI2_Config+0x80>
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d120      	bne.n	8004532 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044f0:	4b54      	ldr	r3, [pc, #336]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d11d      	bne.n	8004538 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004500:	e01a      	b.n	8004538 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004502:	4b50      	ldr	r3, [pc, #320]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450a:	2b00      	cmp	r3, #0
 800450c:	d116      	bne.n	800453c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004512:	e013      	b.n	800453c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004514:	4b4b      	ldr	r3, [pc, #300]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10f      	bne.n	8004540 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004520:	4b48      	ldr	r3, [pc, #288]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d109      	bne.n	8004540 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004530:	e006      	b.n	8004540 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	73fb      	strb	r3, [r7, #15]
      break;
 8004536:	e004      	b.n	8004542 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004538:	bf00      	nop
 800453a:	e002      	b.n	8004542 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800453c:	bf00      	nop
 800453e:	e000      	b.n	8004542 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004540:	bf00      	nop
    }

    if(status == HAL_OK)
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10d      	bne.n	8004564 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004548:	4b3e      	ldr	r3, [pc, #248]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6819      	ldr	r1, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	3b01      	subs	r3, #1
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	430b      	orrs	r3, r1
 800455e:	4939      	ldr	r1, [pc, #228]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004560:	4313      	orrs	r3, r2
 8004562:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d167      	bne.n	800463a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800456a:	4b36      	ldr	r3, [pc, #216]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a35      	ldr	r2, [pc, #212]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004576:	f7fc fdc5 	bl	8001104 <HAL_GetTick>
 800457a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800457c:	e009      	b.n	8004592 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800457e:	f7fc fdc1 	bl	8001104 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d902      	bls.n	8004592 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	73fb      	strb	r3, [r7, #15]
        break;
 8004590:	e005      	b.n	800459e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004592:	4b2c      	ldr	r3, [pc, #176]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1ef      	bne.n	800457e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d14a      	bne.n	800463a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d111      	bne.n	80045ce <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045aa:	4b26      	ldr	r3, [pc, #152]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6892      	ldr	r2, [r2, #8]
 80045ba:	0211      	lsls	r1, r2, #8
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	68d2      	ldr	r2, [r2, #12]
 80045c0:	0912      	lsrs	r2, r2, #4
 80045c2:	0452      	lsls	r2, r2, #17
 80045c4:	430a      	orrs	r2, r1
 80045c6:	491f      	ldr	r1, [pc, #124]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	614b      	str	r3, [r1, #20]
 80045cc:	e011      	b.n	80045f2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045ce:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6892      	ldr	r2, [r2, #8]
 80045de:	0211      	lsls	r1, r2, #8
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6912      	ldr	r2, [r2, #16]
 80045e4:	0852      	lsrs	r2, r2, #1
 80045e6:	3a01      	subs	r2, #1
 80045e8:	0652      	lsls	r2, r2, #25
 80045ea:	430a      	orrs	r2, r1
 80045ec:	4915      	ldr	r1, [pc, #84]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045f2:	4b14      	ldr	r3, [pc, #80]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a13      	ldr	r2, [pc, #76]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fe:	f7fc fd81 	bl	8001104 <HAL_GetTick>
 8004602:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004604:	e009      	b.n	800461a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004606:	f7fc fd7d 	bl	8001104 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d902      	bls.n	800461a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	73fb      	strb	r3, [r7, #15]
          break;
 8004618:	e005      	b.n	8004626 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800461a:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0ef      	beq.n	8004606 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 800462e:	695a      	ldr	r2, [r3, #20]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	4903      	ldr	r1, [pc, #12]	; (8004644 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004636:	4313      	orrs	r3, r2
 8004638:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800463a:	7bfb      	ldrb	r3, [r7, #15]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40021000 	.word	0x40021000

08004648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e049      	b.n	80046ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fc fb46 	bl	8000d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f000 f9ee 	bl	8004a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	d001      	beq.n	8004710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e04f      	b.n	80047b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a23      	ldr	r2, [pc, #140]	; (80047bc <HAL_TIM_Base_Start_IT+0xc4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d01d      	beq.n	800476e <HAL_TIM_Base_Start_IT+0x76>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473a:	d018      	beq.n	800476e <HAL_TIM_Base_Start_IT+0x76>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <HAL_TIM_Base_Start_IT+0x76>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1e      	ldr	r2, [pc, #120]	; (80047c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00e      	beq.n	800476e <HAL_TIM_Base_Start_IT+0x76>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d009      	beq.n	800476e <HAL_TIM_Base_Start_IT+0x76>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_TIM_Base_Start_IT+0x76>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a19      	ldr	r2, [pc, #100]	; (80047d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d115      	bne.n	800479a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	4b17      	ldr	r3, [pc, #92]	; (80047d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004776:	4013      	ands	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b06      	cmp	r3, #6
 800477e:	d015      	beq.n	80047ac <HAL_TIM_Base_Start_IT+0xb4>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004786:	d011      	beq.n	80047ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004798:	e008      	b.n	80047ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0201 	orr.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	e000      	b.n	80047ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40000800 	.word	0x40000800
 80047c8:	40000c00 	.word	0x40000c00
 80047cc:	40013400 	.word	0x40013400
 80047d0:	40014000 	.word	0x40014000
 80047d4:	00010007 	.word	0x00010007

080047d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d122      	bne.n	8004834 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d11b      	bne.n	8004834 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0202 	mvn.w	r2, #2
 8004804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f905 	bl	8004a2a <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8f7 	bl	8004a16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f908 	bl	8004a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b04      	cmp	r3, #4
 8004840:	d122      	bne.n	8004888 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b04      	cmp	r3, #4
 800484e:	d11b      	bne.n	8004888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0204 	mvn.w	r2, #4
 8004858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f8db 	bl	8004a2a <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f8cd 	bl	8004a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f8de 	bl	8004a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b08      	cmp	r3, #8
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0208 	mvn.w	r2, #8
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2204      	movs	r2, #4
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f8b1 	bl	8004a2a <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f8a3 	bl	8004a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f8b4 	bl	8004a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d122      	bne.n	8004930 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d11b      	bne.n	8004930 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0210 	mvn.w	r2, #16
 8004900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2208      	movs	r2, #8
 8004906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f887 	bl	8004a2a <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f879 	bl	8004a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f88a 	bl	8004a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b01      	cmp	r3, #1
 800493c:	d10e      	bne.n	800495c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b01      	cmp	r3, #1
 800494a:	d107      	bne.n	800495c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0201 	mvn.w	r2, #1
 8004954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fb fea4 	bl	80006a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004966:	2b80      	cmp	r3, #128	; 0x80
 8004968:	d10e      	bne.n	8004988 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004974:	2b80      	cmp	r3, #128	; 0x80
 8004976:	d107      	bne.n	8004988 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f99c 	bl	8004cc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004996:	d10e      	bne.n	80049b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a2:	2b80      	cmp	r3, #128	; 0x80
 80049a4:	d107      	bne.n	80049b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f98f 	bl	8004cd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d10e      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	d107      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f838 	bl	8004a52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d10e      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	d107      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f06f 0220 	mvn.w	r2, #32
 8004a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f94f 	bl	8004cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
	...

08004a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a40      	ldr	r2, [pc, #256]	; (8004b7c <TIM_Base_SetConfig+0x114>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d013      	beq.n	8004aa8 <TIM_Base_SetConfig+0x40>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a86:	d00f      	beq.n	8004aa8 <TIM_Base_SetConfig+0x40>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a3d      	ldr	r2, [pc, #244]	; (8004b80 <TIM_Base_SetConfig+0x118>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00b      	beq.n	8004aa8 <TIM_Base_SetConfig+0x40>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a3c      	ldr	r2, [pc, #240]	; (8004b84 <TIM_Base_SetConfig+0x11c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d007      	beq.n	8004aa8 <TIM_Base_SetConfig+0x40>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a3b      	ldr	r2, [pc, #236]	; (8004b88 <TIM_Base_SetConfig+0x120>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d003      	beq.n	8004aa8 <TIM_Base_SetConfig+0x40>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a3a      	ldr	r2, [pc, #232]	; (8004b8c <TIM_Base_SetConfig+0x124>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d108      	bne.n	8004aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a2f      	ldr	r2, [pc, #188]	; (8004b7c <TIM_Base_SetConfig+0x114>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d01f      	beq.n	8004b02 <TIM_Base_SetConfig+0x9a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac8:	d01b      	beq.n	8004b02 <TIM_Base_SetConfig+0x9a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a2c      	ldr	r2, [pc, #176]	; (8004b80 <TIM_Base_SetConfig+0x118>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d017      	beq.n	8004b02 <TIM_Base_SetConfig+0x9a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a2b      	ldr	r2, [pc, #172]	; (8004b84 <TIM_Base_SetConfig+0x11c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <TIM_Base_SetConfig+0x9a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a2a      	ldr	r2, [pc, #168]	; (8004b88 <TIM_Base_SetConfig+0x120>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00f      	beq.n	8004b02 <TIM_Base_SetConfig+0x9a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a29      	ldr	r2, [pc, #164]	; (8004b8c <TIM_Base_SetConfig+0x124>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00b      	beq.n	8004b02 <TIM_Base_SetConfig+0x9a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a28      	ldr	r2, [pc, #160]	; (8004b90 <TIM_Base_SetConfig+0x128>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d007      	beq.n	8004b02 <TIM_Base_SetConfig+0x9a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a27      	ldr	r2, [pc, #156]	; (8004b94 <TIM_Base_SetConfig+0x12c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_Base_SetConfig+0x9a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a26      	ldr	r2, [pc, #152]	; (8004b98 <TIM_Base_SetConfig+0x130>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d108      	bne.n	8004b14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a10      	ldr	r2, [pc, #64]	; (8004b7c <TIM_Base_SetConfig+0x114>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00f      	beq.n	8004b60 <TIM_Base_SetConfig+0xf8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a12      	ldr	r2, [pc, #72]	; (8004b8c <TIM_Base_SetConfig+0x124>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00b      	beq.n	8004b60 <TIM_Base_SetConfig+0xf8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a11      	ldr	r2, [pc, #68]	; (8004b90 <TIM_Base_SetConfig+0x128>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d007      	beq.n	8004b60 <TIM_Base_SetConfig+0xf8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a10      	ldr	r2, [pc, #64]	; (8004b94 <TIM_Base_SetConfig+0x12c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <TIM_Base_SetConfig+0xf8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a0f      	ldr	r2, [pc, #60]	; (8004b98 <TIM_Base_SetConfig+0x130>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d103      	bne.n	8004b68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	615a      	str	r2, [r3, #20]
}
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40012c00 	.word	0x40012c00
 8004b80:	40000400 	.word	0x40000400
 8004b84:	40000800 	.word	0x40000800
 8004b88:	40000c00 	.word	0x40000c00
 8004b8c:	40013400 	.word	0x40013400
 8004b90:	40014000 	.word	0x40014000
 8004b94:	40014400 	.word	0x40014400
 8004b98:	40014800 	.word	0x40014800

08004b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e068      	b.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a2e      	ldr	r2, [pc, #184]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2d      	ldr	r2, [pc, #180]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d108      	bne.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1e      	ldr	r2, [pc, #120]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d01d      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c26:	d018      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1a      	ldr	r2, [pc, #104]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00e      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d009      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a13      	ldr	r2, [pc, #76]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d004      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d10c      	bne.n	8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	40013400 	.word	0x40013400
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40000800 	.word	0x40000800
 8004ca4:	40000c00 	.word	0x40000c00
 8004ca8:	40014000 	.word	0x40014000

08004cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e040      	b.n	8004d7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fc f81e 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2224      	movs	r2, #36	; 0x24
 8004d14:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8c0 	bl	8004eac <UART_SetConfig>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e022      	b.n	8004d7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fb3e 	bl	80053c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fbc5 	bl	8005504 <UART_CheckIdleState>
 8004d7a:	4603      	mov	r3, r0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08a      	sub	sp, #40	; 0x28
 8004d88:	af02      	add	r7, sp, #8
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	f040 8081 	bne.w	8004ea0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <HAL_UART_Transmit+0x26>
 8004da4:	88fb      	ldrh	r3, [r7, #6]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e079      	b.n	8004ea2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_UART_Transmit+0x38>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e072      	b.n	8004ea2 <HAL_UART_Transmit+0x11e>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2221      	movs	r2, #33	; 0x21
 8004dce:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004dd0:	f7fc f998 	bl	8001104 <HAL_GetTick>
 8004dd4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	88fa      	ldrh	r2, [r7, #6]
 8004dda:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	88fa      	ldrh	r2, [r7, #6]
 8004de2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	d108      	bne.n	8004e02 <HAL_UART_Transmit+0x7e>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d104      	bne.n	8004e02 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	e003      	b.n	8004e0a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004e12:	e02d      	b.n	8004e70 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2180      	movs	r1, #128	; 0x80
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 fbb5 	bl	800558e <UART_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e039      	b.n	8004ea2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10b      	bne.n	8004e4c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	881a      	ldrh	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e40:	b292      	uxth	r2, r2
 8004e42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	3302      	adds	r3, #2
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	e008      	b.n	8004e5e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	781a      	ldrb	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	b292      	uxth	r2, r2
 8004e56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1cb      	bne.n	8004e14 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2200      	movs	r2, #0
 8004e84:	2140      	movs	r1, #64	; 0x40
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 fb81 	bl	800558e <UART_WaitOnFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e005      	b.n	8004ea2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	e000      	b.n	8004ea2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004ea0:	2302      	movs	r3, #2
  }
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3720      	adds	r7, #32
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004eb0:	b088      	sub	sp, #32
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4bac      	ldr	r3, [pc, #688]	; (800518c <UART_SetConfig+0x2e0>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	69f9      	ldr	r1, [r7, #28]
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4aa2      	ldr	r2, [pc, #648]	; (8005190 <UART_SetConfig+0x2e4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d004      	beq.n	8004f16 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a99      	ldr	r2, [pc, #612]	; (8005194 <UART_SetConfig+0x2e8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d121      	bne.n	8004f78 <UART_SetConfig+0xcc>
 8004f34:	4b98      	ldr	r3, [pc, #608]	; (8005198 <UART_SetConfig+0x2ec>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d816      	bhi.n	8004f70 <UART_SetConfig+0xc4>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <UART_SetConfig+0x9c>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004f59 	.word	0x08004f59
 8004f4c:	08004f65 	.word	0x08004f65
 8004f50:	08004f5f 	.word	0x08004f5f
 8004f54:	08004f6b 	.word	0x08004f6b
 8004f58:	2301      	movs	r3, #1
 8004f5a:	76fb      	strb	r3, [r7, #27]
 8004f5c:	e0e8      	b.n	8005130 <UART_SetConfig+0x284>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	76fb      	strb	r3, [r7, #27]
 8004f62:	e0e5      	b.n	8005130 <UART_SetConfig+0x284>
 8004f64:	2304      	movs	r3, #4
 8004f66:	76fb      	strb	r3, [r7, #27]
 8004f68:	e0e2      	b.n	8005130 <UART_SetConfig+0x284>
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	76fb      	strb	r3, [r7, #27]
 8004f6e:	e0df      	b.n	8005130 <UART_SetConfig+0x284>
 8004f70:	2310      	movs	r3, #16
 8004f72:	76fb      	strb	r3, [r7, #27]
 8004f74:	bf00      	nop
 8004f76:	e0db      	b.n	8005130 <UART_SetConfig+0x284>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a87      	ldr	r2, [pc, #540]	; (800519c <UART_SetConfig+0x2f0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d134      	bne.n	8004fec <UART_SetConfig+0x140>
 8004f82:	4b85      	ldr	r3, [pc, #532]	; (8005198 <UART_SetConfig+0x2ec>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	2b0c      	cmp	r3, #12
 8004f8e:	d829      	bhi.n	8004fe4 <UART_SetConfig+0x138>
 8004f90:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <UART_SetConfig+0xec>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fcd 	.word	0x08004fcd
 8004f9c:	08004fe5 	.word	0x08004fe5
 8004fa0:	08004fe5 	.word	0x08004fe5
 8004fa4:	08004fe5 	.word	0x08004fe5
 8004fa8:	08004fd9 	.word	0x08004fd9
 8004fac:	08004fe5 	.word	0x08004fe5
 8004fb0:	08004fe5 	.word	0x08004fe5
 8004fb4:	08004fe5 	.word	0x08004fe5
 8004fb8:	08004fd3 	.word	0x08004fd3
 8004fbc:	08004fe5 	.word	0x08004fe5
 8004fc0:	08004fe5 	.word	0x08004fe5
 8004fc4:	08004fe5 	.word	0x08004fe5
 8004fc8:	08004fdf 	.word	0x08004fdf
 8004fcc:	2300      	movs	r3, #0
 8004fce:	76fb      	strb	r3, [r7, #27]
 8004fd0:	e0ae      	b.n	8005130 <UART_SetConfig+0x284>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	76fb      	strb	r3, [r7, #27]
 8004fd6:	e0ab      	b.n	8005130 <UART_SetConfig+0x284>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	76fb      	strb	r3, [r7, #27]
 8004fdc:	e0a8      	b.n	8005130 <UART_SetConfig+0x284>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	76fb      	strb	r3, [r7, #27]
 8004fe2:	e0a5      	b.n	8005130 <UART_SetConfig+0x284>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	76fb      	strb	r3, [r7, #27]
 8004fe8:	bf00      	nop
 8004fea:	e0a1      	b.n	8005130 <UART_SetConfig+0x284>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a6b      	ldr	r2, [pc, #428]	; (80051a0 <UART_SetConfig+0x2f4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d120      	bne.n	8005038 <UART_SetConfig+0x18c>
 8004ff6:	4b68      	ldr	r3, [pc, #416]	; (8005198 <UART_SetConfig+0x2ec>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005000:	2b10      	cmp	r3, #16
 8005002:	d00f      	beq.n	8005024 <UART_SetConfig+0x178>
 8005004:	2b10      	cmp	r3, #16
 8005006:	d802      	bhi.n	800500e <UART_SetConfig+0x162>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <UART_SetConfig+0x16c>
 800500c:	e010      	b.n	8005030 <UART_SetConfig+0x184>
 800500e:	2b20      	cmp	r3, #32
 8005010:	d005      	beq.n	800501e <UART_SetConfig+0x172>
 8005012:	2b30      	cmp	r3, #48	; 0x30
 8005014:	d009      	beq.n	800502a <UART_SetConfig+0x17e>
 8005016:	e00b      	b.n	8005030 <UART_SetConfig+0x184>
 8005018:	2300      	movs	r3, #0
 800501a:	76fb      	strb	r3, [r7, #27]
 800501c:	e088      	b.n	8005130 <UART_SetConfig+0x284>
 800501e:	2302      	movs	r3, #2
 8005020:	76fb      	strb	r3, [r7, #27]
 8005022:	e085      	b.n	8005130 <UART_SetConfig+0x284>
 8005024:	2304      	movs	r3, #4
 8005026:	76fb      	strb	r3, [r7, #27]
 8005028:	e082      	b.n	8005130 <UART_SetConfig+0x284>
 800502a:	2308      	movs	r3, #8
 800502c:	76fb      	strb	r3, [r7, #27]
 800502e:	e07f      	b.n	8005130 <UART_SetConfig+0x284>
 8005030:	2310      	movs	r3, #16
 8005032:	76fb      	strb	r3, [r7, #27]
 8005034:	bf00      	nop
 8005036:	e07b      	b.n	8005130 <UART_SetConfig+0x284>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a59      	ldr	r2, [pc, #356]	; (80051a4 <UART_SetConfig+0x2f8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d120      	bne.n	8005084 <UART_SetConfig+0x1d8>
 8005042:	4b55      	ldr	r3, [pc, #340]	; (8005198 <UART_SetConfig+0x2ec>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005048:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d00f      	beq.n	8005070 <UART_SetConfig+0x1c4>
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d802      	bhi.n	800505a <UART_SetConfig+0x1ae>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <UART_SetConfig+0x1b8>
 8005058:	e010      	b.n	800507c <UART_SetConfig+0x1d0>
 800505a:	2b80      	cmp	r3, #128	; 0x80
 800505c:	d005      	beq.n	800506a <UART_SetConfig+0x1be>
 800505e:	2bc0      	cmp	r3, #192	; 0xc0
 8005060:	d009      	beq.n	8005076 <UART_SetConfig+0x1ca>
 8005062:	e00b      	b.n	800507c <UART_SetConfig+0x1d0>
 8005064:	2300      	movs	r3, #0
 8005066:	76fb      	strb	r3, [r7, #27]
 8005068:	e062      	b.n	8005130 <UART_SetConfig+0x284>
 800506a:	2302      	movs	r3, #2
 800506c:	76fb      	strb	r3, [r7, #27]
 800506e:	e05f      	b.n	8005130 <UART_SetConfig+0x284>
 8005070:	2304      	movs	r3, #4
 8005072:	76fb      	strb	r3, [r7, #27]
 8005074:	e05c      	b.n	8005130 <UART_SetConfig+0x284>
 8005076:	2308      	movs	r3, #8
 8005078:	76fb      	strb	r3, [r7, #27]
 800507a:	e059      	b.n	8005130 <UART_SetConfig+0x284>
 800507c:	2310      	movs	r3, #16
 800507e:	76fb      	strb	r3, [r7, #27]
 8005080:	bf00      	nop
 8005082:	e055      	b.n	8005130 <UART_SetConfig+0x284>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a47      	ldr	r2, [pc, #284]	; (80051a8 <UART_SetConfig+0x2fc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d124      	bne.n	80050d8 <UART_SetConfig+0x22c>
 800508e:	4b42      	ldr	r3, [pc, #264]	; (8005198 <UART_SetConfig+0x2ec>)
 8005090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509c:	d012      	beq.n	80050c4 <UART_SetConfig+0x218>
 800509e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a2:	d802      	bhi.n	80050aa <UART_SetConfig+0x1fe>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <UART_SetConfig+0x20c>
 80050a8:	e012      	b.n	80050d0 <UART_SetConfig+0x224>
 80050aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ae:	d006      	beq.n	80050be <UART_SetConfig+0x212>
 80050b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b4:	d009      	beq.n	80050ca <UART_SetConfig+0x21e>
 80050b6:	e00b      	b.n	80050d0 <UART_SetConfig+0x224>
 80050b8:	2300      	movs	r3, #0
 80050ba:	76fb      	strb	r3, [r7, #27]
 80050bc:	e038      	b.n	8005130 <UART_SetConfig+0x284>
 80050be:	2302      	movs	r3, #2
 80050c0:	76fb      	strb	r3, [r7, #27]
 80050c2:	e035      	b.n	8005130 <UART_SetConfig+0x284>
 80050c4:	2304      	movs	r3, #4
 80050c6:	76fb      	strb	r3, [r7, #27]
 80050c8:	e032      	b.n	8005130 <UART_SetConfig+0x284>
 80050ca:	2308      	movs	r3, #8
 80050cc:	76fb      	strb	r3, [r7, #27]
 80050ce:	e02f      	b.n	8005130 <UART_SetConfig+0x284>
 80050d0:	2310      	movs	r3, #16
 80050d2:	76fb      	strb	r3, [r7, #27]
 80050d4:	bf00      	nop
 80050d6:	e02b      	b.n	8005130 <UART_SetConfig+0x284>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a2c      	ldr	r2, [pc, #176]	; (8005190 <UART_SetConfig+0x2e4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d124      	bne.n	800512c <UART_SetConfig+0x280>
 80050e2:	4b2d      	ldr	r3, [pc, #180]	; (8005198 <UART_SetConfig+0x2ec>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f0:	d012      	beq.n	8005118 <UART_SetConfig+0x26c>
 80050f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f6:	d802      	bhi.n	80050fe <UART_SetConfig+0x252>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <UART_SetConfig+0x260>
 80050fc:	e012      	b.n	8005124 <UART_SetConfig+0x278>
 80050fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005102:	d006      	beq.n	8005112 <UART_SetConfig+0x266>
 8005104:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005108:	d009      	beq.n	800511e <UART_SetConfig+0x272>
 800510a:	e00b      	b.n	8005124 <UART_SetConfig+0x278>
 800510c:	2300      	movs	r3, #0
 800510e:	76fb      	strb	r3, [r7, #27]
 8005110:	e00e      	b.n	8005130 <UART_SetConfig+0x284>
 8005112:	2302      	movs	r3, #2
 8005114:	76fb      	strb	r3, [r7, #27]
 8005116:	e00b      	b.n	8005130 <UART_SetConfig+0x284>
 8005118:	2304      	movs	r3, #4
 800511a:	76fb      	strb	r3, [r7, #27]
 800511c:	e008      	b.n	8005130 <UART_SetConfig+0x284>
 800511e:	2308      	movs	r3, #8
 8005120:	76fb      	strb	r3, [r7, #27]
 8005122:	e005      	b.n	8005130 <UART_SetConfig+0x284>
 8005124:	2310      	movs	r3, #16
 8005126:	76fb      	strb	r3, [r7, #27]
 8005128:	bf00      	nop
 800512a:	e001      	b.n	8005130 <UART_SetConfig+0x284>
 800512c:	2310      	movs	r3, #16
 800512e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a16      	ldr	r2, [pc, #88]	; (8005190 <UART_SetConfig+0x2e4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	f040 8087 	bne.w	800524a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800513c:	7efb      	ldrb	r3, [r7, #27]
 800513e:	2b08      	cmp	r3, #8
 8005140:	d836      	bhi.n	80051b0 <UART_SetConfig+0x304>
 8005142:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <UART_SetConfig+0x29c>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	0800516d 	.word	0x0800516d
 800514c:	080051b1 	.word	0x080051b1
 8005150:	08005175 	.word	0x08005175
 8005154:	080051b1 	.word	0x080051b1
 8005158:	0800517b 	.word	0x0800517b
 800515c:	080051b1 	.word	0x080051b1
 8005160:	080051b1 	.word	0x080051b1
 8005164:	080051b1 	.word	0x080051b1
 8005168:	08005183 	.word	0x08005183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800516c:	f7fe fd30 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8005170:	6178      	str	r0, [r7, #20]
        break;
 8005172:	e022      	b.n	80051ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005174:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <UART_SetConfig+0x300>)
 8005176:	617b      	str	r3, [r7, #20]
        break;
 8005178:	e01f      	b.n	80051ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800517a:	f7fe fc93 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 800517e:	6178      	str	r0, [r7, #20]
        break;
 8005180:	e01b      	b.n	80051ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005186:	617b      	str	r3, [r7, #20]
        break;
 8005188:	e017      	b.n	80051ba <UART_SetConfig+0x30e>
 800518a:	bf00      	nop
 800518c:	efff69f3 	.word	0xefff69f3
 8005190:	40008000 	.word	0x40008000
 8005194:	40013800 	.word	0x40013800
 8005198:	40021000 	.word	0x40021000
 800519c:	40004400 	.word	0x40004400
 80051a0:	40004800 	.word	0x40004800
 80051a4:	40004c00 	.word	0x40004c00
 80051a8:	40005000 	.word	0x40005000
 80051ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	76bb      	strb	r3, [r7, #26]
        break;
 80051b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80f1 	beq.w	80053a4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	4413      	add	r3, r2
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d305      	bcc.n	80051de <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d902      	bls.n	80051e4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	76bb      	strb	r3, [r7, #26]
 80051e2:	e0df      	b.n	80053a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4619      	mov	r1, r3
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	f04f 0400 	mov.w	r4, #0
 80051f4:	0214      	lsls	r4, r2, #8
 80051f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80051fa:	020b      	lsls	r3, r1, #8
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6852      	ldr	r2, [r2, #4]
 8005200:	0852      	lsrs	r2, r2, #1
 8005202:	4611      	mov	r1, r2
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	eb13 0b01 	adds.w	fp, r3, r1
 800520c:	eb44 0c02 	adc.w	ip, r4, r2
 8005210:	4658      	mov	r0, fp
 8005212:	4661      	mov	r1, ip
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f04f 0400 	mov.w	r4, #0
 800521c:	461a      	mov	r2, r3
 800521e:	4623      	mov	r3, r4
 8005220:	f7fb f826 	bl	8000270 <__aeabi_uldivmod>
 8005224:	4603      	mov	r3, r0
 8005226:	460c      	mov	r4, r1
 8005228:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005230:	d308      	bcc.n	8005244 <UART_SetConfig+0x398>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005238:	d204      	bcs.n	8005244 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	e0af      	b.n	80053a4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	76bb      	strb	r3, [r7, #26]
 8005248:	e0ac      	b.n	80053a4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005252:	d15b      	bne.n	800530c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005254:	7efb      	ldrb	r3, [r7, #27]
 8005256:	2b08      	cmp	r3, #8
 8005258:	d827      	bhi.n	80052aa <UART_SetConfig+0x3fe>
 800525a:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <UART_SetConfig+0x3b4>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	08005285 	.word	0x08005285
 8005264:	0800528d 	.word	0x0800528d
 8005268:	08005295 	.word	0x08005295
 800526c:	080052ab 	.word	0x080052ab
 8005270:	0800529b 	.word	0x0800529b
 8005274:	080052ab 	.word	0x080052ab
 8005278:	080052ab 	.word	0x080052ab
 800527c:	080052ab 	.word	0x080052ab
 8005280:	080052a3 	.word	0x080052a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005284:	f7fe fca4 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8005288:	6178      	str	r0, [r7, #20]
        break;
 800528a:	e013      	b.n	80052b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800528c:	f7fe fcb6 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 8005290:	6178      	str	r0, [r7, #20]
        break;
 8005292:	e00f      	b.n	80052b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005294:	4b49      	ldr	r3, [pc, #292]	; (80053bc <UART_SetConfig+0x510>)
 8005296:	617b      	str	r3, [r7, #20]
        break;
 8005298:	e00c      	b.n	80052b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800529a:	f7fe fc03 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 800529e:	6178      	str	r0, [r7, #20]
        break;
 80052a0:	e008      	b.n	80052b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a6:	617b      	str	r3, [r7, #20]
        break;
 80052a8:	e004      	b.n	80052b4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	76bb      	strb	r3, [r7, #26]
        break;
 80052b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d074      	beq.n	80053a4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	005a      	lsls	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	441a      	add	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b0f      	cmp	r3, #15
 80052d6:	d916      	bls.n	8005306 <UART_SetConfig+0x45a>
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052de:	d212      	bcs.n	8005306 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f023 030f 	bic.w	r3, r3, #15
 80052e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	89fb      	ldrh	r3, [r7, #14]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	89fa      	ldrh	r2, [r7, #14]
 8005302:	60da      	str	r2, [r3, #12]
 8005304:	e04e      	b.n	80053a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	76bb      	strb	r3, [r7, #26]
 800530a:	e04b      	b.n	80053a4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800530c:	7efb      	ldrb	r3, [r7, #27]
 800530e:	2b08      	cmp	r3, #8
 8005310:	d827      	bhi.n	8005362 <UART_SetConfig+0x4b6>
 8005312:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <UART_SetConfig+0x46c>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	0800533d 	.word	0x0800533d
 800531c:	08005345 	.word	0x08005345
 8005320:	0800534d 	.word	0x0800534d
 8005324:	08005363 	.word	0x08005363
 8005328:	08005353 	.word	0x08005353
 800532c:	08005363 	.word	0x08005363
 8005330:	08005363 	.word	0x08005363
 8005334:	08005363 	.word	0x08005363
 8005338:	0800535b 	.word	0x0800535b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800533c:	f7fe fc48 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8005340:	6178      	str	r0, [r7, #20]
        break;
 8005342:	e013      	b.n	800536c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005344:	f7fe fc5a 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 8005348:	6178      	str	r0, [r7, #20]
        break;
 800534a:	e00f      	b.n	800536c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800534c:	4b1b      	ldr	r3, [pc, #108]	; (80053bc <UART_SetConfig+0x510>)
 800534e:	617b      	str	r3, [r7, #20]
        break;
 8005350:	e00c      	b.n	800536c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005352:	f7fe fba7 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8005356:	6178      	str	r0, [r7, #20]
        break;
 8005358:	e008      	b.n	800536c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800535a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800535e:	617b      	str	r3, [r7, #20]
        break;
 8005360:	e004      	b.n	800536c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	76bb      	strb	r3, [r7, #26]
        break;
 800536a:	bf00      	nop
    }

    if (pclk != 0U)
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d018      	beq.n	80053a4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	085a      	lsrs	r2, r3, #1
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	441a      	add	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	fbb2 f3f3 	udiv	r3, r2, r3
 8005384:	b29b      	uxth	r3, r3
 8005386:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2b0f      	cmp	r3, #15
 800538c:	d908      	bls.n	80053a0 <UART_SetConfig+0x4f4>
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005394:	d204      	bcs.n	80053a0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	60da      	str	r2, [r3, #12]
 800539e:	e001      	b.n	80053a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80053b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3720      	adds	r7, #32
 80053b6:	46bd      	mov	sp, r7
 80053b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80053bc:	00f42400 	.word	0x00f42400

080053c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01a      	beq.n	80054d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054be:	d10a      	bne.n	80054d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	605a      	str	r2, [r3, #4]
  }
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af02      	add	r7, sp, #8
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005512:	f7fb fdf7 	bl	8001104 <HAL_GetTick>
 8005516:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b08      	cmp	r3, #8
 8005524:	d10e      	bne.n	8005544 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005526:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f82a 	bl	800558e <UART_WaitOnFlagUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e020      	b.n	8005586 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b04      	cmp	r3, #4
 8005550:	d10e      	bne.n	8005570 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005552:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f814 	bl	800558e <UART_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e00a      	b.n	8005586 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	603b      	str	r3, [r7, #0]
 800559a:	4613      	mov	r3, r2
 800559c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800559e:	e05d      	b.n	800565c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	d059      	beq.n	800565c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a8:	f7fb fdac 	bl	8001104 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d302      	bcc.n	80055be <UART_WaitOnFlagUntilTimeout+0x30>
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d11b      	bne.n	80055f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0201 	bic.w	r2, r2, #1
 80055dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e042      	b.n	800567c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d02b      	beq.n	800565c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800560e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005612:	d123      	bne.n	800565c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800561c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800562c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e00f      	b.n	800567c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69da      	ldr	r2, [r3, #28]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4013      	ands	r3, r2
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	429a      	cmp	r2, r3
 800566a:	bf0c      	ite	eq
 800566c:	2301      	moveq	r3, #1
 800566e:	2300      	movne	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	429a      	cmp	r2, r3
 8005678:	d092      	beq.n	80055a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <__errno>:
 8005684:	4b01      	ldr	r3, [pc, #4]	; (800568c <__errno+0x8>)
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	2000000c 	.word	0x2000000c

08005690 <__libc_init_array>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	4e0d      	ldr	r6, [pc, #52]	; (80056c8 <__libc_init_array+0x38>)
 8005694:	4c0d      	ldr	r4, [pc, #52]	; (80056cc <__libc_init_array+0x3c>)
 8005696:	1ba4      	subs	r4, r4, r6
 8005698:	10a4      	asrs	r4, r4, #2
 800569a:	2500      	movs	r5, #0
 800569c:	42a5      	cmp	r5, r4
 800569e:	d109      	bne.n	80056b4 <__libc_init_array+0x24>
 80056a0:	4e0b      	ldr	r6, [pc, #44]	; (80056d0 <__libc_init_array+0x40>)
 80056a2:	4c0c      	ldr	r4, [pc, #48]	; (80056d4 <__libc_init_array+0x44>)
 80056a4:	f000 ff04 	bl	80064b0 <_init>
 80056a8:	1ba4      	subs	r4, r4, r6
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	2500      	movs	r5, #0
 80056ae:	42a5      	cmp	r5, r4
 80056b0:	d105      	bne.n	80056be <__libc_init_array+0x2e>
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056b8:	4798      	blx	r3
 80056ba:	3501      	adds	r5, #1
 80056bc:	e7ee      	b.n	800569c <__libc_init_array+0xc>
 80056be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056c2:	4798      	blx	r3
 80056c4:	3501      	adds	r5, #1
 80056c6:	e7f2      	b.n	80056ae <__libc_init_array+0x1e>
 80056c8:	080065c0 	.word	0x080065c0
 80056cc:	080065c0 	.word	0x080065c0
 80056d0:	080065c0 	.word	0x080065c0
 80056d4:	080065c4 	.word	0x080065c4

080056d8 <memset>:
 80056d8:	4402      	add	r2, r0
 80056da:	4603      	mov	r3, r0
 80056dc:	4293      	cmp	r3, r2
 80056de:	d100      	bne.n	80056e2 <memset+0xa>
 80056e0:	4770      	bx	lr
 80056e2:	f803 1b01 	strb.w	r1, [r3], #1
 80056e6:	e7f9      	b.n	80056dc <memset+0x4>

080056e8 <iprintf>:
 80056e8:	b40f      	push	{r0, r1, r2, r3}
 80056ea:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <iprintf+0x2c>)
 80056ec:	b513      	push	{r0, r1, r4, lr}
 80056ee:	681c      	ldr	r4, [r3, #0]
 80056f0:	b124      	cbz	r4, 80056fc <iprintf+0x14>
 80056f2:	69a3      	ldr	r3, [r4, #24]
 80056f4:	b913      	cbnz	r3, 80056fc <iprintf+0x14>
 80056f6:	4620      	mov	r0, r4
 80056f8:	f000 f84e 	bl	8005798 <__sinit>
 80056fc:	ab05      	add	r3, sp, #20
 80056fe:	9a04      	ldr	r2, [sp, #16]
 8005700:	68a1      	ldr	r1, [r4, #8]
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	4620      	mov	r0, r4
 8005706:	f000 f955 	bl	80059b4 <_vfiprintf_r>
 800570a:	b002      	add	sp, #8
 800570c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005710:	b004      	add	sp, #16
 8005712:	4770      	bx	lr
 8005714:	2000000c 	.word	0x2000000c

08005718 <std>:
 8005718:	2300      	movs	r3, #0
 800571a:	b510      	push	{r4, lr}
 800571c:	4604      	mov	r4, r0
 800571e:	e9c0 3300 	strd	r3, r3, [r0]
 8005722:	6083      	str	r3, [r0, #8]
 8005724:	8181      	strh	r1, [r0, #12]
 8005726:	6643      	str	r3, [r0, #100]	; 0x64
 8005728:	81c2      	strh	r2, [r0, #14]
 800572a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800572e:	6183      	str	r3, [r0, #24]
 8005730:	4619      	mov	r1, r3
 8005732:	2208      	movs	r2, #8
 8005734:	305c      	adds	r0, #92	; 0x5c
 8005736:	f7ff ffcf 	bl	80056d8 <memset>
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <std+0x38>)
 800573c:	6263      	str	r3, [r4, #36]	; 0x24
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <std+0x3c>)
 8005740:	62a3      	str	r3, [r4, #40]	; 0x28
 8005742:	4b05      	ldr	r3, [pc, #20]	; (8005758 <std+0x40>)
 8005744:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005746:	4b05      	ldr	r3, [pc, #20]	; (800575c <std+0x44>)
 8005748:	6224      	str	r4, [r4, #32]
 800574a:	6323      	str	r3, [r4, #48]	; 0x30
 800574c:	bd10      	pop	{r4, pc}
 800574e:	bf00      	nop
 8005750:	08005f11 	.word	0x08005f11
 8005754:	08005f33 	.word	0x08005f33
 8005758:	08005f6b 	.word	0x08005f6b
 800575c:	08005f8f 	.word	0x08005f8f

08005760 <_cleanup_r>:
 8005760:	4901      	ldr	r1, [pc, #4]	; (8005768 <_cleanup_r+0x8>)
 8005762:	f000 b885 	b.w	8005870 <_fwalk_reent>
 8005766:	bf00      	nop
 8005768:	08006269 	.word	0x08006269

0800576c <__sfmoreglue>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	1e4a      	subs	r2, r1, #1
 8005770:	2568      	movs	r5, #104	; 0x68
 8005772:	4355      	muls	r5, r2
 8005774:	460e      	mov	r6, r1
 8005776:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800577a:	f000 f897 	bl	80058ac <_malloc_r>
 800577e:	4604      	mov	r4, r0
 8005780:	b140      	cbz	r0, 8005794 <__sfmoreglue+0x28>
 8005782:	2100      	movs	r1, #0
 8005784:	e9c0 1600 	strd	r1, r6, [r0]
 8005788:	300c      	adds	r0, #12
 800578a:	60a0      	str	r0, [r4, #8]
 800578c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005790:	f7ff ffa2 	bl	80056d8 <memset>
 8005794:	4620      	mov	r0, r4
 8005796:	bd70      	pop	{r4, r5, r6, pc}

08005798 <__sinit>:
 8005798:	6983      	ldr	r3, [r0, #24]
 800579a:	b510      	push	{r4, lr}
 800579c:	4604      	mov	r4, r0
 800579e:	bb33      	cbnz	r3, 80057ee <__sinit+0x56>
 80057a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80057a4:	6503      	str	r3, [r0, #80]	; 0x50
 80057a6:	4b12      	ldr	r3, [pc, #72]	; (80057f0 <__sinit+0x58>)
 80057a8:	4a12      	ldr	r2, [pc, #72]	; (80057f4 <__sinit+0x5c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6282      	str	r2, [r0, #40]	; 0x28
 80057ae:	4298      	cmp	r0, r3
 80057b0:	bf04      	itt	eq
 80057b2:	2301      	moveq	r3, #1
 80057b4:	6183      	streq	r3, [r0, #24]
 80057b6:	f000 f81f 	bl	80057f8 <__sfp>
 80057ba:	6060      	str	r0, [r4, #4]
 80057bc:	4620      	mov	r0, r4
 80057be:	f000 f81b 	bl	80057f8 <__sfp>
 80057c2:	60a0      	str	r0, [r4, #8]
 80057c4:	4620      	mov	r0, r4
 80057c6:	f000 f817 	bl	80057f8 <__sfp>
 80057ca:	2200      	movs	r2, #0
 80057cc:	60e0      	str	r0, [r4, #12]
 80057ce:	2104      	movs	r1, #4
 80057d0:	6860      	ldr	r0, [r4, #4]
 80057d2:	f7ff ffa1 	bl	8005718 <std>
 80057d6:	2201      	movs	r2, #1
 80057d8:	2109      	movs	r1, #9
 80057da:	68a0      	ldr	r0, [r4, #8]
 80057dc:	f7ff ff9c 	bl	8005718 <std>
 80057e0:	2202      	movs	r2, #2
 80057e2:	2112      	movs	r1, #18
 80057e4:	68e0      	ldr	r0, [r4, #12]
 80057e6:	f7ff ff97 	bl	8005718 <std>
 80057ea:	2301      	movs	r3, #1
 80057ec:	61a3      	str	r3, [r4, #24]
 80057ee:	bd10      	pop	{r4, pc}
 80057f0:	08006520 	.word	0x08006520
 80057f4:	08005761 	.word	0x08005761

080057f8 <__sfp>:
 80057f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fa:	4b1b      	ldr	r3, [pc, #108]	; (8005868 <__sfp+0x70>)
 80057fc:	681e      	ldr	r6, [r3, #0]
 80057fe:	69b3      	ldr	r3, [r6, #24]
 8005800:	4607      	mov	r7, r0
 8005802:	b913      	cbnz	r3, 800580a <__sfp+0x12>
 8005804:	4630      	mov	r0, r6
 8005806:	f7ff ffc7 	bl	8005798 <__sinit>
 800580a:	3648      	adds	r6, #72	; 0x48
 800580c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005810:	3b01      	subs	r3, #1
 8005812:	d503      	bpl.n	800581c <__sfp+0x24>
 8005814:	6833      	ldr	r3, [r6, #0]
 8005816:	b133      	cbz	r3, 8005826 <__sfp+0x2e>
 8005818:	6836      	ldr	r6, [r6, #0]
 800581a:	e7f7      	b.n	800580c <__sfp+0x14>
 800581c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005820:	b16d      	cbz	r5, 800583e <__sfp+0x46>
 8005822:	3468      	adds	r4, #104	; 0x68
 8005824:	e7f4      	b.n	8005810 <__sfp+0x18>
 8005826:	2104      	movs	r1, #4
 8005828:	4638      	mov	r0, r7
 800582a:	f7ff ff9f 	bl	800576c <__sfmoreglue>
 800582e:	6030      	str	r0, [r6, #0]
 8005830:	2800      	cmp	r0, #0
 8005832:	d1f1      	bne.n	8005818 <__sfp+0x20>
 8005834:	230c      	movs	r3, #12
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	4604      	mov	r4, r0
 800583a:	4620      	mov	r0, r4
 800583c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800583e:	4b0b      	ldr	r3, [pc, #44]	; (800586c <__sfp+0x74>)
 8005840:	6665      	str	r5, [r4, #100]	; 0x64
 8005842:	e9c4 5500 	strd	r5, r5, [r4]
 8005846:	60a5      	str	r5, [r4, #8]
 8005848:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800584c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005850:	2208      	movs	r2, #8
 8005852:	4629      	mov	r1, r5
 8005854:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005858:	f7ff ff3e 	bl	80056d8 <memset>
 800585c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005860:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005864:	e7e9      	b.n	800583a <__sfp+0x42>
 8005866:	bf00      	nop
 8005868:	08006520 	.word	0x08006520
 800586c:	ffff0001 	.word	0xffff0001

08005870 <_fwalk_reent>:
 8005870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005874:	4680      	mov	r8, r0
 8005876:	4689      	mov	r9, r1
 8005878:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800587c:	2600      	movs	r6, #0
 800587e:	b914      	cbnz	r4, 8005886 <_fwalk_reent+0x16>
 8005880:	4630      	mov	r0, r6
 8005882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005886:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800588a:	3f01      	subs	r7, #1
 800588c:	d501      	bpl.n	8005892 <_fwalk_reent+0x22>
 800588e:	6824      	ldr	r4, [r4, #0]
 8005890:	e7f5      	b.n	800587e <_fwalk_reent+0xe>
 8005892:	89ab      	ldrh	r3, [r5, #12]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d907      	bls.n	80058a8 <_fwalk_reent+0x38>
 8005898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800589c:	3301      	adds	r3, #1
 800589e:	d003      	beq.n	80058a8 <_fwalk_reent+0x38>
 80058a0:	4629      	mov	r1, r5
 80058a2:	4640      	mov	r0, r8
 80058a4:	47c8      	blx	r9
 80058a6:	4306      	orrs	r6, r0
 80058a8:	3568      	adds	r5, #104	; 0x68
 80058aa:	e7ee      	b.n	800588a <_fwalk_reent+0x1a>

080058ac <_malloc_r>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	1ccd      	adds	r5, r1, #3
 80058b0:	f025 0503 	bic.w	r5, r5, #3
 80058b4:	3508      	adds	r5, #8
 80058b6:	2d0c      	cmp	r5, #12
 80058b8:	bf38      	it	cc
 80058ba:	250c      	movcc	r5, #12
 80058bc:	2d00      	cmp	r5, #0
 80058be:	4606      	mov	r6, r0
 80058c0:	db01      	blt.n	80058c6 <_malloc_r+0x1a>
 80058c2:	42a9      	cmp	r1, r5
 80058c4:	d903      	bls.n	80058ce <_malloc_r+0x22>
 80058c6:	230c      	movs	r3, #12
 80058c8:	6033      	str	r3, [r6, #0]
 80058ca:	2000      	movs	r0, #0
 80058cc:	bd70      	pop	{r4, r5, r6, pc}
 80058ce:	f000 fd6b 	bl	80063a8 <__malloc_lock>
 80058d2:	4a21      	ldr	r2, [pc, #132]	; (8005958 <_malloc_r+0xac>)
 80058d4:	6814      	ldr	r4, [r2, #0]
 80058d6:	4621      	mov	r1, r4
 80058d8:	b991      	cbnz	r1, 8005900 <_malloc_r+0x54>
 80058da:	4c20      	ldr	r4, [pc, #128]	; (800595c <_malloc_r+0xb0>)
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	b91b      	cbnz	r3, 80058e8 <_malloc_r+0x3c>
 80058e0:	4630      	mov	r0, r6
 80058e2:	f000 fb05 	bl	8005ef0 <_sbrk_r>
 80058e6:	6020      	str	r0, [r4, #0]
 80058e8:	4629      	mov	r1, r5
 80058ea:	4630      	mov	r0, r6
 80058ec:	f000 fb00 	bl	8005ef0 <_sbrk_r>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d124      	bne.n	800593e <_malloc_r+0x92>
 80058f4:	230c      	movs	r3, #12
 80058f6:	6033      	str	r3, [r6, #0]
 80058f8:	4630      	mov	r0, r6
 80058fa:	f000 fd56 	bl	80063aa <__malloc_unlock>
 80058fe:	e7e4      	b.n	80058ca <_malloc_r+0x1e>
 8005900:	680b      	ldr	r3, [r1, #0]
 8005902:	1b5b      	subs	r3, r3, r5
 8005904:	d418      	bmi.n	8005938 <_malloc_r+0x8c>
 8005906:	2b0b      	cmp	r3, #11
 8005908:	d90f      	bls.n	800592a <_malloc_r+0x7e>
 800590a:	600b      	str	r3, [r1, #0]
 800590c:	50cd      	str	r5, [r1, r3]
 800590e:	18cc      	adds	r4, r1, r3
 8005910:	4630      	mov	r0, r6
 8005912:	f000 fd4a 	bl	80063aa <__malloc_unlock>
 8005916:	f104 000b 	add.w	r0, r4, #11
 800591a:	1d23      	adds	r3, r4, #4
 800591c:	f020 0007 	bic.w	r0, r0, #7
 8005920:	1ac3      	subs	r3, r0, r3
 8005922:	d0d3      	beq.n	80058cc <_malloc_r+0x20>
 8005924:	425a      	negs	r2, r3
 8005926:	50e2      	str	r2, [r4, r3]
 8005928:	e7d0      	b.n	80058cc <_malloc_r+0x20>
 800592a:	428c      	cmp	r4, r1
 800592c:	684b      	ldr	r3, [r1, #4]
 800592e:	bf16      	itet	ne
 8005930:	6063      	strne	r3, [r4, #4]
 8005932:	6013      	streq	r3, [r2, #0]
 8005934:	460c      	movne	r4, r1
 8005936:	e7eb      	b.n	8005910 <_malloc_r+0x64>
 8005938:	460c      	mov	r4, r1
 800593a:	6849      	ldr	r1, [r1, #4]
 800593c:	e7cc      	b.n	80058d8 <_malloc_r+0x2c>
 800593e:	1cc4      	adds	r4, r0, #3
 8005940:	f024 0403 	bic.w	r4, r4, #3
 8005944:	42a0      	cmp	r0, r4
 8005946:	d005      	beq.n	8005954 <_malloc_r+0xa8>
 8005948:	1a21      	subs	r1, r4, r0
 800594a:	4630      	mov	r0, r6
 800594c:	f000 fad0 	bl	8005ef0 <_sbrk_r>
 8005950:	3001      	adds	r0, #1
 8005952:	d0cf      	beq.n	80058f4 <_malloc_r+0x48>
 8005954:	6025      	str	r5, [r4, #0]
 8005956:	e7db      	b.n	8005910 <_malloc_r+0x64>
 8005958:	20000090 	.word	0x20000090
 800595c:	20000094 	.word	0x20000094

08005960 <__sfputc_r>:
 8005960:	6893      	ldr	r3, [r2, #8]
 8005962:	3b01      	subs	r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	b410      	push	{r4}
 8005968:	6093      	str	r3, [r2, #8]
 800596a:	da08      	bge.n	800597e <__sfputc_r+0x1e>
 800596c:	6994      	ldr	r4, [r2, #24]
 800596e:	42a3      	cmp	r3, r4
 8005970:	db01      	blt.n	8005976 <__sfputc_r+0x16>
 8005972:	290a      	cmp	r1, #10
 8005974:	d103      	bne.n	800597e <__sfputc_r+0x1e>
 8005976:	f85d 4b04 	ldr.w	r4, [sp], #4
 800597a:	f000 bb0d 	b.w	8005f98 <__swbuf_r>
 800597e:	6813      	ldr	r3, [r2, #0]
 8005980:	1c58      	adds	r0, r3, #1
 8005982:	6010      	str	r0, [r2, #0]
 8005984:	7019      	strb	r1, [r3, #0]
 8005986:	4608      	mov	r0, r1
 8005988:	f85d 4b04 	ldr.w	r4, [sp], #4
 800598c:	4770      	bx	lr

0800598e <__sfputs_r>:
 800598e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005990:	4606      	mov	r6, r0
 8005992:	460f      	mov	r7, r1
 8005994:	4614      	mov	r4, r2
 8005996:	18d5      	adds	r5, r2, r3
 8005998:	42ac      	cmp	r4, r5
 800599a:	d101      	bne.n	80059a0 <__sfputs_r+0x12>
 800599c:	2000      	movs	r0, #0
 800599e:	e007      	b.n	80059b0 <__sfputs_r+0x22>
 80059a0:	463a      	mov	r2, r7
 80059a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a6:	4630      	mov	r0, r6
 80059a8:	f7ff ffda 	bl	8005960 <__sfputc_r>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d1f3      	bne.n	8005998 <__sfputs_r+0xa>
 80059b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059b4 <_vfiprintf_r>:
 80059b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b8:	460c      	mov	r4, r1
 80059ba:	b09d      	sub	sp, #116	; 0x74
 80059bc:	4617      	mov	r7, r2
 80059be:	461d      	mov	r5, r3
 80059c0:	4606      	mov	r6, r0
 80059c2:	b118      	cbz	r0, 80059cc <_vfiprintf_r+0x18>
 80059c4:	6983      	ldr	r3, [r0, #24]
 80059c6:	b90b      	cbnz	r3, 80059cc <_vfiprintf_r+0x18>
 80059c8:	f7ff fee6 	bl	8005798 <__sinit>
 80059cc:	4b7c      	ldr	r3, [pc, #496]	; (8005bc0 <_vfiprintf_r+0x20c>)
 80059ce:	429c      	cmp	r4, r3
 80059d0:	d158      	bne.n	8005a84 <_vfiprintf_r+0xd0>
 80059d2:	6874      	ldr	r4, [r6, #4]
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	0718      	lsls	r0, r3, #28
 80059d8:	d55e      	bpl.n	8005a98 <_vfiprintf_r+0xe4>
 80059da:	6923      	ldr	r3, [r4, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d05b      	beq.n	8005a98 <_vfiprintf_r+0xe4>
 80059e0:	2300      	movs	r3, #0
 80059e2:	9309      	str	r3, [sp, #36]	; 0x24
 80059e4:	2320      	movs	r3, #32
 80059e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ea:	2330      	movs	r3, #48	; 0x30
 80059ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059f0:	9503      	str	r5, [sp, #12]
 80059f2:	f04f 0b01 	mov.w	fp, #1
 80059f6:	46b8      	mov	r8, r7
 80059f8:	4645      	mov	r5, r8
 80059fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059fe:	b10b      	cbz	r3, 8005a04 <_vfiprintf_r+0x50>
 8005a00:	2b25      	cmp	r3, #37	; 0x25
 8005a02:	d154      	bne.n	8005aae <_vfiprintf_r+0xfa>
 8005a04:	ebb8 0a07 	subs.w	sl, r8, r7
 8005a08:	d00b      	beq.n	8005a22 <_vfiprintf_r+0x6e>
 8005a0a:	4653      	mov	r3, sl
 8005a0c:	463a      	mov	r2, r7
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4630      	mov	r0, r6
 8005a12:	f7ff ffbc 	bl	800598e <__sfputs_r>
 8005a16:	3001      	adds	r0, #1
 8005a18:	f000 80c2 	beq.w	8005ba0 <_vfiprintf_r+0x1ec>
 8005a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a1e:	4453      	add	r3, sl
 8005a20:	9309      	str	r3, [sp, #36]	; 0x24
 8005a22:	f898 3000 	ldrb.w	r3, [r8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 80ba 	beq.w	8005ba0 <_vfiprintf_r+0x1ec>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a36:	9304      	str	r3, [sp, #16]
 8005a38:	9307      	str	r3, [sp, #28]
 8005a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8005a40:	46a8      	mov	r8, r5
 8005a42:	2205      	movs	r2, #5
 8005a44:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005a48:	485e      	ldr	r0, [pc, #376]	; (8005bc4 <_vfiprintf_r+0x210>)
 8005a4a:	f7fa fbc1 	bl	80001d0 <memchr>
 8005a4e:	9b04      	ldr	r3, [sp, #16]
 8005a50:	bb78      	cbnz	r0, 8005ab2 <_vfiprintf_r+0xfe>
 8005a52:	06d9      	lsls	r1, r3, #27
 8005a54:	bf44      	itt	mi
 8005a56:	2220      	movmi	r2, #32
 8005a58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a5c:	071a      	lsls	r2, r3, #28
 8005a5e:	bf44      	itt	mi
 8005a60:	222b      	movmi	r2, #43	; 0x2b
 8005a62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a66:	782a      	ldrb	r2, [r5, #0]
 8005a68:	2a2a      	cmp	r2, #42	; 0x2a
 8005a6a:	d02a      	beq.n	8005ac2 <_vfiprintf_r+0x10e>
 8005a6c:	9a07      	ldr	r2, [sp, #28]
 8005a6e:	46a8      	mov	r8, r5
 8005a70:	2000      	movs	r0, #0
 8005a72:	250a      	movs	r5, #10
 8005a74:	4641      	mov	r1, r8
 8005a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a7a:	3b30      	subs	r3, #48	; 0x30
 8005a7c:	2b09      	cmp	r3, #9
 8005a7e:	d969      	bls.n	8005b54 <_vfiprintf_r+0x1a0>
 8005a80:	b360      	cbz	r0, 8005adc <_vfiprintf_r+0x128>
 8005a82:	e024      	b.n	8005ace <_vfiprintf_r+0x11a>
 8005a84:	4b50      	ldr	r3, [pc, #320]	; (8005bc8 <_vfiprintf_r+0x214>)
 8005a86:	429c      	cmp	r4, r3
 8005a88:	d101      	bne.n	8005a8e <_vfiprintf_r+0xda>
 8005a8a:	68b4      	ldr	r4, [r6, #8]
 8005a8c:	e7a2      	b.n	80059d4 <_vfiprintf_r+0x20>
 8005a8e:	4b4f      	ldr	r3, [pc, #316]	; (8005bcc <_vfiprintf_r+0x218>)
 8005a90:	429c      	cmp	r4, r3
 8005a92:	bf08      	it	eq
 8005a94:	68f4      	ldreq	r4, [r6, #12]
 8005a96:	e79d      	b.n	80059d4 <_vfiprintf_r+0x20>
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	f000 fae0 	bl	8006060 <__swsetup_r>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d09d      	beq.n	80059e0 <_vfiprintf_r+0x2c>
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	b01d      	add	sp, #116	; 0x74
 8005aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aae:	46a8      	mov	r8, r5
 8005ab0:	e7a2      	b.n	80059f8 <_vfiprintf_r+0x44>
 8005ab2:	4a44      	ldr	r2, [pc, #272]	; (8005bc4 <_vfiprintf_r+0x210>)
 8005ab4:	1a80      	subs	r0, r0, r2
 8005ab6:	fa0b f000 	lsl.w	r0, fp, r0
 8005aba:	4318      	orrs	r0, r3
 8005abc:	9004      	str	r0, [sp, #16]
 8005abe:	4645      	mov	r5, r8
 8005ac0:	e7be      	b.n	8005a40 <_vfiprintf_r+0x8c>
 8005ac2:	9a03      	ldr	r2, [sp, #12]
 8005ac4:	1d11      	adds	r1, r2, #4
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	9103      	str	r1, [sp, #12]
 8005aca:	2a00      	cmp	r2, #0
 8005acc:	db01      	blt.n	8005ad2 <_vfiprintf_r+0x11e>
 8005ace:	9207      	str	r2, [sp, #28]
 8005ad0:	e004      	b.n	8005adc <_vfiprintf_r+0x128>
 8005ad2:	4252      	negs	r2, r2
 8005ad4:	f043 0302 	orr.w	r3, r3, #2
 8005ad8:	9207      	str	r2, [sp, #28]
 8005ada:	9304      	str	r3, [sp, #16]
 8005adc:	f898 3000 	ldrb.w	r3, [r8]
 8005ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ae2:	d10e      	bne.n	8005b02 <_vfiprintf_r+0x14e>
 8005ae4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aea:	d138      	bne.n	8005b5e <_vfiprintf_r+0x1aa>
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	1d1a      	adds	r2, r3, #4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	9203      	str	r2, [sp, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bfb8      	it	lt
 8005af8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005afc:	f108 0802 	add.w	r8, r8, #2
 8005b00:	9305      	str	r3, [sp, #20]
 8005b02:	4d33      	ldr	r5, [pc, #204]	; (8005bd0 <_vfiprintf_r+0x21c>)
 8005b04:	f898 1000 	ldrb.w	r1, [r8]
 8005b08:	2203      	movs	r2, #3
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f7fa fb60 	bl	80001d0 <memchr>
 8005b10:	b140      	cbz	r0, 8005b24 <_vfiprintf_r+0x170>
 8005b12:	2340      	movs	r3, #64	; 0x40
 8005b14:	1b40      	subs	r0, r0, r5
 8005b16:	fa03 f000 	lsl.w	r0, r3, r0
 8005b1a:	9b04      	ldr	r3, [sp, #16]
 8005b1c:	4303      	orrs	r3, r0
 8005b1e:	f108 0801 	add.w	r8, r8, #1
 8005b22:	9304      	str	r3, [sp, #16]
 8005b24:	f898 1000 	ldrb.w	r1, [r8]
 8005b28:	482a      	ldr	r0, [pc, #168]	; (8005bd4 <_vfiprintf_r+0x220>)
 8005b2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b2e:	2206      	movs	r2, #6
 8005b30:	f108 0701 	add.w	r7, r8, #1
 8005b34:	f7fa fb4c 	bl	80001d0 <memchr>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	d037      	beq.n	8005bac <_vfiprintf_r+0x1f8>
 8005b3c:	4b26      	ldr	r3, [pc, #152]	; (8005bd8 <_vfiprintf_r+0x224>)
 8005b3e:	bb1b      	cbnz	r3, 8005b88 <_vfiprintf_r+0x1d4>
 8005b40:	9b03      	ldr	r3, [sp, #12]
 8005b42:	3307      	adds	r3, #7
 8005b44:	f023 0307 	bic.w	r3, r3, #7
 8005b48:	3308      	adds	r3, #8
 8005b4a:	9303      	str	r3, [sp, #12]
 8005b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b4e:	444b      	add	r3, r9
 8005b50:	9309      	str	r3, [sp, #36]	; 0x24
 8005b52:	e750      	b.n	80059f6 <_vfiprintf_r+0x42>
 8005b54:	fb05 3202 	mla	r2, r5, r2, r3
 8005b58:	2001      	movs	r0, #1
 8005b5a:	4688      	mov	r8, r1
 8005b5c:	e78a      	b.n	8005a74 <_vfiprintf_r+0xc0>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f108 0801 	add.w	r8, r8, #1
 8005b64:	9305      	str	r3, [sp, #20]
 8005b66:	4619      	mov	r1, r3
 8005b68:	250a      	movs	r5, #10
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b70:	3a30      	subs	r2, #48	; 0x30
 8005b72:	2a09      	cmp	r2, #9
 8005b74:	d903      	bls.n	8005b7e <_vfiprintf_r+0x1ca>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0c3      	beq.n	8005b02 <_vfiprintf_r+0x14e>
 8005b7a:	9105      	str	r1, [sp, #20]
 8005b7c:	e7c1      	b.n	8005b02 <_vfiprintf_r+0x14e>
 8005b7e:	fb05 2101 	mla	r1, r5, r1, r2
 8005b82:	2301      	movs	r3, #1
 8005b84:	4680      	mov	r8, r0
 8005b86:	e7f0      	b.n	8005b6a <_vfiprintf_r+0x1b6>
 8005b88:	ab03      	add	r3, sp, #12
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	4622      	mov	r2, r4
 8005b8e:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <_vfiprintf_r+0x228>)
 8005b90:	a904      	add	r1, sp, #16
 8005b92:	4630      	mov	r0, r6
 8005b94:	f3af 8000 	nop.w
 8005b98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005b9c:	4681      	mov	r9, r0
 8005b9e:	d1d5      	bne.n	8005b4c <_vfiprintf_r+0x198>
 8005ba0:	89a3      	ldrh	r3, [r4, #12]
 8005ba2:	065b      	lsls	r3, r3, #25
 8005ba4:	f53f af7e 	bmi.w	8005aa4 <_vfiprintf_r+0xf0>
 8005ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005baa:	e77d      	b.n	8005aa8 <_vfiprintf_r+0xf4>
 8005bac:	ab03      	add	r3, sp, #12
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	4622      	mov	r2, r4
 8005bb2:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <_vfiprintf_r+0x228>)
 8005bb4:	a904      	add	r1, sp, #16
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f000 f888 	bl	8005ccc <_printf_i>
 8005bbc:	e7ec      	b.n	8005b98 <_vfiprintf_r+0x1e4>
 8005bbe:	bf00      	nop
 8005bc0:	08006544 	.word	0x08006544
 8005bc4:	08006584 	.word	0x08006584
 8005bc8:	08006564 	.word	0x08006564
 8005bcc:	08006524 	.word	0x08006524
 8005bd0:	0800658a 	.word	0x0800658a
 8005bd4:	0800658e 	.word	0x0800658e
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	0800598f 	.word	0x0800598f

08005be0 <_printf_common>:
 8005be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be4:	4691      	mov	r9, r2
 8005be6:	461f      	mov	r7, r3
 8005be8:	688a      	ldr	r2, [r1, #8]
 8005bea:	690b      	ldr	r3, [r1, #16]
 8005bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	bfb8      	it	lt
 8005bf4:	4613      	movlt	r3, r2
 8005bf6:	f8c9 3000 	str.w	r3, [r9]
 8005bfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460c      	mov	r4, r1
 8005c02:	b112      	cbz	r2, 8005c0a <_printf_common+0x2a>
 8005c04:	3301      	adds	r3, #1
 8005c06:	f8c9 3000 	str.w	r3, [r9]
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	0699      	lsls	r1, r3, #26
 8005c0e:	bf42      	ittt	mi
 8005c10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c14:	3302      	addmi	r3, #2
 8005c16:	f8c9 3000 	strmi.w	r3, [r9]
 8005c1a:	6825      	ldr	r5, [r4, #0]
 8005c1c:	f015 0506 	ands.w	r5, r5, #6
 8005c20:	d107      	bne.n	8005c32 <_printf_common+0x52>
 8005c22:	f104 0a19 	add.w	sl, r4, #25
 8005c26:	68e3      	ldr	r3, [r4, #12]
 8005c28:	f8d9 2000 	ldr.w	r2, [r9]
 8005c2c:	1a9b      	subs	r3, r3, r2
 8005c2e:	42ab      	cmp	r3, r5
 8005c30:	dc28      	bgt.n	8005c84 <_printf_common+0xa4>
 8005c32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c36:	6822      	ldr	r2, [r4, #0]
 8005c38:	3300      	adds	r3, #0
 8005c3a:	bf18      	it	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	0692      	lsls	r2, r2, #26
 8005c40:	d42d      	bmi.n	8005c9e <_printf_common+0xbe>
 8005c42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c46:	4639      	mov	r1, r7
 8005c48:	4630      	mov	r0, r6
 8005c4a:	47c0      	blx	r8
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d020      	beq.n	8005c92 <_printf_common+0xb2>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	68e5      	ldr	r5, [r4, #12]
 8005c54:	f8d9 2000 	ldr.w	r2, [r9]
 8005c58:	f003 0306 	and.w	r3, r3, #6
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	bf08      	it	eq
 8005c60:	1aad      	subeq	r5, r5, r2
 8005c62:	68a3      	ldr	r3, [r4, #8]
 8005c64:	6922      	ldr	r2, [r4, #16]
 8005c66:	bf0c      	ite	eq
 8005c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c6c:	2500      	movne	r5, #0
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	bfc4      	itt	gt
 8005c72:	1a9b      	subgt	r3, r3, r2
 8005c74:	18ed      	addgt	r5, r5, r3
 8005c76:	f04f 0900 	mov.w	r9, #0
 8005c7a:	341a      	adds	r4, #26
 8005c7c:	454d      	cmp	r5, r9
 8005c7e:	d11a      	bne.n	8005cb6 <_printf_common+0xd6>
 8005c80:	2000      	movs	r0, #0
 8005c82:	e008      	b.n	8005c96 <_printf_common+0xb6>
 8005c84:	2301      	movs	r3, #1
 8005c86:	4652      	mov	r2, sl
 8005c88:	4639      	mov	r1, r7
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	47c0      	blx	r8
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d103      	bne.n	8005c9a <_printf_common+0xba>
 8005c92:	f04f 30ff 	mov.w	r0, #4294967295
 8005c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c9a:	3501      	adds	r5, #1
 8005c9c:	e7c3      	b.n	8005c26 <_printf_common+0x46>
 8005c9e:	18e1      	adds	r1, r4, r3
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	2030      	movs	r0, #48	; 0x30
 8005ca4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ca8:	4422      	add	r2, r4
 8005caa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cb2:	3302      	adds	r3, #2
 8005cb4:	e7c5      	b.n	8005c42 <_printf_common+0x62>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4622      	mov	r2, r4
 8005cba:	4639      	mov	r1, r7
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	47c0      	blx	r8
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d0e6      	beq.n	8005c92 <_printf_common+0xb2>
 8005cc4:	f109 0901 	add.w	r9, r9, #1
 8005cc8:	e7d8      	b.n	8005c7c <_printf_common+0x9c>
	...

08005ccc <_printf_i>:
 8005ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	7e09      	ldrb	r1, [r1, #24]
 8005cd8:	b085      	sub	sp, #20
 8005cda:	296e      	cmp	r1, #110	; 0x6e
 8005cdc:	4617      	mov	r7, r2
 8005cde:	4606      	mov	r6, r0
 8005ce0:	4698      	mov	r8, r3
 8005ce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ce4:	f000 80b3 	beq.w	8005e4e <_printf_i+0x182>
 8005ce8:	d822      	bhi.n	8005d30 <_printf_i+0x64>
 8005cea:	2963      	cmp	r1, #99	; 0x63
 8005cec:	d036      	beq.n	8005d5c <_printf_i+0x90>
 8005cee:	d80a      	bhi.n	8005d06 <_printf_i+0x3a>
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	f000 80b9 	beq.w	8005e68 <_printf_i+0x19c>
 8005cf6:	2958      	cmp	r1, #88	; 0x58
 8005cf8:	f000 8083 	beq.w	8005e02 <_printf_i+0x136>
 8005cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d04:	e032      	b.n	8005d6c <_printf_i+0xa0>
 8005d06:	2964      	cmp	r1, #100	; 0x64
 8005d08:	d001      	beq.n	8005d0e <_printf_i+0x42>
 8005d0a:	2969      	cmp	r1, #105	; 0x69
 8005d0c:	d1f6      	bne.n	8005cfc <_printf_i+0x30>
 8005d0e:	6820      	ldr	r0, [r4, #0]
 8005d10:	6813      	ldr	r3, [r2, #0]
 8005d12:	0605      	lsls	r5, r0, #24
 8005d14:	f103 0104 	add.w	r1, r3, #4
 8005d18:	d52a      	bpl.n	8005d70 <_printf_i+0xa4>
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6011      	str	r1, [r2, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da03      	bge.n	8005d2a <_printf_i+0x5e>
 8005d22:	222d      	movs	r2, #45	; 0x2d
 8005d24:	425b      	negs	r3, r3
 8005d26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d2a:	486f      	ldr	r0, [pc, #444]	; (8005ee8 <_printf_i+0x21c>)
 8005d2c:	220a      	movs	r2, #10
 8005d2e:	e039      	b.n	8005da4 <_printf_i+0xd8>
 8005d30:	2973      	cmp	r1, #115	; 0x73
 8005d32:	f000 809d 	beq.w	8005e70 <_printf_i+0x1a4>
 8005d36:	d808      	bhi.n	8005d4a <_printf_i+0x7e>
 8005d38:	296f      	cmp	r1, #111	; 0x6f
 8005d3a:	d020      	beq.n	8005d7e <_printf_i+0xb2>
 8005d3c:	2970      	cmp	r1, #112	; 0x70
 8005d3e:	d1dd      	bne.n	8005cfc <_printf_i+0x30>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	f043 0320 	orr.w	r3, r3, #32
 8005d46:	6023      	str	r3, [r4, #0]
 8005d48:	e003      	b.n	8005d52 <_printf_i+0x86>
 8005d4a:	2975      	cmp	r1, #117	; 0x75
 8005d4c:	d017      	beq.n	8005d7e <_printf_i+0xb2>
 8005d4e:	2978      	cmp	r1, #120	; 0x78
 8005d50:	d1d4      	bne.n	8005cfc <_printf_i+0x30>
 8005d52:	2378      	movs	r3, #120	; 0x78
 8005d54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d58:	4864      	ldr	r0, [pc, #400]	; (8005eec <_printf_i+0x220>)
 8005d5a:	e055      	b.n	8005e08 <_printf_i+0x13c>
 8005d5c:	6813      	ldr	r3, [r2, #0]
 8005d5e:	1d19      	adds	r1, r3, #4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6011      	str	r1, [r2, #0]
 8005d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e08c      	b.n	8005e8a <_printf_i+0x1be>
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6011      	str	r1, [r2, #0]
 8005d74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d78:	bf18      	it	ne
 8005d7a:	b21b      	sxthne	r3, r3
 8005d7c:	e7cf      	b.n	8005d1e <_printf_i+0x52>
 8005d7e:	6813      	ldr	r3, [r2, #0]
 8005d80:	6825      	ldr	r5, [r4, #0]
 8005d82:	1d18      	adds	r0, r3, #4
 8005d84:	6010      	str	r0, [r2, #0]
 8005d86:	0628      	lsls	r0, r5, #24
 8005d88:	d501      	bpl.n	8005d8e <_printf_i+0xc2>
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	e002      	b.n	8005d94 <_printf_i+0xc8>
 8005d8e:	0668      	lsls	r0, r5, #25
 8005d90:	d5fb      	bpl.n	8005d8a <_printf_i+0xbe>
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	4854      	ldr	r0, [pc, #336]	; (8005ee8 <_printf_i+0x21c>)
 8005d96:	296f      	cmp	r1, #111	; 0x6f
 8005d98:	bf14      	ite	ne
 8005d9a:	220a      	movne	r2, #10
 8005d9c:	2208      	moveq	r2, #8
 8005d9e:	2100      	movs	r1, #0
 8005da0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005da4:	6865      	ldr	r5, [r4, #4]
 8005da6:	60a5      	str	r5, [r4, #8]
 8005da8:	2d00      	cmp	r5, #0
 8005daa:	f2c0 8095 	blt.w	8005ed8 <_printf_i+0x20c>
 8005dae:	6821      	ldr	r1, [r4, #0]
 8005db0:	f021 0104 	bic.w	r1, r1, #4
 8005db4:	6021      	str	r1, [r4, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d13d      	bne.n	8005e36 <_printf_i+0x16a>
 8005dba:	2d00      	cmp	r5, #0
 8005dbc:	f040 808e 	bne.w	8005edc <_printf_i+0x210>
 8005dc0:	4665      	mov	r5, ip
 8005dc2:	2a08      	cmp	r2, #8
 8005dc4:	d10b      	bne.n	8005dde <_printf_i+0x112>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	07db      	lsls	r3, r3, #31
 8005dca:	d508      	bpl.n	8005dde <_printf_i+0x112>
 8005dcc:	6923      	ldr	r3, [r4, #16]
 8005dce:	6862      	ldr	r2, [r4, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	bfde      	ittt	le
 8005dd4:	2330      	movle	r3, #48	; 0x30
 8005dd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dde:	ebac 0305 	sub.w	r3, ip, r5
 8005de2:	6123      	str	r3, [r4, #16]
 8005de4:	f8cd 8000 	str.w	r8, [sp]
 8005de8:	463b      	mov	r3, r7
 8005dea:	aa03      	add	r2, sp, #12
 8005dec:	4621      	mov	r1, r4
 8005dee:	4630      	mov	r0, r6
 8005df0:	f7ff fef6 	bl	8005be0 <_printf_common>
 8005df4:	3001      	adds	r0, #1
 8005df6:	d14d      	bne.n	8005e94 <_printf_i+0x1c8>
 8005df8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfc:	b005      	add	sp, #20
 8005dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e02:	4839      	ldr	r0, [pc, #228]	; (8005ee8 <_printf_i+0x21c>)
 8005e04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005e08:	6813      	ldr	r3, [r2, #0]
 8005e0a:	6821      	ldr	r1, [r4, #0]
 8005e0c:	1d1d      	adds	r5, r3, #4
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6015      	str	r5, [r2, #0]
 8005e12:	060a      	lsls	r2, r1, #24
 8005e14:	d50b      	bpl.n	8005e2e <_printf_i+0x162>
 8005e16:	07ca      	lsls	r2, r1, #31
 8005e18:	bf44      	itt	mi
 8005e1a:	f041 0120 	orrmi.w	r1, r1, #32
 8005e1e:	6021      	strmi	r1, [r4, #0]
 8005e20:	b91b      	cbnz	r3, 8005e2a <_printf_i+0x15e>
 8005e22:	6822      	ldr	r2, [r4, #0]
 8005e24:	f022 0220 	bic.w	r2, r2, #32
 8005e28:	6022      	str	r2, [r4, #0]
 8005e2a:	2210      	movs	r2, #16
 8005e2c:	e7b7      	b.n	8005d9e <_printf_i+0xd2>
 8005e2e:	064d      	lsls	r5, r1, #25
 8005e30:	bf48      	it	mi
 8005e32:	b29b      	uxthmi	r3, r3
 8005e34:	e7ef      	b.n	8005e16 <_printf_i+0x14a>
 8005e36:	4665      	mov	r5, ip
 8005e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e3c:	fb02 3311 	mls	r3, r2, r1, r3
 8005e40:	5cc3      	ldrb	r3, [r0, r3]
 8005e42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e46:	460b      	mov	r3, r1
 8005e48:	2900      	cmp	r1, #0
 8005e4a:	d1f5      	bne.n	8005e38 <_printf_i+0x16c>
 8005e4c:	e7b9      	b.n	8005dc2 <_printf_i+0xf6>
 8005e4e:	6813      	ldr	r3, [r2, #0]
 8005e50:	6825      	ldr	r5, [r4, #0]
 8005e52:	6961      	ldr	r1, [r4, #20]
 8005e54:	1d18      	adds	r0, r3, #4
 8005e56:	6010      	str	r0, [r2, #0]
 8005e58:	0628      	lsls	r0, r5, #24
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	d501      	bpl.n	8005e62 <_printf_i+0x196>
 8005e5e:	6019      	str	r1, [r3, #0]
 8005e60:	e002      	b.n	8005e68 <_printf_i+0x19c>
 8005e62:	066a      	lsls	r2, r5, #25
 8005e64:	d5fb      	bpl.n	8005e5e <_printf_i+0x192>
 8005e66:	8019      	strh	r1, [r3, #0]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	6123      	str	r3, [r4, #16]
 8005e6c:	4665      	mov	r5, ip
 8005e6e:	e7b9      	b.n	8005de4 <_printf_i+0x118>
 8005e70:	6813      	ldr	r3, [r2, #0]
 8005e72:	1d19      	adds	r1, r3, #4
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	681d      	ldr	r5, [r3, #0]
 8005e78:	6862      	ldr	r2, [r4, #4]
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f7fa f9a7 	bl	80001d0 <memchr>
 8005e82:	b108      	cbz	r0, 8005e88 <_printf_i+0x1bc>
 8005e84:	1b40      	subs	r0, r0, r5
 8005e86:	6060      	str	r0, [r4, #4]
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	6123      	str	r3, [r4, #16]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e92:	e7a7      	b.n	8005de4 <_printf_i+0x118>
 8005e94:	6923      	ldr	r3, [r4, #16]
 8005e96:	462a      	mov	r2, r5
 8005e98:	4639      	mov	r1, r7
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	47c0      	blx	r8
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d0aa      	beq.n	8005df8 <_printf_i+0x12c>
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	079b      	lsls	r3, r3, #30
 8005ea6:	d413      	bmi.n	8005ed0 <_printf_i+0x204>
 8005ea8:	68e0      	ldr	r0, [r4, #12]
 8005eaa:	9b03      	ldr	r3, [sp, #12]
 8005eac:	4298      	cmp	r0, r3
 8005eae:	bfb8      	it	lt
 8005eb0:	4618      	movlt	r0, r3
 8005eb2:	e7a3      	b.n	8005dfc <_printf_i+0x130>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	464a      	mov	r2, r9
 8005eb8:	4639      	mov	r1, r7
 8005eba:	4630      	mov	r0, r6
 8005ebc:	47c0      	blx	r8
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d09a      	beq.n	8005df8 <_printf_i+0x12c>
 8005ec2:	3501      	adds	r5, #1
 8005ec4:	68e3      	ldr	r3, [r4, #12]
 8005ec6:	9a03      	ldr	r2, [sp, #12]
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	42ab      	cmp	r3, r5
 8005ecc:	dcf2      	bgt.n	8005eb4 <_printf_i+0x1e8>
 8005ece:	e7eb      	b.n	8005ea8 <_printf_i+0x1dc>
 8005ed0:	2500      	movs	r5, #0
 8005ed2:	f104 0919 	add.w	r9, r4, #25
 8005ed6:	e7f5      	b.n	8005ec4 <_printf_i+0x1f8>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1ac      	bne.n	8005e36 <_printf_i+0x16a>
 8005edc:	7803      	ldrb	r3, [r0, #0]
 8005ede:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ee2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee6:	e76c      	b.n	8005dc2 <_printf_i+0xf6>
 8005ee8:	08006595 	.word	0x08006595
 8005eec:	080065a6 	.word	0x080065a6

08005ef0 <_sbrk_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4c06      	ldr	r4, [pc, #24]	; (8005f0c <_sbrk_r+0x1c>)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	6023      	str	r3, [r4, #0]
 8005efc:	f7fa fffc 	bl	8000ef8 <_sbrk>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_sbrk_r+0x1a>
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_sbrk_r+0x1a>
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	20000228 	.word	0x20000228

08005f10 <__sread>:
 8005f10:	b510      	push	{r4, lr}
 8005f12:	460c      	mov	r4, r1
 8005f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f18:	f000 fa96 	bl	8006448 <_read_r>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	bfab      	itete	ge
 8005f20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f22:	89a3      	ldrhlt	r3, [r4, #12]
 8005f24:	181b      	addge	r3, r3, r0
 8005f26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f2a:	bfac      	ite	ge
 8005f2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f2e:	81a3      	strhlt	r3, [r4, #12]
 8005f30:	bd10      	pop	{r4, pc}

08005f32 <__swrite>:
 8005f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f36:	461f      	mov	r7, r3
 8005f38:	898b      	ldrh	r3, [r1, #12]
 8005f3a:	05db      	lsls	r3, r3, #23
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	460c      	mov	r4, r1
 8005f40:	4616      	mov	r6, r2
 8005f42:	d505      	bpl.n	8005f50 <__swrite+0x1e>
 8005f44:	2302      	movs	r3, #2
 8005f46:	2200      	movs	r2, #0
 8005f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f4c:	f000 f9b6 	bl	80062bc <_lseek_r>
 8005f50:	89a3      	ldrh	r3, [r4, #12]
 8005f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f5a:	81a3      	strh	r3, [r4, #12]
 8005f5c:	4632      	mov	r2, r6
 8005f5e:	463b      	mov	r3, r7
 8005f60:	4628      	mov	r0, r5
 8005f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f66:	f000 b869 	b.w	800603c <_write_r>

08005f6a <__sseek>:
 8005f6a:	b510      	push	{r4, lr}
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f72:	f000 f9a3 	bl	80062bc <_lseek_r>
 8005f76:	1c43      	adds	r3, r0, #1
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	bf15      	itete	ne
 8005f7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f86:	81a3      	strheq	r3, [r4, #12]
 8005f88:	bf18      	it	ne
 8005f8a:	81a3      	strhne	r3, [r4, #12]
 8005f8c:	bd10      	pop	{r4, pc}

08005f8e <__sclose>:
 8005f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f92:	f000 b8d3 	b.w	800613c <_close_r>
	...

08005f98 <__swbuf_r>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	460e      	mov	r6, r1
 8005f9c:	4614      	mov	r4, r2
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	b118      	cbz	r0, 8005faa <__swbuf_r+0x12>
 8005fa2:	6983      	ldr	r3, [r0, #24]
 8005fa4:	b90b      	cbnz	r3, 8005faa <__swbuf_r+0x12>
 8005fa6:	f7ff fbf7 	bl	8005798 <__sinit>
 8005faa:	4b21      	ldr	r3, [pc, #132]	; (8006030 <__swbuf_r+0x98>)
 8005fac:	429c      	cmp	r4, r3
 8005fae:	d12a      	bne.n	8006006 <__swbuf_r+0x6e>
 8005fb0:	686c      	ldr	r4, [r5, #4]
 8005fb2:	69a3      	ldr	r3, [r4, #24]
 8005fb4:	60a3      	str	r3, [r4, #8]
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	071a      	lsls	r2, r3, #28
 8005fba:	d52e      	bpl.n	800601a <__swbuf_r+0x82>
 8005fbc:	6923      	ldr	r3, [r4, #16]
 8005fbe:	b363      	cbz	r3, 800601a <__swbuf_r+0x82>
 8005fc0:	6923      	ldr	r3, [r4, #16]
 8005fc2:	6820      	ldr	r0, [r4, #0]
 8005fc4:	1ac0      	subs	r0, r0, r3
 8005fc6:	6963      	ldr	r3, [r4, #20]
 8005fc8:	b2f6      	uxtb	r6, r6
 8005fca:	4283      	cmp	r3, r0
 8005fcc:	4637      	mov	r7, r6
 8005fce:	dc04      	bgt.n	8005fda <__swbuf_r+0x42>
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f000 f948 	bl	8006268 <_fflush_r>
 8005fd8:	bb28      	cbnz	r0, 8006026 <__swbuf_r+0x8e>
 8005fda:	68a3      	ldr	r3, [r4, #8]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	60a3      	str	r3, [r4, #8]
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	6022      	str	r2, [r4, #0]
 8005fe6:	701e      	strb	r6, [r3, #0]
 8005fe8:	6963      	ldr	r3, [r4, #20]
 8005fea:	3001      	adds	r0, #1
 8005fec:	4283      	cmp	r3, r0
 8005fee:	d004      	beq.n	8005ffa <__swbuf_r+0x62>
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	07db      	lsls	r3, r3, #31
 8005ff4:	d519      	bpl.n	800602a <__swbuf_r+0x92>
 8005ff6:	2e0a      	cmp	r6, #10
 8005ff8:	d117      	bne.n	800602a <__swbuf_r+0x92>
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	f000 f933 	bl	8006268 <_fflush_r>
 8006002:	b190      	cbz	r0, 800602a <__swbuf_r+0x92>
 8006004:	e00f      	b.n	8006026 <__swbuf_r+0x8e>
 8006006:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <__swbuf_r+0x9c>)
 8006008:	429c      	cmp	r4, r3
 800600a:	d101      	bne.n	8006010 <__swbuf_r+0x78>
 800600c:	68ac      	ldr	r4, [r5, #8]
 800600e:	e7d0      	b.n	8005fb2 <__swbuf_r+0x1a>
 8006010:	4b09      	ldr	r3, [pc, #36]	; (8006038 <__swbuf_r+0xa0>)
 8006012:	429c      	cmp	r4, r3
 8006014:	bf08      	it	eq
 8006016:	68ec      	ldreq	r4, [r5, #12]
 8006018:	e7cb      	b.n	8005fb2 <__swbuf_r+0x1a>
 800601a:	4621      	mov	r1, r4
 800601c:	4628      	mov	r0, r5
 800601e:	f000 f81f 	bl	8006060 <__swsetup_r>
 8006022:	2800      	cmp	r0, #0
 8006024:	d0cc      	beq.n	8005fc0 <__swbuf_r+0x28>
 8006026:	f04f 37ff 	mov.w	r7, #4294967295
 800602a:	4638      	mov	r0, r7
 800602c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800602e:	bf00      	nop
 8006030:	08006544 	.word	0x08006544
 8006034:	08006564 	.word	0x08006564
 8006038:	08006524 	.word	0x08006524

0800603c <_write_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	4c07      	ldr	r4, [pc, #28]	; (800605c <_write_r+0x20>)
 8006040:	4605      	mov	r5, r0
 8006042:	4608      	mov	r0, r1
 8006044:	4611      	mov	r1, r2
 8006046:	2200      	movs	r2, #0
 8006048:	6022      	str	r2, [r4, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	f7fa fa90 	bl	8000570 <_write>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d102      	bne.n	800605a <_write_r+0x1e>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	b103      	cbz	r3, 800605a <_write_r+0x1e>
 8006058:	602b      	str	r3, [r5, #0]
 800605a:	bd38      	pop	{r3, r4, r5, pc}
 800605c:	20000228 	.word	0x20000228

08006060 <__swsetup_r>:
 8006060:	4b32      	ldr	r3, [pc, #200]	; (800612c <__swsetup_r+0xcc>)
 8006062:	b570      	push	{r4, r5, r6, lr}
 8006064:	681d      	ldr	r5, [r3, #0]
 8006066:	4606      	mov	r6, r0
 8006068:	460c      	mov	r4, r1
 800606a:	b125      	cbz	r5, 8006076 <__swsetup_r+0x16>
 800606c:	69ab      	ldr	r3, [r5, #24]
 800606e:	b913      	cbnz	r3, 8006076 <__swsetup_r+0x16>
 8006070:	4628      	mov	r0, r5
 8006072:	f7ff fb91 	bl	8005798 <__sinit>
 8006076:	4b2e      	ldr	r3, [pc, #184]	; (8006130 <__swsetup_r+0xd0>)
 8006078:	429c      	cmp	r4, r3
 800607a:	d10f      	bne.n	800609c <__swsetup_r+0x3c>
 800607c:	686c      	ldr	r4, [r5, #4]
 800607e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006082:	b29a      	uxth	r2, r3
 8006084:	0715      	lsls	r5, r2, #28
 8006086:	d42c      	bmi.n	80060e2 <__swsetup_r+0x82>
 8006088:	06d0      	lsls	r0, r2, #27
 800608a:	d411      	bmi.n	80060b0 <__swsetup_r+0x50>
 800608c:	2209      	movs	r2, #9
 800608e:	6032      	str	r2, [r6, #0]
 8006090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006094:	81a3      	strh	r3, [r4, #12]
 8006096:	f04f 30ff 	mov.w	r0, #4294967295
 800609a:	e03e      	b.n	800611a <__swsetup_r+0xba>
 800609c:	4b25      	ldr	r3, [pc, #148]	; (8006134 <__swsetup_r+0xd4>)
 800609e:	429c      	cmp	r4, r3
 80060a0:	d101      	bne.n	80060a6 <__swsetup_r+0x46>
 80060a2:	68ac      	ldr	r4, [r5, #8]
 80060a4:	e7eb      	b.n	800607e <__swsetup_r+0x1e>
 80060a6:	4b24      	ldr	r3, [pc, #144]	; (8006138 <__swsetup_r+0xd8>)
 80060a8:	429c      	cmp	r4, r3
 80060aa:	bf08      	it	eq
 80060ac:	68ec      	ldreq	r4, [r5, #12]
 80060ae:	e7e6      	b.n	800607e <__swsetup_r+0x1e>
 80060b0:	0751      	lsls	r1, r2, #29
 80060b2:	d512      	bpl.n	80060da <__swsetup_r+0x7a>
 80060b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060b6:	b141      	cbz	r1, 80060ca <__swsetup_r+0x6a>
 80060b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060bc:	4299      	cmp	r1, r3
 80060be:	d002      	beq.n	80060c6 <__swsetup_r+0x66>
 80060c0:	4630      	mov	r0, r6
 80060c2:	f000 f973 	bl	80063ac <_free_r>
 80060c6:	2300      	movs	r3, #0
 80060c8:	6363      	str	r3, [r4, #52]	; 0x34
 80060ca:	89a3      	ldrh	r3, [r4, #12]
 80060cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060d0:	81a3      	strh	r3, [r4, #12]
 80060d2:	2300      	movs	r3, #0
 80060d4:	6063      	str	r3, [r4, #4]
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	89a3      	ldrh	r3, [r4, #12]
 80060dc:	f043 0308 	orr.w	r3, r3, #8
 80060e0:	81a3      	strh	r3, [r4, #12]
 80060e2:	6923      	ldr	r3, [r4, #16]
 80060e4:	b94b      	cbnz	r3, 80060fa <__swsetup_r+0x9a>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f0:	d003      	beq.n	80060fa <__swsetup_r+0x9a>
 80060f2:	4621      	mov	r1, r4
 80060f4:	4630      	mov	r0, r6
 80060f6:	f000 f917 	bl	8006328 <__smakebuf_r>
 80060fa:	89a2      	ldrh	r2, [r4, #12]
 80060fc:	f012 0301 	ands.w	r3, r2, #1
 8006100:	d00c      	beq.n	800611c <__swsetup_r+0xbc>
 8006102:	2300      	movs	r3, #0
 8006104:	60a3      	str	r3, [r4, #8]
 8006106:	6963      	ldr	r3, [r4, #20]
 8006108:	425b      	negs	r3, r3
 800610a:	61a3      	str	r3, [r4, #24]
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	b953      	cbnz	r3, 8006126 <__swsetup_r+0xc6>
 8006110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006114:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006118:	d1ba      	bne.n	8006090 <__swsetup_r+0x30>
 800611a:	bd70      	pop	{r4, r5, r6, pc}
 800611c:	0792      	lsls	r2, r2, #30
 800611e:	bf58      	it	pl
 8006120:	6963      	ldrpl	r3, [r4, #20]
 8006122:	60a3      	str	r3, [r4, #8]
 8006124:	e7f2      	b.n	800610c <__swsetup_r+0xac>
 8006126:	2000      	movs	r0, #0
 8006128:	e7f7      	b.n	800611a <__swsetup_r+0xba>
 800612a:	bf00      	nop
 800612c:	2000000c 	.word	0x2000000c
 8006130:	08006544 	.word	0x08006544
 8006134:	08006564 	.word	0x08006564
 8006138:	08006524 	.word	0x08006524

0800613c <_close_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4c06      	ldr	r4, [pc, #24]	; (8006158 <_close_r+0x1c>)
 8006140:	2300      	movs	r3, #0
 8006142:	4605      	mov	r5, r0
 8006144:	4608      	mov	r0, r1
 8006146:	6023      	str	r3, [r4, #0]
 8006148:	f7fa fea1 	bl	8000e8e <_close>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_close_r+0x1a>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	b103      	cbz	r3, 8006156 <_close_r+0x1a>
 8006154:	602b      	str	r3, [r5, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	20000228 	.word	0x20000228

0800615c <__sflush_r>:
 800615c:	898a      	ldrh	r2, [r1, #12]
 800615e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006162:	4605      	mov	r5, r0
 8006164:	0710      	lsls	r0, r2, #28
 8006166:	460c      	mov	r4, r1
 8006168:	d458      	bmi.n	800621c <__sflush_r+0xc0>
 800616a:	684b      	ldr	r3, [r1, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	dc05      	bgt.n	800617c <__sflush_r+0x20>
 8006170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	dc02      	bgt.n	800617c <__sflush_r+0x20>
 8006176:	2000      	movs	r0, #0
 8006178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800617c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800617e:	2e00      	cmp	r6, #0
 8006180:	d0f9      	beq.n	8006176 <__sflush_r+0x1a>
 8006182:	2300      	movs	r3, #0
 8006184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006188:	682f      	ldr	r7, [r5, #0]
 800618a:	6a21      	ldr	r1, [r4, #32]
 800618c:	602b      	str	r3, [r5, #0]
 800618e:	d032      	beq.n	80061f6 <__sflush_r+0x9a>
 8006190:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	075a      	lsls	r2, r3, #29
 8006196:	d505      	bpl.n	80061a4 <__sflush_r+0x48>
 8006198:	6863      	ldr	r3, [r4, #4]
 800619a:	1ac0      	subs	r0, r0, r3
 800619c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800619e:	b10b      	cbz	r3, 80061a4 <__sflush_r+0x48>
 80061a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061a2:	1ac0      	subs	r0, r0, r3
 80061a4:	2300      	movs	r3, #0
 80061a6:	4602      	mov	r2, r0
 80061a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061aa:	6a21      	ldr	r1, [r4, #32]
 80061ac:	4628      	mov	r0, r5
 80061ae:	47b0      	blx	r6
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	d106      	bne.n	80061c4 <__sflush_r+0x68>
 80061b6:	6829      	ldr	r1, [r5, #0]
 80061b8:	291d      	cmp	r1, #29
 80061ba:	d848      	bhi.n	800624e <__sflush_r+0xf2>
 80061bc:	4a29      	ldr	r2, [pc, #164]	; (8006264 <__sflush_r+0x108>)
 80061be:	40ca      	lsrs	r2, r1
 80061c0:	07d6      	lsls	r6, r2, #31
 80061c2:	d544      	bpl.n	800624e <__sflush_r+0xf2>
 80061c4:	2200      	movs	r2, #0
 80061c6:	6062      	str	r2, [r4, #4]
 80061c8:	04d9      	lsls	r1, r3, #19
 80061ca:	6922      	ldr	r2, [r4, #16]
 80061cc:	6022      	str	r2, [r4, #0]
 80061ce:	d504      	bpl.n	80061da <__sflush_r+0x7e>
 80061d0:	1c42      	adds	r2, r0, #1
 80061d2:	d101      	bne.n	80061d8 <__sflush_r+0x7c>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b903      	cbnz	r3, 80061da <__sflush_r+0x7e>
 80061d8:	6560      	str	r0, [r4, #84]	; 0x54
 80061da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061dc:	602f      	str	r7, [r5, #0]
 80061de:	2900      	cmp	r1, #0
 80061e0:	d0c9      	beq.n	8006176 <__sflush_r+0x1a>
 80061e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061e6:	4299      	cmp	r1, r3
 80061e8:	d002      	beq.n	80061f0 <__sflush_r+0x94>
 80061ea:	4628      	mov	r0, r5
 80061ec:	f000 f8de 	bl	80063ac <_free_r>
 80061f0:	2000      	movs	r0, #0
 80061f2:	6360      	str	r0, [r4, #52]	; 0x34
 80061f4:	e7c0      	b.n	8006178 <__sflush_r+0x1c>
 80061f6:	2301      	movs	r3, #1
 80061f8:	4628      	mov	r0, r5
 80061fa:	47b0      	blx	r6
 80061fc:	1c41      	adds	r1, r0, #1
 80061fe:	d1c8      	bne.n	8006192 <__sflush_r+0x36>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0c5      	beq.n	8006192 <__sflush_r+0x36>
 8006206:	2b1d      	cmp	r3, #29
 8006208:	d001      	beq.n	800620e <__sflush_r+0xb2>
 800620a:	2b16      	cmp	r3, #22
 800620c:	d101      	bne.n	8006212 <__sflush_r+0xb6>
 800620e:	602f      	str	r7, [r5, #0]
 8006210:	e7b1      	b.n	8006176 <__sflush_r+0x1a>
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006218:	81a3      	strh	r3, [r4, #12]
 800621a:	e7ad      	b.n	8006178 <__sflush_r+0x1c>
 800621c:	690f      	ldr	r7, [r1, #16]
 800621e:	2f00      	cmp	r7, #0
 8006220:	d0a9      	beq.n	8006176 <__sflush_r+0x1a>
 8006222:	0793      	lsls	r3, r2, #30
 8006224:	680e      	ldr	r6, [r1, #0]
 8006226:	bf08      	it	eq
 8006228:	694b      	ldreq	r3, [r1, #20]
 800622a:	600f      	str	r7, [r1, #0]
 800622c:	bf18      	it	ne
 800622e:	2300      	movne	r3, #0
 8006230:	eba6 0807 	sub.w	r8, r6, r7
 8006234:	608b      	str	r3, [r1, #8]
 8006236:	f1b8 0f00 	cmp.w	r8, #0
 800623a:	dd9c      	ble.n	8006176 <__sflush_r+0x1a>
 800623c:	4643      	mov	r3, r8
 800623e:	463a      	mov	r2, r7
 8006240:	6a21      	ldr	r1, [r4, #32]
 8006242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006244:	4628      	mov	r0, r5
 8006246:	47b0      	blx	r6
 8006248:	2800      	cmp	r0, #0
 800624a:	dc06      	bgt.n	800625a <__sflush_r+0xfe>
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006252:	81a3      	strh	r3, [r4, #12]
 8006254:	f04f 30ff 	mov.w	r0, #4294967295
 8006258:	e78e      	b.n	8006178 <__sflush_r+0x1c>
 800625a:	4407      	add	r7, r0
 800625c:	eba8 0800 	sub.w	r8, r8, r0
 8006260:	e7e9      	b.n	8006236 <__sflush_r+0xda>
 8006262:	bf00      	nop
 8006264:	20400001 	.word	0x20400001

08006268 <_fflush_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	690b      	ldr	r3, [r1, #16]
 800626c:	4605      	mov	r5, r0
 800626e:	460c      	mov	r4, r1
 8006270:	b1db      	cbz	r3, 80062aa <_fflush_r+0x42>
 8006272:	b118      	cbz	r0, 800627c <_fflush_r+0x14>
 8006274:	6983      	ldr	r3, [r0, #24]
 8006276:	b90b      	cbnz	r3, 800627c <_fflush_r+0x14>
 8006278:	f7ff fa8e 	bl	8005798 <__sinit>
 800627c:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <_fflush_r+0x48>)
 800627e:	429c      	cmp	r4, r3
 8006280:	d109      	bne.n	8006296 <_fflush_r+0x2e>
 8006282:	686c      	ldr	r4, [r5, #4]
 8006284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006288:	b17b      	cbz	r3, 80062aa <_fflush_r+0x42>
 800628a:	4621      	mov	r1, r4
 800628c:	4628      	mov	r0, r5
 800628e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006292:	f7ff bf63 	b.w	800615c <__sflush_r>
 8006296:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <_fflush_r+0x4c>)
 8006298:	429c      	cmp	r4, r3
 800629a:	d101      	bne.n	80062a0 <_fflush_r+0x38>
 800629c:	68ac      	ldr	r4, [r5, #8]
 800629e:	e7f1      	b.n	8006284 <_fflush_r+0x1c>
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <_fflush_r+0x50>)
 80062a2:	429c      	cmp	r4, r3
 80062a4:	bf08      	it	eq
 80062a6:	68ec      	ldreq	r4, [r5, #12]
 80062a8:	e7ec      	b.n	8006284 <_fflush_r+0x1c>
 80062aa:	2000      	movs	r0, #0
 80062ac:	bd38      	pop	{r3, r4, r5, pc}
 80062ae:	bf00      	nop
 80062b0:	08006544 	.word	0x08006544
 80062b4:	08006564 	.word	0x08006564
 80062b8:	08006524 	.word	0x08006524

080062bc <_lseek_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4c07      	ldr	r4, [pc, #28]	; (80062dc <_lseek_r+0x20>)
 80062c0:	4605      	mov	r5, r0
 80062c2:	4608      	mov	r0, r1
 80062c4:	4611      	mov	r1, r2
 80062c6:	2200      	movs	r2, #0
 80062c8:	6022      	str	r2, [r4, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	f7fa fe06 	bl	8000edc <_lseek>
 80062d0:	1c43      	adds	r3, r0, #1
 80062d2:	d102      	bne.n	80062da <_lseek_r+0x1e>
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	b103      	cbz	r3, 80062da <_lseek_r+0x1e>
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	bd38      	pop	{r3, r4, r5, pc}
 80062dc:	20000228 	.word	0x20000228

080062e0 <__swhatbuf_r>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	460e      	mov	r6, r1
 80062e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e8:	2900      	cmp	r1, #0
 80062ea:	b096      	sub	sp, #88	; 0x58
 80062ec:	4614      	mov	r4, r2
 80062ee:	461d      	mov	r5, r3
 80062f0:	da07      	bge.n	8006302 <__swhatbuf_r+0x22>
 80062f2:	2300      	movs	r3, #0
 80062f4:	602b      	str	r3, [r5, #0]
 80062f6:	89b3      	ldrh	r3, [r6, #12]
 80062f8:	061a      	lsls	r2, r3, #24
 80062fa:	d410      	bmi.n	800631e <__swhatbuf_r+0x3e>
 80062fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006300:	e00e      	b.n	8006320 <__swhatbuf_r+0x40>
 8006302:	466a      	mov	r2, sp
 8006304:	f000 f8b2 	bl	800646c <_fstat_r>
 8006308:	2800      	cmp	r0, #0
 800630a:	dbf2      	blt.n	80062f2 <__swhatbuf_r+0x12>
 800630c:	9a01      	ldr	r2, [sp, #4]
 800630e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006312:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006316:	425a      	negs	r2, r3
 8006318:	415a      	adcs	r2, r3
 800631a:	602a      	str	r2, [r5, #0]
 800631c:	e7ee      	b.n	80062fc <__swhatbuf_r+0x1c>
 800631e:	2340      	movs	r3, #64	; 0x40
 8006320:	2000      	movs	r0, #0
 8006322:	6023      	str	r3, [r4, #0]
 8006324:	b016      	add	sp, #88	; 0x58
 8006326:	bd70      	pop	{r4, r5, r6, pc}

08006328 <__smakebuf_r>:
 8006328:	898b      	ldrh	r3, [r1, #12]
 800632a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800632c:	079d      	lsls	r5, r3, #30
 800632e:	4606      	mov	r6, r0
 8006330:	460c      	mov	r4, r1
 8006332:	d507      	bpl.n	8006344 <__smakebuf_r+0x1c>
 8006334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	6123      	str	r3, [r4, #16]
 800633c:	2301      	movs	r3, #1
 800633e:	6163      	str	r3, [r4, #20]
 8006340:	b002      	add	sp, #8
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	ab01      	add	r3, sp, #4
 8006346:	466a      	mov	r2, sp
 8006348:	f7ff ffca 	bl	80062e0 <__swhatbuf_r>
 800634c:	9900      	ldr	r1, [sp, #0]
 800634e:	4605      	mov	r5, r0
 8006350:	4630      	mov	r0, r6
 8006352:	f7ff faab 	bl	80058ac <_malloc_r>
 8006356:	b948      	cbnz	r0, 800636c <__smakebuf_r+0x44>
 8006358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800635c:	059a      	lsls	r2, r3, #22
 800635e:	d4ef      	bmi.n	8006340 <__smakebuf_r+0x18>
 8006360:	f023 0303 	bic.w	r3, r3, #3
 8006364:	f043 0302 	orr.w	r3, r3, #2
 8006368:	81a3      	strh	r3, [r4, #12]
 800636a:	e7e3      	b.n	8006334 <__smakebuf_r+0xc>
 800636c:	4b0d      	ldr	r3, [pc, #52]	; (80063a4 <__smakebuf_r+0x7c>)
 800636e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006370:	89a3      	ldrh	r3, [r4, #12]
 8006372:	6020      	str	r0, [r4, #0]
 8006374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006378:	81a3      	strh	r3, [r4, #12]
 800637a:	9b00      	ldr	r3, [sp, #0]
 800637c:	6163      	str	r3, [r4, #20]
 800637e:	9b01      	ldr	r3, [sp, #4]
 8006380:	6120      	str	r0, [r4, #16]
 8006382:	b15b      	cbz	r3, 800639c <__smakebuf_r+0x74>
 8006384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006388:	4630      	mov	r0, r6
 800638a:	f000 f881 	bl	8006490 <_isatty_r>
 800638e:	b128      	cbz	r0, 800639c <__smakebuf_r+0x74>
 8006390:	89a3      	ldrh	r3, [r4, #12]
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	f043 0301 	orr.w	r3, r3, #1
 800639a:	81a3      	strh	r3, [r4, #12]
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	431d      	orrs	r5, r3
 80063a0:	81a5      	strh	r5, [r4, #12]
 80063a2:	e7cd      	b.n	8006340 <__smakebuf_r+0x18>
 80063a4:	08005761 	.word	0x08005761

080063a8 <__malloc_lock>:
 80063a8:	4770      	bx	lr

080063aa <__malloc_unlock>:
 80063aa:	4770      	bx	lr

080063ac <_free_r>:
 80063ac:	b538      	push	{r3, r4, r5, lr}
 80063ae:	4605      	mov	r5, r0
 80063b0:	2900      	cmp	r1, #0
 80063b2:	d045      	beq.n	8006440 <_free_r+0x94>
 80063b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b8:	1f0c      	subs	r4, r1, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bfb8      	it	lt
 80063be:	18e4      	addlt	r4, r4, r3
 80063c0:	f7ff fff2 	bl	80063a8 <__malloc_lock>
 80063c4:	4a1f      	ldr	r2, [pc, #124]	; (8006444 <_free_r+0x98>)
 80063c6:	6813      	ldr	r3, [r2, #0]
 80063c8:	4610      	mov	r0, r2
 80063ca:	b933      	cbnz	r3, 80063da <_free_r+0x2e>
 80063cc:	6063      	str	r3, [r4, #4]
 80063ce:	6014      	str	r4, [r2, #0]
 80063d0:	4628      	mov	r0, r5
 80063d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063d6:	f7ff bfe8 	b.w	80063aa <__malloc_unlock>
 80063da:	42a3      	cmp	r3, r4
 80063dc:	d90c      	bls.n	80063f8 <_free_r+0x4c>
 80063de:	6821      	ldr	r1, [r4, #0]
 80063e0:	1862      	adds	r2, r4, r1
 80063e2:	4293      	cmp	r3, r2
 80063e4:	bf04      	itt	eq
 80063e6:	681a      	ldreq	r2, [r3, #0]
 80063e8:	685b      	ldreq	r3, [r3, #4]
 80063ea:	6063      	str	r3, [r4, #4]
 80063ec:	bf04      	itt	eq
 80063ee:	1852      	addeq	r2, r2, r1
 80063f0:	6022      	streq	r2, [r4, #0]
 80063f2:	6004      	str	r4, [r0, #0]
 80063f4:	e7ec      	b.n	80063d0 <_free_r+0x24>
 80063f6:	4613      	mov	r3, r2
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	b10a      	cbz	r2, 8006400 <_free_r+0x54>
 80063fc:	42a2      	cmp	r2, r4
 80063fe:	d9fa      	bls.n	80063f6 <_free_r+0x4a>
 8006400:	6819      	ldr	r1, [r3, #0]
 8006402:	1858      	adds	r0, r3, r1
 8006404:	42a0      	cmp	r0, r4
 8006406:	d10b      	bne.n	8006420 <_free_r+0x74>
 8006408:	6820      	ldr	r0, [r4, #0]
 800640a:	4401      	add	r1, r0
 800640c:	1858      	adds	r0, r3, r1
 800640e:	4282      	cmp	r2, r0
 8006410:	6019      	str	r1, [r3, #0]
 8006412:	d1dd      	bne.n	80063d0 <_free_r+0x24>
 8006414:	6810      	ldr	r0, [r2, #0]
 8006416:	6852      	ldr	r2, [r2, #4]
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	4401      	add	r1, r0
 800641c:	6019      	str	r1, [r3, #0]
 800641e:	e7d7      	b.n	80063d0 <_free_r+0x24>
 8006420:	d902      	bls.n	8006428 <_free_r+0x7c>
 8006422:	230c      	movs	r3, #12
 8006424:	602b      	str	r3, [r5, #0]
 8006426:	e7d3      	b.n	80063d0 <_free_r+0x24>
 8006428:	6820      	ldr	r0, [r4, #0]
 800642a:	1821      	adds	r1, r4, r0
 800642c:	428a      	cmp	r2, r1
 800642e:	bf04      	itt	eq
 8006430:	6811      	ldreq	r1, [r2, #0]
 8006432:	6852      	ldreq	r2, [r2, #4]
 8006434:	6062      	str	r2, [r4, #4]
 8006436:	bf04      	itt	eq
 8006438:	1809      	addeq	r1, r1, r0
 800643a:	6021      	streq	r1, [r4, #0]
 800643c:	605c      	str	r4, [r3, #4]
 800643e:	e7c7      	b.n	80063d0 <_free_r+0x24>
 8006440:	bd38      	pop	{r3, r4, r5, pc}
 8006442:	bf00      	nop
 8006444:	20000090 	.word	0x20000090

08006448 <_read_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4c07      	ldr	r4, [pc, #28]	; (8006468 <_read_r+0x20>)
 800644c:	4605      	mov	r5, r0
 800644e:	4608      	mov	r0, r1
 8006450:	4611      	mov	r1, r2
 8006452:	2200      	movs	r2, #0
 8006454:	6022      	str	r2, [r4, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	f7fa fcfc 	bl	8000e54 <_read>
 800645c:	1c43      	adds	r3, r0, #1
 800645e:	d102      	bne.n	8006466 <_read_r+0x1e>
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	b103      	cbz	r3, 8006466 <_read_r+0x1e>
 8006464:	602b      	str	r3, [r5, #0]
 8006466:	bd38      	pop	{r3, r4, r5, pc}
 8006468:	20000228 	.word	0x20000228

0800646c <_fstat_r>:
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	4c07      	ldr	r4, [pc, #28]	; (800648c <_fstat_r+0x20>)
 8006470:	2300      	movs	r3, #0
 8006472:	4605      	mov	r5, r0
 8006474:	4608      	mov	r0, r1
 8006476:	4611      	mov	r1, r2
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	f7fa fd14 	bl	8000ea6 <_fstat>
 800647e:	1c43      	adds	r3, r0, #1
 8006480:	d102      	bne.n	8006488 <_fstat_r+0x1c>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	b103      	cbz	r3, 8006488 <_fstat_r+0x1c>
 8006486:	602b      	str	r3, [r5, #0]
 8006488:	bd38      	pop	{r3, r4, r5, pc}
 800648a:	bf00      	nop
 800648c:	20000228 	.word	0x20000228

08006490 <_isatty_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4c06      	ldr	r4, [pc, #24]	; (80064ac <_isatty_r+0x1c>)
 8006494:	2300      	movs	r3, #0
 8006496:	4605      	mov	r5, r0
 8006498:	4608      	mov	r0, r1
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	f7fa fd13 	bl	8000ec6 <_isatty>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_isatty_r+0x1a>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_isatty_r+0x1a>
 80064a8:	602b      	str	r3, [r5, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	20000228 	.word	0x20000228

080064b0 <_init>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	bf00      	nop
 80064b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b6:	bc08      	pop	{r3}
 80064b8:	469e      	mov	lr, r3
 80064ba:	4770      	bx	lr

080064bc <_fini>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	bf00      	nop
 80064c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c2:	bc08      	pop	{r3}
 80064c4:	469e      	mov	lr, r3
 80064c6:	4770      	bx	lr
