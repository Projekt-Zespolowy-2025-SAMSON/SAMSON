
samson_nowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005824  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080059b4  080059b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ac4  08005ac4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ac4  08005ac4  00015ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005acc  08005acc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005acc  08005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ad0  08005ad0  00015ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  08005b44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08005b44  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdbc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002088  00000000  00000000  0002fe5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da8  00000000  00000000  00031ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca0  00000000  00000000  00032c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028ab8  00000000  00000000  00033930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad91  00000000  00000000  0005c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd70b  00000000  00000000  00067179  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00164884  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fac  00000000  00000000  00164900  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800599c 	.word	0x0800599c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800599c 	.word	0x0800599c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2 , ptr , len , 50);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	b29a      	uxth	r2, r3
 8000580:	2332      	movs	r3, #50	; 0x32
 8000582:	68b9      	ldr	r1, [r7, #8]
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <_write+0x24>)
 8000586:	f003 fe73 	bl	8004270 <HAL_UART_Transmit>
    return len;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000144 	.word	0x20000144

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fbf0 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f82e 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f988 	bl	80008b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a8:	f000 f968 	bl	800087c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 f936 	bl	800081c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005b0:	f000 f89c 	bl	80006ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_values, 3);
 80005b4:	2203      	movs	r2, #3
 80005b6:	490e      	ldr	r1, [pc, #56]	; (80005f0 <main+0x58>)
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <main+0x5c>)
 80005ba:	f000 ffa9 	bl	8001510 <HAL_ADC_Start_DMA>
  printf("przed while\n\r");
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <main+0x60>)
 80005c0:	f004 fb08 	bl	8004bd4 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005c4:	2120      	movs	r1, #32
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f002 faeb 	bl	8002ba4 <HAL_GPIO_TogglePin>
	  printf("adc1: %d, adc2: %d, adc3: %d\n\r", adc_values[0], adc_values[1], adc_values[2]);
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <main+0x58>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <main+0x58>)
 80005d6:	885b      	ldrh	r3, [r3, #2]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <main+0x58>)
 80005dc:	889b      	ldrh	r3, [r3, #4]
 80005de:	4807      	ldr	r0, [pc, #28]	; (80005fc <main+0x64>)
 80005e0:	f004 faf8 	bl	8004bd4 <iprintf>
	  HAL_Delay(1000);
 80005e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e8:	f000 fc46 	bl	8000e78 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005ec:	e7ea      	b.n	80005c4 <main+0x2c>
 80005ee:	bf00      	nop
 80005f0:	200001c4 	.word	0x200001c4
 80005f4:	20000098 	.word	0x20000098
 80005f8:	080059b4 	.word	0x080059b4
 80005fc:	080059c4 	.word	0x080059c4

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b0b8      	sub	sp, #224	; 0xe0
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800060a:	2244      	movs	r2, #68	; 0x44
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 fad8 	bl	8004bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2288      	movs	r2, #136	; 0x88
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 faca 	bl	8004bc4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063e:	2310      	movs	r3, #16
 8000640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064a:	2302      	movs	r3, #2
 800064c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000656:	230a      	movs	r3, #10
 8000658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065c:	2307      	movs	r3, #7
 800065e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fb14 	bl	8002ca0 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800067e:	f000 f983 	bl	8000988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2303      	movs	r3, #3
 800068a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006a4:	2104      	movs	r1, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fee0 	bl	800346c <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006b2:	f000 f969 	bl	8000988 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 f8d7 	bl	8003874 <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006cc:	f000 f95c 	bl	8000988 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d4:	f002 fa8e 	bl	8002bf4 <HAL_PWREx_ControlVoltageScaling>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80006de:	f000 f953 	bl	8000988 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	37e0      	adds	r7, #224	; 0xe0
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800070e:	4b3e      	ldr	r3, [pc, #248]	; (8000808 <MX_ADC1_Init+0x11c>)
 8000710:	4a3e      	ldr	r2, [pc, #248]	; (800080c <MX_ADC1_Init+0x120>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000714:	4b3c      	ldr	r3, [pc, #240]	; (8000808 <MX_ADC1_Init+0x11c>)
 8000716:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800071a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800071c:	4b3a      	ldr	r3, [pc, #232]	; (8000808 <MX_ADC1_Init+0x11c>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <MX_ADC1_Init+0x11c>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000728:	4b37      	ldr	r3, [pc, #220]	; (8000808 <MX_ADC1_Init+0x11c>)
 800072a:	2201      	movs	r2, #1
 800072c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072e:	4b36      	ldr	r3, [pc, #216]	; (8000808 <MX_ADC1_Init+0x11c>)
 8000730:	2204      	movs	r2, #4
 8000732:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000734:	4b34      	ldr	r3, [pc, #208]	; (8000808 <MX_ADC1_Init+0x11c>)
 8000736:	2200      	movs	r2, #0
 8000738:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800073a:	4b33      	ldr	r3, [pc, #204]	; (8000808 <MX_ADC1_Init+0x11c>)
 800073c:	2201      	movs	r2, #1
 800073e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000740:	4b31      	ldr	r3, [pc, #196]	; (8000808 <MX_ADC1_Init+0x11c>)
 8000742:	2203      	movs	r2, #3
 8000744:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000746:	4b30      	ldr	r3, [pc, #192]	; (8000808 <MX_ADC1_Init+0x11c>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074e:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <MX_ADC1_Init+0x11c>)
 8000750:	2200      	movs	r2, #0
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000754:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <MX_ADC1_Init+0x11c>)
 8000756:	2200      	movs	r2, #0
 8000758:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_ADC1_Init+0x11c>)
 800075c:	2201      	movs	r2, #1
 800075e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000762:	4b29      	ldr	r3, [pc, #164]	; (8000808 <MX_ADC1_Init+0x11c>)
 8000764:	2200      	movs	r2, #0
 8000766:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000768:	4b27      	ldr	r3, [pc, #156]	; (8000808 <MX_ADC1_Init+0x11c>)
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000770:	4825      	ldr	r0, [pc, #148]	; (8000808 <MX_ADC1_Init+0x11c>)
 8000772:	f000 fd79 	bl	8001268 <HAL_ADC_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800077c:	f000 f904 	bl	8000988 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	481f      	ldr	r0, [pc, #124]	; (8000808 <MX_ADC1_Init+0x11c>)
 800078c:	f001 fc94 	bl	80020b8 <HAL_ADCEx_MultiModeConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000796:	f000 f8f7 	bl	8000988 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_ADC1_Init+0x124>)
 800079c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079e:	2306      	movs	r3, #6
 80007a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80007a2:	2304      	movs	r3, #4
 80007a4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a6:	237f      	movs	r3, #127	; 0x7f
 80007a8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007aa:	2304      	movs	r3, #4
 80007ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4814      	ldr	r0, [pc, #80]	; (8000808 <MX_ADC1_Init+0x11c>)
 80007b8:	f000 ff7c 	bl	80016b4 <HAL_ADC_ConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80007c2:	f000 f8e1 	bl	8000988 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_ADC1_Init+0x128>)
 80007c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007ca:	230c      	movs	r3, #12
 80007cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	480d      	ldr	r0, [pc, #52]	; (8000808 <MX_ADC1_Init+0x11c>)
 80007d4:	f000 ff6e 	bl	80016b4 <HAL_ADC_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80007de:	f000 f8d3 	bl	8000988 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_ADC1_Init+0x12c>)
 80007e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007e6:	2312      	movs	r3, #18
 80007e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <MX_ADC1_Init+0x11c>)
 80007f0:	f000 ff60 	bl	80016b4 <HAL_ADC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80007fa:	f000 f8c5 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	; 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000098 	.word	0x20000098
 800080c:	50040000 	.word	0x50040000
 8000810:	04300002 	.word	0x04300002
 8000814:	08600004 	.word	0x08600004
 8000818:	0c900008 	.word	0x0c900008

0800081c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000822:	4a15      	ldr	r2, [pc, #84]	; (8000878 <MX_USART2_UART_Init+0x5c>)
 8000824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART2_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USART2_UART_Init+0x58>)
 8000860:	f003 fcb8 	bl	80041d4 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800086a:	f000 f88d 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000144 	.word	0x20000144
 8000878:	40004400 	.word	0x40004400

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_DMA_Init+0x38>)
 8000884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <MX_DMA_Init+0x38>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6493      	str	r3, [r2, #72]	; 0x48
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_DMA_Init+0x38>)
 8000890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	200b      	movs	r0, #11
 80008a0:	f001 fd91 	bl	80023c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008a4:	200b      	movs	r0, #11
 80008a6:	f001 fdaa 	bl	80023fe <HAL_NVIC_EnableIRQ>

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_GPIO_Init+0xc4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a2a      	ldr	r2, [pc, #168]	; (800097c <MX_GPIO_Init+0xc4>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b28      	ldr	r3, [pc, #160]	; (800097c <MX_GPIO_Init+0xc4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_GPIO_Init+0xc4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a24      	ldr	r2, [pc, #144]	; (800097c <MX_GPIO_Init+0xc4>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_GPIO_Init+0xc4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_GPIO_Init+0xc4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a1e      	ldr	r2, [pc, #120]	; (800097c <MX_GPIO_Init+0xc4>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_GPIO_Init+0xc4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_GPIO_Init+0xc4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <MX_GPIO_Init+0xc4>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_GPIO_Init+0xc4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f002 f91d 	bl	8002b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_GPIO_Init+0xc8>)
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_GPIO_Init+0xcc>)
 8000950:	f001 ff68 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000954:	2320      	movs	r3, #32
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f001 ff59 	bl	8002824 <HAL_GPIO_Init>

}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000
 8000980:	10210000 	.word	0x10210000
 8000984:	48000800 	.word	0x48000800

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_MspInit+0x44>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <HAL_MspInit+0x44>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6613      	str	r3, [r2, #96]	; 0x60
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_MspInit+0x44>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x44>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x44>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6593      	str	r3, [r2, #88]	; 0x58
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x44>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a2a      	ldr	r2, [pc, #168]	; (8000aa8 <HAL_ADC_MspInit+0xc8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d14e      	bne.n	8000aa0 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <HAL_ADC_MspInit+0xcc>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a29      	ldr	r2, [pc, #164]	; (8000aac <HAL_ADC_MspInit+0xcc>)
 8000a08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <HAL_ADC_MspInit+0xcc>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	4b24      	ldr	r3, [pc, #144]	; (8000aac <HAL_ADC_MspInit+0xcc>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a23      	ldr	r2, [pc, #140]	; (8000aac <HAL_ADC_MspInit+0xcc>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <HAL_ADC_MspInit+0xcc>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a32:	2307      	movs	r3, #7
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a36:	230b      	movs	r3, #11
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	481a      	ldr	r0, [pc, #104]	; (8000ab0 <HAL_ADC_MspInit+0xd0>)
 8000a46:	f001 feed 	bl	8002824 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_ADC_MspInit+0xd4>)
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <HAL_ADC_MspInit+0xd8>)
 8000a4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_ADC_MspInit+0xd4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_ADC_MspInit+0xd4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_ADC_MspInit+0xd4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_ADC_MspInit+0xd4>)
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_ADC_MspInit+0xd4>)
 8000a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a6e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_ADC_MspInit+0xd4>)
 8000a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a76:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_ADC_MspInit+0xd4>)
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_ADC_MspInit+0xd4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <HAL_ADC_MspInit+0xd4>)
 8000a86:	f001 fcd5 	bl	8002434 <HAL_DMA_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000a90:	f7ff ff7a 	bl	8000988 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_ADC_MspInit+0xd4>)
 8000a98:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a9a:	4a06      	ldr	r2, [pc, #24]	; (8000ab4 <HAL_ADC_MspInit+0xd4>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	50040000 	.word	0x50040000
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	48000800 	.word	0x48000800
 8000ab4:	200000fc 	.word	0x200000fc
 8000ab8:	40020008 	.word	0x40020008

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0x7c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d128      	bne.n	8000b30 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b0e:	230c      	movs	r3, #12
 8000b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1e:	2307      	movs	r3, #7
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f001 fe7a 	bl	8002824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40021000 	.word	0x40021000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 f950 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <DMA1_Channel1_IRQHandler+0x10>)
 8000ba2:	f001 fd5f 	bl	8002664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200000fc 	.word	0x200000fc

08000bb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	e00a      	b.n	8000bd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bc2:	f3af 8000 	nop.w
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	60ba      	str	r2, [r7, #8]
 8000bce:	b2ca      	uxtb	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf0      	blt.n	8000bc2 <_read+0x12>
	}

return len;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
	return -1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c12:	605a      	str	r2, [r3, #4]
	return 0;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_isatty>:

int _isatty(int file)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
	return 1;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
	return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f003 ff74 	bl	8004b70 <__errno>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20018000 	.word	0x20018000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	2000008c 	.word	0x2000008c
 8000cbc:	200001d8 	.word	0x200001d8

08000cc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <SystemInit+0x64>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <SystemInit+0x64>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <SystemInit+0x68>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <SystemInit+0x68>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <SystemInit+0x68>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <SystemInit+0x68>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <SystemInit+0x68>)
 8000cec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cf0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cf4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <SystemInit+0x68>)
 8000cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cfc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <SystemInit+0x68>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <SystemInit+0x68>)
 8000d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <SystemInit+0x68>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SystemInit+0x64>)
 8000d12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d16:	609a      	str	r2, [r3, #8]
#endif
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	40021000 	.word	0x40021000

08000d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d30:	f7ff ffc6 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d36:	e003      	b.n	8000d40 <LoopCopyDataInit>

08000d38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d3e:	3104      	adds	r1, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d40:	480a      	ldr	r0, [pc, #40]	; (8000d6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d48:	d3f6      	bcc.n	8000d38 <CopyDataInit>
	ldr	r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d4c:	e002      	b.n	8000d54 <LoopFillZerobss>

08000d4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d50:	f842 3b04 	str.w	r3, [r2], #4

08000d54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <LoopForever+0x16>)
	cmp	r2, r3
 8000d56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d58:	d3f9      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f003 ff0f 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5e:	f7ff fc1b 	bl	8000598 <main>

08000d62 <LoopForever>:

LoopForever:
    b LoopForever
 8000d62:	e7fe      	b.n	8000d62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d64:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d68:	08005ad4 	.word	0x08005ad4
	ldr	r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d70:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000d74:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000d78:	200001d4 	.word	0x200001d4

08000d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_2_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_Init+0x3c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <HAL_Init+0x3c>)
 8000d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d96:	2003      	movs	r0, #3
 8000d98:	f001 fb0a 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f000 f80f 	bl	8000dc0 <HAL_InitTick>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	e001      	b.n	8000db2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dae:	f7ff fdf3 	bl	8000998 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db2:	79fb      	ldrb	r3, [r7, #7]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40022000 	.word	0x40022000

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_InitTick+0x6c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d023      	beq.n	8000e1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_InitTick+0x70>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_InitTick+0x6c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 fb15 	bl	800241a <HAL_SYSTICK_Config>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10f      	bne.n	8000e16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d809      	bhi.n	8000e10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f001 fadf 	bl	80023c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_InitTick+0x74>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	e007      	b.n	8000e20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	e004      	b.n	8000e20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e001      	b.n	8000e20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	200001cc 	.word	0x200001cc

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	200001cc 	.word	0x200001cc

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff ffee 	bl	8000e60 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_Delay+0x40>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ffde 	bl	8000e60 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000008 	.word	0x20000008

08000ebc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	609a      	str	r2, [r3, #8]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3360      	adds	r3, #96	; 0x60
 8000f36:	461a      	mov	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <LL_ADC_SetOffset+0x44>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	4313      	orrs	r3, r2
 8000f54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f5c:	bf00      	nop
 8000f5e:	371c      	adds	r7, #28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	03fff000 	.word	0x03fff000

08000f6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3360      	adds	r3, #96	; 0x60
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3360      	adds	r3, #96	; 0x60
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fc2:	bf00      	nop
 8000fc4:	371c      	adds	r7, #28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3330      	adds	r3, #48	; 0x30
 8001004:	461a      	mov	r2, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	f003 030c 	and.w	r3, r3, #12
 8001010:	4413      	add	r3, r2
 8001012:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	f003 031f 	and.w	r3, r3, #31
 800101e:	211f      	movs	r1, #31
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	401a      	ands	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	0e9b      	lsrs	r3, r3, #26
 800102c:	f003 011f 	and.w	r1, r3, #31
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	431a      	orrs	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001040:	bf00      	nop
 8001042:	371c      	adds	r7, #28
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3314      	adds	r3, #20
 800105c:	461a      	mov	r2, r3
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	0e5b      	lsrs	r3, r3, #25
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	4413      	add	r3, r2
 800106a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	0d1b      	lsrs	r3, r3, #20
 8001074:	f003 031f 	and.w	r3, r3, #31
 8001078:	2107      	movs	r1, #7
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	401a      	ands	r2, r3
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	0d1b      	lsrs	r3, r3, #20
 8001086:	f003 031f 	and.w	r3, r3, #31
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	431a      	orrs	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001096:	bf00      	nop
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010bc:	43db      	mvns	r3, r3
 80010be:	401a      	ands	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0318 	and.w	r3, r3, #24
 80010c6:	4908      	ldr	r1, [pc, #32]	; (80010e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010c8:	40d9      	lsrs	r1, r3
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	400b      	ands	r3, r1
 80010ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010d2:	431a      	orrs	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	0007ffff 	.word	0x0007ffff

080010ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f003 031f 	and.w	r3, r3, #31
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001118:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6093      	str	r3, [r2, #8]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800113c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001140:	d101      	bne.n	8001146 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001164:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001168:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001190:	d101      	bne.n	8001196 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <LL_ADC_IsEnabled+0x18>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <LL_ADC_IsEnabled+0x1a>
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001202:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001206:	f043 0204 	orr.w	r2, r3, #4
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	2b04      	cmp	r3, #4
 800122c:	d101      	bne.n	8001232 <LL_ADC_REG_IsConversionOngoing+0x18>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b08      	cmp	r3, #8
 8001252:	d101      	bne.n	8001258 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e134      	b.n	80014ec <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128c:	2b00      	cmp	r3, #0
 800128e:	d109      	bne.n	80012a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fba5 	bl	80009e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff3f 	bl	800112c <LL_ADC_IsDeepPowerDownEnabled>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff25 	bl	8001108 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff5a 	bl	800117c <LL_ADC_IsInternalRegulatorEnabled>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d113      	bne.n	80012f6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff3e 	bl	8001154 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012d8:	4b86      	ldr	r3, [pc, #536]	; (80014f4 <HAL_ADC_Init+0x28c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	099b      	lsrs	r3, r3, #6
 80012de:	4a86      	ldr	r2, [pc, #536]	; (80014f8 <HAL_ADC_Init+0x290>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	099b      	lsrs	r3, r3, #6
 80012e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012e8:	e002      	b.n	80012f0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f9      	bne.n	80012ea <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff3e 	bl	800117c <LL_ADC_IsInternalRegulatorEnabled>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10d      	bne.n	8001322 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130a:	f043 0210 	orr.w	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	f043 0201 	orr.w	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff77 	bl	800121a <LL_ADC_REG_IsConversionOngoing>
 800132c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	2b00      	cmp	r3, #0
 8001338:	f040 80cf 	bne.w	80014da <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f040 80cb 	bne.w	80014da <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001348:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800134c:	f043 0202 	orr.w	r2, r3, #2
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff37 	bl	80011cc <LL_ADC_IsEnabled>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d115      	bne.n	8001390 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001364:	4865      	ldr	r0, [pc, #404]	; (80014fc <HAL_ADC_Init+0x294>)
 8001366:	f7ff ff31 	bl	80011cc <LL_ADC_IsEnabled>
 800136a:	4604      	mov	r4, r0
 800136c:	4864      	ldr	r0, [pc, #400]	; (8001500 <HAL_ADC_Init+0x298>)
 800136e:	f7ff ff2d 	bl	80011cc <LL_ADC_IsEnabled>
 8001372:	4603      	mov	r3, r0
 8001374:	431c      	orrs	r4, r3
 8001376:	4863      	ldr	r0, [pc, #396]	; (8001504 <HAL_ADC_Init+0x29c>)
 8001378:	f7ff ff28 	bl	80011cc <LL_ADC_IsEnabled>
 800137c:	4603      	mov	r3, r0
 800137e:	4323      	orrs	r3, r4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d105      	bne.n	8001390 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4619      	mov	r1, r3
 800138a:	485f      	ldr	r0, [pc, #380]	; (8001508 <HAL_ADC_Init+0x2a0>)
 800138c:	f7ff fd96 	bl	8000ebc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7e5b      	ldrb	r3, [r3, #25]
 8001394:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800139a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d106      	bne.n	80013cc <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	3b01      	subs	r3, #1
 80013c4:	045b      	lsls	r3, r3, #17
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d009      	beq.n	80013e8 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	4b47      	ldr	r3, [pc, #284]	; (800150c <HAL_ADC_Init+0x2a4>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	69b9      	ldr	r1, [r7, #24]
 80013f8:	430b      	orrs	r3, r1
 80013fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff0a 	bl	800121a <LL_ADC_REG_IsConversionOngoing>
 8001406:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff17 	bl	8001240 <LL_ADC_INJ_IsConversionOngoing>
 8001412:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d13d      	bne.n	8001496 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d13a      	bne.n	8001496 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001424:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800142c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800143c:	f023 0302 	bic.w	r3, r3, #2
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	69b9      	ldr	r1, [r7, #24]
 8001446:	430b      	orrs	r3, r1
 8001448:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001450:	2b01      	cmp	r3, #1
 8001452:	d118      	bne.n	8001486 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800145e:	f023 0304 	bic.w	r3, r3, #4
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800146a:	4311      	orrs	r1, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001470:	4311      	orrs	r1, r2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001476:	430a      	orrs	r2, r1
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0201 	orr.w	r2, r2, #1
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	e007      	b.n	8001496 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0201 	bic.w	r2, r2, #1
 8001494:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d10c      	bne.n	80014b8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	f023 010f 	bic.w	r1, r3, #15
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	1e5a      	subs	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30
 80014b6:	e007      	b.n	80014c8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 020f 	bic.w	r2, r2, #15
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014cc:	f023 0303 	bic.w	r3, r3, #3
 80014d0:	f043 0201 	orr.w	r2, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
 80014d8:	e007      	b.n	80014ea <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014de:	f043 0210 	orr.w	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3724      	adds	r7, #36	; 0x24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd90      	pop	{r4, r7, pc}
 80014f4:	20000000 	.word	0x20000000
 80014f8:	053e2d63 	.word	0x053e2d63
 80014fc:	50040000 	.word	0x50040000
 8001500:	50040100 	.word	0x50040100
 8001504:	50040200 	.word	0x50040200
 8001508:	50040300 	.word	0x50040300
 800150c:	fff0c007 	.word	0xfff0c007

08001510 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800151c:	4850      	ldr	r0, [pc, #320]	; (8001660 <HAL_ADC_Start_DMA+0x150>)
 800151e:	f7ff fde5 	bl	80010ec <LL_ADC_GetMultimode>
 8001522:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fe76 	bl	800121a <LL_ADC_REG_IsConversionOngoing>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	f040 808e 	bne.w	8001652 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_ADC_Start_DMA+0x34>
 8001540:	2302      	movs	r3, #2
 8001542:	e089      	b.n	8001658 <HAL_ADC_Start_DMA+0x148>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	2b05      	cmp	r3, #5
 8001556:	d002      	beq.n	800155e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	2b09      	cmp	r3, #9
 800155c:	d172      	bne.n	8001644 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 fc96 	bl	8001e90 <ADC_Enable>
 8001564:	4603      	mov	r3, r0
 8001566:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001568:	7dfb      	ldrb	r3, [r7, #23]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d165      	bne.n	800163a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001572:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001576:	f023 0301 	bic.w	r3, r3, #1
 800157a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a37      	ldr	r2, [pc, #220]	; (8001664 <HAL_ADC_Start_DMA+0x154>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d002      	beq.n	8001592 <HAL_ADC_Start_DMA+0x82>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	e000      	b.n	8001594 <HAL_ADC_Start_DMA+0x84>
 8001592:	4b35      	ldr	r3, [pc, #212]	; (8001668 <HAL_ADC_Start_DMA+0x158>)
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	4293      	cmp	r3, r2
 800159a:	d002      	beq.n	80015a2 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d105      	bne.n	80015ae <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	f023 0206 	bic.w	r2, r3, #6
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	659a      	str	r2, [r3, #88]	; 0x58
 80015c6:	e002      	b.n	80015ce <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	4a26      	ldr	r2, [pc, #152]	; (800166c <HAL_ADC_Start_DMA+0x15c>)
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a25      	ldr	r2, [pc, #148]	; (8001670 <HAL_ADC_Start_DMA+0x160>)
 80015dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	4a24      	ldr	r2, [pc, #144]	; (8001674 <HAL_ADC_Start_DMA+0x164>)
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	221c      	movs	r2, #28
 80015ec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0210 	orr.w	r2, r2, #16
 8001604:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0201 	orr.w	r2, r2, #1
 8001614:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3340      	adds	r3, #64	; 0x40
 8001620:	4619      	mov	r1, r3
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f000 ffbd 	bl	80025a4 <HAL_DMA_Start_IT>
 800162a:	4603      	mov	r3, r0
 800162c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fddd 	bl	80011f2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001638:	e00d      	b.n	8001656 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001642:	e008      	b.n	8001656 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001650:	e001      	b.n	8001656 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001652:	2302      	movs	r3, #2
 8001654:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001656:	7dfb      	ldrb	r3, [r7, #23]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	50040300 	.word	0x50040300
 8001664:	50040100 	.word	0x50040100
 8001668:	50040000 	.word	0x50040000
 800166c:	08001f45 	.word	0x08001f45
 8001670:	0800201d 	.word	0x0800201d
 8001674:	08002039 	.word	0x08002039

08001678 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0b6      	sub	sp, #216	; 0xd8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x22>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e3c6      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x7b0>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fd99 	bl	800121a <LL_ADC_REG_IsConversionOngoing>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 83a7 	bne.w	8001e3e <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d824      	bhi.n	8001742 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	3b02      	subs	r3, #2
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d81b      	bhi.n	800173a <HAL_ADC_ConfigChannel+0x86>
 8001702:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <HAL_ADC_ConfigChannel+0x54>)
 8001704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001708:	08001719 	.word	0x08001719
 800170c:	08001721 	.word	0x08001721
 8001710:	08001729 	.word	0x08001729
 8001714:	08001731 	.word	0x08001731
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	220c      	movs	r2, #12
 800171c:	605a      	str	r2, [r3, #4]
          break;
 800171e:	e011      	b.n	8001744 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2212      	movs	r2, #18
 8001724:	605a      	str	r2, [r3, #4]
          break;
 8001726:	e00d      	b.n	8001744 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2218      	movs	r2, #24
 800172c:	605a      	str	r2, [r3, #4]
          break;
 800172e:	e009      	b.n	8001744 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001736:	605a      	str	r2, [r3, #4]
          break;
 8001738:	e004      	b.n	8001744 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2206      	movs	r2, #6
 800173e:	605a      	str	r2, [r3, #4]
          break;
 8001740:	e000      	b.n	8001744 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001742:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	f7ff fc4f 	bl	8000ff4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fd5d 	bl	800121a <LL_ADC_REG_IsConversionOngoing>
 8001760:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fd69 	bl	8001240 <LL_ADC_INJ_IsConversionOngoing>
 800176e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001772:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 81a6 	bne.w	8001ac8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800177c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001780:	2b00      	cmp	r3, #0
 8001782:	f040 81a1 	bne.w	8001ac8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6819      	ldr	r1, [r3, #0]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	461a      	mov	r2, r3
 8001794:	f7ff fc5a 	bl	800104c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	08db      	lsrs	r3, r3, #3
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d00a      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6919      	ldr	r1, [r3, #16]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017ca:	f7ff fbab 	bl	8000f24 <LL_ADC_SetOffset>
 80017ce:	e17b      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fbc8 	bl	8000f6c <LL_ADC_GetOffsetChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10a      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x148>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fbbd 	bl	8000f6c <LL_ADC_GetOffsetChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	0e9b      	lsrs	r3, r3, #26
 80017f6:	f003 021f 	and.w	r2, r3, #31
 80017fa:	e01e      	b.n	800183a <HAL_ADC_ConfigChannel+0x186>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fbb2 	bl	8000f6c <LL_ADC_GetOffsetChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001812:	fa93 f3a3 	rbit	r3, r3
 8001816:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800181a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800181e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800182a:	2320      	movs	r3, #32
 800182c:	e004      	b.n	8001838 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800182e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x19e>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	0e9b      	lsrs	r3, r3, #26
 800184c:	f003 031f 	and.w	r3, r3, #31
 8001850:	e018      	b.n	8001884 <HAL_ADC_ConfigChannel+0x1d0>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800186a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800186e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001876:	2320      	movs	r3, #32
 8001878:	e004      	b.n	8001884 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800187a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800187e:	fab3 f383 	clz	r3, r3
 8001882:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001884:	429a      	cmp	r2, r3
 8001886:	d106      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fb81 	bl	8000f98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2101      	movs	r1, #1
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fb65 	bl	8000f6c <LL_ADC_GetOffsetChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10a      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x20e>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2101      	movs	r1, #1
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fb5a 	bl	8000f6c <LL_ADC_GetOffsetChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	0e9b      	lsrs	r3, r3, #26
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	e01e      	b.n	8001900 <HAL_ADC_ConfigChannel+0x24c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2101      	movs	r1, #1
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fb4f 	bl	8000f6c <LL_ADC_GetOffsetChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80018e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80018e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80018f0:	2320      	movs	r3, #32
 80018f2:	e004      	b.n	80018fe <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80018f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018f8:	fab3 f383 	clz	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x264>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0e9b      	lsrs	r3, r3, #26
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	e018      	b.n	800194a <HAL_ADC_ConfigChannel+0x296>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001924:	fa93 f3a3 	rbit	r3, r3
 8001928:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800192c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001934:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800193c:	2320      	movs	r3, #32
 800193e:	e004      	b.n	800194a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800194a:	429a      	cmp	r2, r3
 800194c:	d106      	bne.n	800195c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	2101      	movs	r1, #1
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fb1e 	bl	8000f98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2102      	movs	r1, #2
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fb02 	bl	8000f6c <LL_ADC_GetOffsetChannel>
 8001968:	4603      	mov	r3, r0
 800196a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10a      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x2d4>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2102      	movs	r1, #2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff faf7 	bl	8000f6c <LL_ADC_GetOffsetChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	0e9b      	lsrs	r3, r3, #26
 8001982:	f003 021f 	and.w	r2, r3, #31
 8001986:	e01e      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x312>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2102      	movs	r1, #2
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff faec 	bl	8000f6c <LL_ADC_GetOffsetChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80019a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80019ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80019b6:	2320      	movs	r3, #32
 80019b8:	e004      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80019ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d105      	bne.n	80019de <HAL_ADC_ConfigChannel+0x32a>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	0e9b      	lsrs	r3, r3, #26
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	e016      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x358>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019ea:	fa93 f3a3 	rbit	r3, r3
 80019ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80019f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80019f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80019fe:	2320      	movs	r3, #32
 8001a00:	e004      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d106      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2200      	movs	r2, #0
 8001a16:	2102      	movs	r1, #2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fabd 	bl	8000f98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2103      	movs	r1, #3
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff faa1 	bl	8000f6c <LL_ADC_GetOffsetChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10a      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x396>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2103      	movs	r1, #3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fa96 	bl	8000f6c <LL_ADC_GetOffsetChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	0e9b      	lsrs	r3, r3, #26
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	e017      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x3c6>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2103      	movs	r1, #3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fa8b 	bl	8000f6c <LL_ADC_GetOffsetChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a64:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	e003      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d105      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x3de>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	0e9b      	lsrs	r3, r3, #26
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	e011      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x402>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001aaa:	2320      	movs	r3, #32
 8001aac:	e003      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d106      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2103      	movs	r1, #3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fa68 	bl	8000f98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fb7d 	bl	80011cc <LL_ADC_IsEnabled>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f040 813f 	bne.w	8001d58 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6819      	ldr	r1, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f7ff fadc 	bl	80010a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4a8e      	ldr	r2, [pc, #568]	; (8001d2c <HAL_ADC_ConfigChannel+0x678>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	f040 8130 	bne.w	8001d58 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10b      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x46c>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0e9b      	lsrs	r3, r3, #26
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	2b09      	cmp	r3, #9
 8001b16:	bf94      	ite	ls
 8001b18:	2301      	movls	r3, #1
 8001b1a:	2300      	movhi	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	e019      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x4a0>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b30:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001b32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001b38:	2320      	movs	r3, #32
 8001b3a:	e003      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001b3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	3301      	adds	r3, #1
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	2b09      	cmp	r3, #9
 8001b4c:	bf94      	ite	ls
 8001b4e:	2301      	movls	r3, #1
 8001b50:	2300      	movhi	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d079      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d107      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x4c0>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0e9b      	lsrs	r3, r3, #26
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	069b      	lsls	r3, r3, #26
 8001b6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b72:	e015      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x4ec>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b84:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001b8c:	2320      	movs	r3, #32
 8001b8e:	e003      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	3301      	adds	r3, #1
 8001b9a:	069b      	lsls	r3, r3, #26
 8001b9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x50c>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0e9b      	lsrs	r3, r3, #26
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	2101      	movs	r1, #1
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	e017      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x53c>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001bd8:	2320      	movs	r3, #32
 8001bda:	e003      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	ea42 0103 	orr.w	r1, r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10a      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x562>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	3301      	adds	r3, #1
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	051b      	lsls	r3, r3, #20
 8001c14:	e018      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x594>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	e003      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	e080      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d107      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x5b4>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0e9b      	lsrs	r3, r3, #26
 8001c5e:	3301      	adds	r3, #1
 8001c60:	069b      	lsls	r3, r3, #26
 8001c62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c66:	e015      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x5e0>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001c80:	2320      	movs	r3, #32
 8001c82:	e003      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	069b      	lsls	r3, r3, #26
 8001c90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x600>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0e9b      	lsrs	r3, r3, #26
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	e017      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x630>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	61fb      	str	r3, [r7, #28]
  return result;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	e003      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	ea42 0103 	orr.w	r1, r2, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10d      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x65c>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0e9b      	lsrs	r3, r3, #26
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	3b1e      	subs	r3, #30
 8001d08:	051b      	lsls	r3, r3, #20
 8001d0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	e01d      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x698>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	613b      	str	r3, [r7, #16]
  return result;
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d103      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	e005      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x684>
 8001d2c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f003 021f 	and.w	r2, r3, #31
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	3b1e      	subs	r3, #30
 8001d46:	051b      	lsls	r3, r3, #20
 8001d48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	6892      	ldr	r2, [r2, #8]
 8001d52:	4619      	mov	r1, r3
 8001d54:	f7ff f97a 	bl	800104c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <HAL_ADC_ConfigChannel+0x7b8>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d079      	beq.n	8001e58 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d64:	4842      	ldr	r0, [pc, #264]	; (8001e70 <HAL_ADC_ConfigChannel+0x7bc>)
 8001d66:	f7ff f8cf 	bl	8000f08 <LL_ADC_GetCommonPathInternalCh>
 8001d6a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a40      	ldr	r2, [pc, #256]	; (8001e74 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d12b      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d125      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a3b      	ldr	r2, [pc, #236]	; (8001e78 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d004      	beq.n	8001d98 <HAL_ADC_ConfigChannel+0x6e4>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a3a      	ldr	r2, [pc, #232]	; (8001e7c <HAL_ADC_ConfigChannel+0x7c8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d15c      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001da0:	4619      	mov	r1, r3
 8001da2:	4833      	ldr	r0, [pc, #204]	; (8001e70 <HAL_ADC_ConfigChannel+0x7bc>)
 8001da4:	f7ff f89d 	bl	8000ee2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001da8:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <HAL_ADC_ConfigChannel+0x7cc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	099b      	lsrs	r3, r3, #6
 8001dae:	4a35      	ldr	r2, [pc, #212]	; (8001e84 <HAL_ADC_ConfigChannel+0x7d0>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	099a      	lsrs	r2, r3, #6
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dc0:	e002      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f9      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dce:	e040      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a2c      	ldr	r2, [pc, #176]	; (8001e88 <HAL_ADC_ConfigChannel+0x7d4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d118      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x758>
 8001dda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d112      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <HAL_ADC_ConfigChannel+0x7c4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d004      	beq.n	8001dfa <HAL_ADC_ConfigChannel+0x746>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a21      	ldr	r2, [pc, #132]	; (8001e7c <HAL_ADC_ConfigChannel+0x7c8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d12d      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e02:	4619      	mov	r1, r3
 8001e04:	481a      	ldr	r0, [pc, #104]	; (8001e70 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e06:	f7ff f86c 	bl	8000ee2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e0a:	e024      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <HAL_ADC_ConfigChannel+0x7d8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d120      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d11a      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d115      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e34:	4619      	mov	r1, r3
 8001e36:	480e      	ldr	r0, [pc, #56]	; (8001e70 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e38:	f7ff f853 	bl	8000ee2 <LL_ADC_SetCommonPathInternalCh>
 8001e3c:	e00c      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	f043 0220 	orr.w	r2, r3, #32
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001e50:	e002      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e52:	bf00      	nop
 8001e54:	e000      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e56:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e60:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	37d8      	adds	r7, #216	; 0xd8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	80080000 	.word	0x80080000
 8001e70:	50040300 	.word	0x50040300
 8001e74:	c7520000 	.word	0xc7520000
 8001e78:	50040000 	.word	0x50040000
 8001e7c:	50040200 	.word	0x50040200
 8001e80:	20000000 	.word	0x20000000
 8001e84:	053e2d63 	.word	0x053e2d63
 8001e88:	cb840000 	.word	0xcb840000
 8001e8c:	80000001 	.word	0x80000001

08001e90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff f995 	bl	80011cc <LL_ADC_IsEnabled>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d146      	bne.n	8001f36 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <ADC_Enable+0xb0>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00d      	beq.n	8001ed2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	f043 0210 	orr.w	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e032      	b.n	8001f38 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f964 	bl	80011a4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001edc:	f7fe ffc0 	bl	8000e60 <HAL_GetTick>
 8001ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ee2:	e021      	b.n	8001f28 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff f96f 	bl	80011cc <LL_ADC_IsEnabled>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d104      	bne.n	8001efe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff f953 	bl	80011a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001efe:	f7fe ffaf 	bl	8000e60 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d90d      	bls.n	8001f28 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	f043 0210 	orr.w	r2, r3, #16
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e007      	b.n	8001f38 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d1d6      	bne.n	8001ee4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	8000003f 	.word	0x8000003f

08001f44 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d14b      	bne.n	8001ff6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d021      	beq.n	8001fbc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff f826 	bl	8000fce <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d032      	beq.n	8001fee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d12b      	bne.n	8001fee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d11f      	bne.n	8001fee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f043 0201 	orr.w	r2, r3, #1
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
 8001fba:	e018      	b.n	8001fee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d111      	bne.n	8001fee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d105      	bne.n	8001fee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f7ff fb42 	bl	8001678 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ff4:	e00e      	b.n	8002014 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f7ff fb4c 	bl	80016a0 <HAL_ADC_ErrorCallback>
}
 8002008:	e004      	b.n	8002014 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f7ff fb2e 	bl	800168c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002030:	bf00      	nop
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	f043 0204 	orr.w	r2, r3, #4
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f7ff fb1e 	bl	80016a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002064:	bf00      	nop
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <LL_ADC_IsEnabled>:
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <LL_ADC_IsEnabled+0x18>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <LL_ADC_IsEnabled+0x1a>
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_REG_IsConversionOngoing>:
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d101      	bne.n	80020aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b09f      	sub	sp, #124	; 0x7c
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e08f      	b.n	80021f6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a47      	ldr	r2, [pc, #284]	; (8002200 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d102      	bne.n	80020ee <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80020e8:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	e001      	b.n	80020f2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10b      	bne.n	8002110 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fc:	f043 0220 	orr.w	r2, r3, #32
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e072      	b.n	80021f6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ffbd 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 8002118:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ffb7 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d154      	bne.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800212a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800212c:	2b00      	cmp	r3, #0
 800212e:	d151      	bne.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002130:	4b35      	ldr	r3, [pc, #212]	; (8002208 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002132:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02c      	beq.n	8002196 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800213c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800214e:	035b      	lsls	r3, r3, #13
 8002150:	430b      	orrs	r3, r1
 8002152:	431a      	orrs	r2, r3
 8002154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002156:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002158:	4829      	ldr	r0, [pc, #164]	; (8002200 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800215a:	f7ff ff87 	bl	800206c <LL_ADC_IsEnabled>
 800215e:	4604      	mov	r4, r0
 8002160:	4828      	ldr	r0, [pc, #160]	; (8002204 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002162:	f7ff ff83 	bl	800206c <LL_ADC_IsEnabled>
 8002166:	4603      	mov	r3, r0
 8002168:	431c      	orrs	r4, r3
 800216a:	4828      	ldr	r0, [pc, #160]	; (800220c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800216c:	f7ff ff7e 	bl	800206c <LL_ADC_IsEnabled>
 8002170:	4603      	mov	r3, r0
 8002172:	4323      	orrs	r3, r4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d137      	bne.n	80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002180:	f023 030f 	bic.w	r3, r3, #15
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	6811      	ldr	r1, [r2, #0]
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	6892      	ldr	r2, [r2, #8]
 800218c:	430a      	orrs	r2, r1
 800218e:	431a      	orrs	r2, r3
 8002190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002192:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002194:	e028      	b.n	80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800219e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021a2:	4817      	ldr	r0, [pc, #92]	; (8002200 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80021a4:	f7ff ff62 	bl	800206c <LL_ADC_IsEnabled>
 80021a8:	4604      	mov	r4, r0
 80021aa:	4816      	ldr	r0, [pc, #88]	; (8002204 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80021ac:	f7ff ff5e 	bl	800206c <LL_ADC_IsEnabled>
 80021b0:	4603      	mov	r3, r0
 80021b2:	431c      	orrs	r4, r3
 80021b4:	4815      	ldr	r0, [pc, #84]	; (800220c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021b6:	f7ff ff59 	bl	800206c <LL_ADC_IsEnabled>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4323      	orrs	r3, r4
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d112      	bne.n	80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021ca:	f023 030f 	bic.w	r3, r3, #15
 80021ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021d0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021d2:	e009      	b.n	80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d8:	f043 0220 	orr.w	r2, r3, #32
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80021e6:	e000      	b.n	80021ea <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	377c      	adds	r7, #124	; 0x7c
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd90      	pop	{r4, r7, pc}
 80021fe:	bf00      	nop
 8002200:	50040000 	.word	0x50040000
 8002204:	50040100 	.word	0x50040100
 8002208:	50040300 	.word	0x50040300
 800220c:	50040200 	.word	0x50040200

08002210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <__NVIC_EnableIRQ+0x38>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	; (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800237c:	d301      	bcc.n	8002382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237e:	2301      	movs	r3, #1
 8002380:	e00f      	b.n	80023a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <SysTick_Config+0x40>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238a:	210f      	movs	r1, #15
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f7ff ff8e 	bl	80022b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <SysTick_Config+0x40>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <SysTick_Config+0x40>)
 800239c:	2207      	movs	r2, #7
 800239e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	e000e010 	.word	0xe000e010

080023b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff29 	bl	8002210 <__NVIC_SetPriorityGrouping>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023d8:	f7ff ff3e 	bl	8002258 <__NVIC_GetPriorityGrouping>
 80023dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff ff8e 	bl	8002304 <NVIC_EncodePriority>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff5d 	bl	80022b0 <__NVIC_SetPriority>
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff31 	bl	8002274 <__NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffa2 	bl	800236c <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e098      	b.n	8002578 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	4b4d      	ldr	r3, [pc, #308]	; (8002584 <HAL_DMA_Init+0x150>)
 800244e:	429a      	cmp	r2, r3
 8002450:	d80f      	bhi.n	8002472 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	4b4b      	ldr	r3, [pc, #300]	; (8002588 <HAL_DMA_Init+0x154>)
 800245a:	4413      	add	r3, r2
 800245c:	4a4b      	ldr	r2, [pc, #300]	; (800258c <HAL_DMA_Init+0x158>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	009a      	lsls	r2, r3, #2
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a48      	ldr	r2, [pc, #288]	; (8002590 <HAL_DMA_Init+0x15c>)
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
 8002470:	e00e      	b.n	8002490 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_DMA_Init+0x160>)
 800247a:	4413      	add	r3, r2
 800247c:	4a43      	ldr	r2, [pc, #268]	; (800258c <HAL_DMA_Init+0x158>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	009a      	lsls	r2, r3, #2
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a42      	ldr	r2, [pc, #264]	; (8002598 <HAL_DMA_Init+0x164>)
 800248e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80024a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ea:	d039      	beq.n	8002560 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	4a27      	ldr	r2, [pc, #156]	; (8002590 <HAL_DMA_Init+0x15c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d11a      	bne.n	800252c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <HAL_DMA_Init+0x168>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f003 031c 	and.w	r3, r3, #28
 8002502:	210f      	movs	r1, #15
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	4924      	ldr	r1, [pc, #144]	; (800259c <HAL_DMA_Init+0x168>)
 800250c:	4013      	ands	r3, r2
 800250e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002510:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_DMA_Init+0x168>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f003 031c 	and.w	r3, r3, #28
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	491d      	ldr	r1, [pc, #116]	; (800259c <HAL_DMA_Init+0x168>)
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
 800252a:	e019      	b.n	8002560 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800252c:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <HAL_DMA_Init+0x16c>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	f003 031c 	and.w	r3, r3, #28
 8002538:	210f      	movs	r1, #15
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	4917      	ldr	r1, [pc, #92]	; (80025a0 <HAL_DMA_Init+0x16c>)
 8002542:	4013      	ands	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002546:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_DMA_Init+0x16c>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6859      	ldr	r1, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f003 031c 	and.w	r3, r3, #28
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	4911      	ldr	r1, [pc, #68]	; (80025a0 <HAL_DMA_Init+0x16c>)
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40020407 	.word	0x40020407
 8002588:	bffdfff8 	.word	0xbffdfff8
 800258c:	cccccccd 	.word	0xcccccccd
 8002590:	40020000 	.word	0x40020000
 8002594:	bffdfbf8 	.word	0xbffdfbf8
 8002598:	40020400 	.word	0x40020400
 800259c:	400200a8 	.word	0x400200a8
 80025a0:	400204a8 	.word	0x400204a8

080025a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_DMA_Start_IT+0x20>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e04b      	b.n	800265c <HAL_DMA_Start_IT+0xb8>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d13a      	bne.n	800264e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0201 	bic.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f8e0 	bl	80027c2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 020e 	orr.w	r2, r2, #14
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e00f      	b.n	800263c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0204 	bic.w	r2, r2, #4
 800262a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 020a 	orr.w	r2, r2, #10
 800263a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e005      	b.n	800265a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002656:	2302      	movs	r3, #2
 8002658:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800265a:	7dfb      	ldrb	r3, [r7, #23]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f003 031c 	and.w	r3, r3, #28
 8002684:	2204      	movs	r2, #4
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d026      	beq.n	80026de <HAL_DMA_IRQHandler+0x7a>
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	d021      	beq.n	80026de <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d107      	bne.n	80026b8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0204 	bic.w	r2, r2, #4
 80026b6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	f003 021c 	and.w	r2, r3, #28
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	2104      	movs	r1, #4
 80026c6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d071      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80026dc:	e06c      	b.n	80027b8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f003 031c 	and.w	r3, r3, #28
 80026e6:	2202      	movs	r2, #2
 80026e8:	409a      	lsls	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d02e      	beq.n	8002750 <HAL_DMA_IRQHandler+0xec>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d029      	beq.n	8002750 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10b      	bne.n	8002722 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 020a 	bic.w	r2, r2, #10
 8002718:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f003 021c 	and.w	r2, r3, #28
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2102      	movs	r1, #2
 8002730:	fa01 f202 	lsl.w	r2, r1, r2
 8002734:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d038      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800274e:	e033      	b.n	80027b8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	f003 031c 	and.w	r3, r3, #28
 8002758:	2208      	movs	r2, #8
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d02a      	beq.n	80027ba <HAL_DMA_IRQHandler+0x156>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d025      	beq.n	80027ba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 020e 	bic.w	r2, r2, #14
 800277c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f003 021c 	and.w	r2, r3, #28
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f202 	lsl.w	r2, r1, r2
 8002790:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d004      	beq.n	80027ba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
}
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	f003 021c 	and.w	r2, r3, #28
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	2101      	movs	r1, #1
 80027de:	fa01 f202 	lsl.w	r2, r1, r2
 80027e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d108      	bne.n	8002806 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002804:	e007      	b.n	8002816 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	60da      	str	r2, [r3, #12]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002832:	e17f      	b.n	8002b34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	2101      	movs	r1, #1
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	4013      	ands	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8171 	beq.w	8002b2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d00b      	beq.n	800286c <HAL_GPIO_Init+0x48>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d007      	beq.n	800286c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002860:	2b11      	cmp	r3, #17
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b12      	cmp	r3, #18
 800286a:	d130      	bne.n	80028ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028a2:	2201      	movs	r2, #1
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	f003 0201 	and.w	r2, r3, #1
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d118      	bne.n	800290c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028e0:	2201      	movs	r2, #1
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	08db      	lsrs	r3, r3, #3
 80028f6:	f003 0201 	and.w	r2, r3, #1
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x128>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b12      	cmp	r3, #18
 800294a:	d123      	bne.n	8002994 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	08da      	lsrs	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3208      	adds	r2, #8
 8002954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	220f      	movs	r2, #15
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	08da      	lsrs	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3208      	adds	r2, #8
 800298e:	6939      	ldr	r1, [r7, #16]
 8002990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0203 	and.w	r2, r3, #3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80ac 	beq.w	8002b2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d6:	4b5e      	ldr	r3, [pc, #376]	; (8002b50 <HAL_GPIO_Init+0x32c>)
 80029d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029da:	4a5d      	ldr	r2, [pc, #372]	; (8002b50 <HAL_GPIO_Init+0x32c>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6613      	str	r3, [r2, #96]	; 0x60
 80029e2:	4b5b      	ldr	r3, [pc, #364]	; (8002b50 <HAL_GPIO_Init+0x32c>)
 80029e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029ee:	4a59      	ldr	r2, [pc, #356]	; (8002b54 <HAL_GPIO_Init+0x330>)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	3302      	adds	r3, #2
 80029f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	220f      	movs	r2, #15
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a18:	d025      	beq.n	8002a66 <HAL_GPIO_Init+0x242>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4e      	ldr	r2, [pc, #312]	; (8002b58 <HAL_GPIO_Init+0x334>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01f      	beq.n	8002a62 <HAL_GPIO_Init+0x23e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4d      	ldr	r2, [pc, #308]	; (8002b5c <HAL_GPIO_Init+0x338>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d019      	beq.n	8002a5e <HAL_GPIO_Init+0x23a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4c      	ldr	r2, [pc, #304]	; (8002b60 <HAL_GPIO_Init+0x33c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_GPIO_Init+0x236>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4b      	ldr	r2, [pc, #300]	; (8002b64 <HAL_GPIO_Init+0x340>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00d      	beq.n	8002a56 <HAL_GPIO_Init+0x232>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4a      	ldr	r2, [pc, #296]	; (8002b68 <HAL_GPIO_Init+0x344>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d007      	beq.n	8002a52 <HAL_GPIO_Init+0x22e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a49      	ldr	r2, [pc, #292]	; (8002b6c <HAL_GPIO_Init+0x348>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_GPIO_Init+0x22a>
 8002a4a:	2306      	movs	r3, #6
 8002a4c:	e00c      	b.n	8002a68 <HAL_GPIO_Init+0x244>
 8002a4e:	2307      	movs	r3, #7
 8002a50:	e00a      	b.n	8002a68 <HAL_GPIO_Init+0x244>
 8002a52:	2305      	movs	r3, #5
 8002a54:	e008      	b.n	8002a68 <HAL_GPIO_Init+0x244>
 8002a56:	2304      	movs	r3, #4
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x244>
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e004      	b.n	8002a68 <HAL_GPIO_Init+0x244>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e002      	b.n	8002a68 <HAL_GPIO_Init+0x244>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_GPIO_Init+0x244>
 8002a66:	2300      	movs	r3, #0
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	f002 0203 	and.w	r2, r2, #3
 8002a6e:	0092      	lsls	r2, r2, #2
 8002a70:	4093      	lsls	r3, r2
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a78:	4936      	ldr	r1, [pc, #216]	; (8002b54 <HAL_GPIO_Init+0x330>)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	089b      	lsrs	r3, r3, #2
 8002a7e:	3302      	adds	r3, #2
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a86:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <HAL_GPIO_Init+0x34c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aaa:	4a31      	ldr	r2, [pc, #196]	; (8002b70 <HAL_GPIO_Init+0x34c>)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ab0:	4b2f      	ldr	r3, [pc, #188]	; (8002b70 <HAL_GPIO_Init+0x34c>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ad4:	4a26      	ldr	r2, [pc, #152]	; (8002b70 <HAL_GPIO_Init+0x34c>)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ada:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <HAL_GPIO_Init+0x34c>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002afe:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <HAL_GPIO_Init+0x34c>)
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <HAL_GPIO_Init+0x34c>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b28:	4a11      	ldr	r2, [pc, #68]	; (8002b70 <HAL_GPIO_Init+0x34c>)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3301      	adds	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f47f ae78 	bne.w	8002834 <HAL_GPIO_Init+0x10>
  }
}
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40010000 	.word	0x40010000
 8002b58:	48000400 	.word	0x48000400
 8002b5c:	48000800 	.word	0x48000800
 8002b60:	48000c00 	.word	0x48000c00
 8002b64:	48001000 	.word	0x48001000
 8002b68:	48001400 	.word	0x48001400
 8002b6c:	48001800 	.word	0x48001800
 8002b70:	40010400 	.word	0x40010400

08002b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
 8002b80:	4613      	mov	r3, r2
 8002b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b84:	787b      	ldrb	r3, [r7, #1]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	041a      	lsls	r2, r3, #16
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	43d9      	mvns	r1, r3
 8002bc2:	887b      	ldrh	r3, [r7, #2]
 8002bc4:	400b      	ands	r3, r1
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40007000 	.word	0x40007000

08002bf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c02:	d130      	bne.n	8002c66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c04:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c10:	d038      	beq.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c1a:	4a1e      	ldr	r2, [pc, #120]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2232      	movs	r2, #50	; 0x32
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	0c9b      	lsrs	r3, r3, #18
 8002c34:	3301      	adds	r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c38:	e002      	b.n	8002c40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c40:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4c:	d102      	bne.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f2      	bne.n	8002c3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c54:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c60:	d110      	bne.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e00f      	b.n	8002c86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c72:	d007      	beq.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c7c:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40007000 	.word	0x40007000
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	431bde83 	.word	0x431bde83

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e3d4      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb2:	4ba1      	ldr	r3, [pc, #644]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cbc:	4b9e      	ldr	r3, [pc, #632]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80e4 	beq.w	8002e9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_RCC_OscConfig+0x4a>
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b0c      	cmp	r3, #12
 8002cde:	f040 808b 	bne.w	8002df8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	f040 8087 	bne.w	8002df8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cea:	4b93      	ldr	r3, [pc, #588]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x62>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e3ac      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1a      	ldr	r2, [r3, #32]
 8002d06:	4b8c      	ldr	r3, [pc, #560]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <HAL_RCC_OscConfig+0x7c>
 8002d12:	4b89      	ldr	r3, [pc, #548]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1a:	e005      	b.n	8002d28 <HAL_RCC_OscConfig+0x88>
 8002d1c:	4b86      	ldr	r3, [pc, #536]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d223      	bcs.n	8002d74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fd3f 	bl	80037b4 <RCC_SetFlashLatencyFromMSIRange>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e38d      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d40:	4b7d      	ldr	r3, [pc, #500]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a7c      	ldr	r2, [pc, #496]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002d46:	f043 0308 	orr.w	r3, r3, #8
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b7a      	ldr	r3, [pc, #488]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4977      	ldr	r1, [pc, #476]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5e:	4b76      	ldr	r3, [pc, #472]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	4972      	ldr	r1, [pc, #456]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
 8002d72:	e025      	b.n	8002dc0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d74:	4b70      	ldr	r3, [pc, #448]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a6f      	ldr	r2, [pc, #444]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002d7a:	f043 0308 	orr.w	r3, r3, #8
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b6d      	ldr	r3, [pc, #436]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	496a      	ldr	r1, [pc, #424]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d92:	4b69      	ldr	r3, [pc, #420]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	4965      	ldr	r1, [pc, #404]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fcff 	bl	80037b4 <RCC_SetFlashLatencyFromMSIRange>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e34d      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dc0:	f000 fc36 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	4b5c      	ldr	r3, [pc, #368]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	4a5a      	ldr	r2, [pc, #360]	; (8002f3c <HAL_RCC_OscConfig+0x29c>)
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	fa21 f303 	lsr.w	r3, r1, r3
 8002ddc:	4a58      	ldr	r2, [pc, #352]	; (8002f40 <HAL_RCC_OscConfig+0x2a0>)
 8002dde:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002de0:	4b58      	ldr	r3, [pc, #352]	; (8002f44 <HAL_RCC_OscConfig+0x2a4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd ffeb 	bl	8000dc0 <HAL_InitTick>
 8002dea:	4603      	mov	r3, r0
 8002dec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d052      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	e331      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d032      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e00:	4b4d      	ldr	r3, [pc, #308]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a4c      	ldr	r2, [pc, #304]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e0c:	f7fe f828 	bl	8000e60 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e14:	f7fe f824 	bl	8000e60 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e31a      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e26:	4b44      	ldr	r3, [pc, #272]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e32:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a40      	ldr	r2, [pc, #256]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	493b      	ldr	r1, [pc, #236]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e50:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	4936      	ldr	r1, [pc, #216]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
 8002e64:	e01a      	b.n	8002e9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e66:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a33      	ldr	r2, [pc, #204]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e72:	f7fd fff5 	bl	8000e60 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e7a:	f7fd fff1 	bl	8000e60 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e2e7      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e8c:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x1da>
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d074      	beq.n	8002f92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d005      	beq.n	8002eba <HAL_RCC_OscConfig+0x21a>
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b0c      	cmp	r3, #12
 8002eb2:	d10e      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eba:	4b1f      	ldr	r3, [pc, #124]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d064      	beq.n	8002f90 <HAL_RCC_OscConfig+0x2f0>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d160      	bne.n	8002f90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e2c4      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x24a>
 8002edc:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a15      	ldr	r2, [pc, #84]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	e01d      	b.n	8002f26 <HAL_RCC_OscConfig+0x286>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef2:	d10c      	bne.n	8002f0e <HAL_RCC_OscConfig+0x26e>
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0f      	ldr	r2, [pc, #60]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0c      	ldr	r2, [pc, #48]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	e00b      	b.n	8002f26 <HAL_RCC_OscConfig+0x286>
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a06      	ldr	r2, [pc, #24]	; (8002f38 <HAL_RCC_OscConfig+0x298>)
 8002f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01c      	beq.n	8002f68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fd ff97 	bl	8000e60 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f34:	e011      	b.n	8002f5a <HAL_RCC_OscConfig+0x2ba>
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	080059e4 	.word	0x080059e4
 8002f40:	20000000 	.word	0x20000000
 8002f44:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fd ff8a 	bl	8000e60 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e280      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f5a:	4baf      	ldr	r3, [pc, #700]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x2a8>
 8002f66:	e014      	b.n	8002f92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fd ff7a 	bl	8000e60 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fd ff76 	bl	8000e60 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e26c      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f82:	4ba5      	ldr	r3, [pc, #660]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x2d0>
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d060      	beq.n	8003060 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x310>
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d119      	bne.n	8002fde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d116      	bne.n	8002fde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb0:	4b99      	ldr	r3, [pc, #612]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x328>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e249      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b93      	ldr	r3, [pc, #588]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	4990      	ldr	r1, [pc, #576]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fdc:	e040      	b.n	8003060 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d023      	beq.n	800302e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe6:	4b8c      	ldr	r3, [pc, #560]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a8b      	ldr	r2, [pc, #556]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8002fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7fd ff35 	bl	8000e60 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7fd ff31 	bl	8000e60 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e227      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800300c:	4b82      	ldr	r3, [pc, #520]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	4b7f      	ldr	r3, [pc, #508]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	497c      	ldr	r1, [pc, #496]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]
 800302c:	e018      	b.n	8003060 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302e:	4b7a      	ldr	r3, [pc, #488]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a79      	ldr	r2, [pc, #484]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8003034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fd ff11 	bl	8000e60 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003042:	f7fd ff0d 	bl	8000e60 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e203      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003054:	4b70      	ldr	r3, [pc, #448]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f0      	bne.n	8003042 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d03c      	beq.n	80030e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01c      	beq.n	80030ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003074:	4b68      	ldr	r3, [pc, #416]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8003076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307a:	4a67      	ldr	r2, [pc, #412]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7fd feec 	bl	8000e60 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308c:	f7fd fee8 	bl	8000e60 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e1de      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800309e:	4b5e      	ldr	r3, [pc, #376]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 80030a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0ef      	beq.n	800308c <HAL_RCC_OscConfig+0x3ec>
 80030ac:	e01b      	b.n	80030e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ae:	4b5a      	ldr	r3, [pc, #360]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 80030b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b4:	4a58      	ldr	r2, [pc, #352]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030be:	f7fd fecf 	bl	8000e60 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fd fecb 	bl	8000e60 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1c1      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030d8:	4b4f      	ldr	r3, [pc, #316]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 80030da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1ef      	bne.n	80030c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80a6 	beq.w	8003240 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f4:	2300      	movs	r3, #0
 80030f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030f8:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10d      	bne.n	8003120 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003104:	4b44      	ldr	r3, [pc, #272]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	4a43      	ldr	r2, [pc, #268]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 800310a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310e:	6593      	str	r3, [r2, #88]	; 0x58
 8003110:	4b41      	ldr	r3, [pc, #260]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311c:	2301      	movs	r3, #1
 800311e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003120:	4b3e      	ldr	r3, [pc, #248]	; (800321c <HAL_RCC_OscConfig+0x57c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d118      	bne.n	800315e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800312c:	4b3b      	ldr	r3, [pc, #236]	; (800321c <HAL_RCC_OscConfig+0x57c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a3a      	ldr	r2, [pc, #232]	; (800321c <HAL_RCC_OscConfig+0x57c>)
 8003132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003136:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003138:	f7fd fe92 	bl	8000e60 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003140:	f7fd fe8e 	bl	8000e60 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e184      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003152:	4b32      	ldr	r3, [pc, #200]	; (800321c <HAL_RCC_OscConfig+0x57c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d108      	bne.n	8003178 <HAL_RCC_OscConfig+0x4d8>
 8003166:	4b2c      	ldr	r3, [pc, #176]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	4a2a      	ldr	r2, [pc, #168]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003176:	e024      	b.n	80031c2 <HAL_RCC_OscConfig+0x522>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b05      	cmp	r3, #5
 800317e:	d110      	bne.n	80031a2 <HAL_RCC_OscConfig+0x502>
 8003180:	4b25      	ldr	r3, [pc, #148]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	4a24      	ldr	r2, [pc, #144]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8003188:	f043 0304 	orr.w	r3, r3, #4
 800318c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	4a20      	ldr	r2, [pc, #128]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a0:	e00f      	b.n	80031c2 <HAL_RCC_OscConfig+0x522>
 80031a2:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	4a1b      	ldr	r2, [pc, #108]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031b2:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 80031b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b8:	4a17      	ldr	r2, [pc, #92]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 80031ba:	f023 0304 	bic.w	r3, r3, #4
 80031be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d016      	beq.n	80031f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ca:	f7fd fe49 	bl	8000e60 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fd fe45 	bl	8000e60 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e139      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_OscConfig+0x578>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0ed      	beq.n	80031d2 <HAL_RCC_OscConfig+0x532>
 80031f6:	e01a      	b.n	800322e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f8:	f7fd fe32 	bl	8000e60 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031fe:	e00f      	b.n	8003220 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003200:	f7fd fe2e 	bl	8000e60 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	; 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d906      	bls.n	8003220 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e122      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003220:	4b90      	ldr	r3, [pc, #576]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e8      	bne.n	8003200 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322e:	7ffb      	ldrb	r3, [r7, #31]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d105      	bne.n	8003240 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003234:	4b8b      	ldr	r3, [pc, #556]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003238:	4a8a      	ldr	r2, [pc, #552]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 800323a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 8108 	beq.w	800345a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	2b02      	cmp	r3, #2
 8003250:	f040 80d0 	bne.w	80033f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003254:	4b83      	ldr	r3, [pc, #524]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f003 0203 	and.w	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	429a      	cmp	r2, r3
 8003266:	d130      	bne.n	80032ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	3b01      	subs	r3, #1
 8003274:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	d127      	bne.n	80032ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d11f      	bne.n	80032ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003294:	2a07      	cmp	r2, #7
 8003296:	bf14      	ite	ne
 8003298:	2201      	movne	r2, #1
 800329a:	2200      	moveq	r2, #0
 800329c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800329e:	4293      	cmp	r3, r2
 80032a0:	d113      	bne.n	80032ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	3b01      	subs	r3, #1
 80032b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	085b      	lsrs	r3, r3, #1
 80032c2:	3b01      	subs	r3, #1
 80032c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d06e      	beq.n	80033a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2b0c      	cmp	r3, #12
 80032ce:	d069      	beq.n	80033a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032d0:	4b64      	ldr	r3, [pc, #400]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032dc:	4b61      	ldr	r3, [pc, #388]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0b7      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032ec:	4b5d      	ldr	r3, [pc, #372]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a5c      	ldr	r2, [pc, #368]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 80032f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032f8:	f7fd fdb2 	bl	8000e60 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003300:	f7fd fdae 	bl	8000e60 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e0a4      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003312:	4b54      	ldr	r3, [pc, #336]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800331e:	4b51      	ldr	r3, [pc, #324]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	4b51      	ldr	r3, [pc, #324]	; (8003468 <HAL_RCC_OscConfig+0x7c8>)
 8003324:	4013      	ands	r3, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800332e:	3a01      	subs	r2, #1
 8003330:	0112      	lsls	r2, r2, #4
 8003332:	4311      	orrs	r1, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003338:	0212      	lsls	r2, r2, #8
 800333a:	4311      	orrs	r1, r2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003340:	0852      	lsrs	r2, r2, #1
 8003342:	3a01      	subs	r2, #1
 8003344:	0552      	lsls	r2, r2, #21
 8003346:	4311      	orrs	r1, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800334c:	0852      	lsrs	r2, r2, #1
 800334e:	3a01      	subs	r2, #1
 8003350:	0652      	lsls	r2, r2, #25
 8003352:	4311      	orrs	r1, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003358:	0912      	lsrs	r2, r2, #4
 800335a:	0452      	lsls	r2, r2, #17
 800335c:	430a      	orrs	r2, r1
 800335e:	4941      	ldr	r1, [pc, #260]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003360:	4313      	orrs	r3, r2
 8003362:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003364:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a3e      	ldr	r2, [pc, #248]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 800336a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003370:	4b3c      	ldr	r3, [pc, #240]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4a3b      	ldr	r2, [pc, #236]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800337c:	f7fd fd70 	bl	8000e60 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003384:	f7fd fd6c 	bl	8000e60 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e062      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003396:	4b33      	ldr	r3, [pc, #204]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033a2:	e05a      	b.n	800345a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e059      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a8:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d152      	bne.n	800345a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033b4:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a2a      	ldr	r2, [pc, #168]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 80033ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033c0:	4b28      	ldr	r3, [pc, #160]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a27      	ldr	r2, [pc, #156]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 80033c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033cc:	f7fd fd48 	bl	8000e60 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fd fd44 	bl	8000e60 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e03a      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e6:	4b1f      	ldr	r3, [pc, #124]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x734>
 80033f2:	e032      	b.n	800345a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d02d      	beq.n	8003456 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a19      	ldr	r2, [pc, #100]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003400:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003404:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003406:	4b17      	ldr	r3, [pc, #92]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d105      	bne.n	800341e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003412:	4b14      	ldr	r3, [pc, #80]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	4a13      	ldr	r2, [pc, #76]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003418:	f023 0303 	bic.w	r3, r3, #3
 800341c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800341e:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	4a10      	ldr	r2, [pc, #64]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 8003424:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342e:	f7fd fd17 	bl	8000e60 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003436:	f7fd fd13 	bl	8000e60 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e009      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_RCC_OscConfig+0x7c4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f0      	bne.n	8003436 <HAL_RCC_OscConfig+0x796>
 8003454:	e001      	b.n	800345a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3720      	adds	r7, #32
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000
 8003468:	f99d808c 	.word	0xf99d808c

0800346c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0c8      	b.n	8003612 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003480:	4b66      	ldr	r3, [pc, #408]	; (800361c <HAL_RCC_ClockConfig+0x1b0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d910      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_RCC_ClockConfig+0x1b0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 0207 	bic.w	r2, r3, #7
 8003496:	4961      	ldr	r1, [pc, #388]	; (800361c <HAL_RCC_ClockConfig+0x1b0>)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b5f      	ldr	r3, [pc, #380]	; (800361c <HAL_RCC_ClockConfig+0x1b0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0b0      	b.n	8003612 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d04c      	beq.n	8003556 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c4:	4b56      	ldr	r3, [pc, #344]	; (8003620 <HAL_RCC_ClockConfig+0x1b4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d121      	bne.n	8003514 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e09e      	b.n	8003612 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d107      	bne.n	80034ec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <HAL_RCC_ClockConfig+0x1b4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d115      	bne.n	8003514 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e092      	b.n	8003612 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034f4:	4b4a      	ldr	r3, [pc, #296]	; (8003620 <HAL_RCC_ClockConfig+0x1b4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d109      	bne.n	8003514 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e086      	b.n	8003612 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003504:	4b46      	ldr	r3, [pc, #280]	; (8003620 <HAL_RCC_ClockConfig+0x1b4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e07e      	b.n	8003612 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003514:	4b42      	ldr	r3, [pc, #264]	; (8003620 <HAL_RCC_ClockConfig+0x1b4>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 0203 	bic.w	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	493f      	ldr	r1, [pc, #252]	; (8003620 <HAL_RCC_ClockConfig+0x1b4>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003526:	f7fd fc9b 	bl	8000e60 <HAL_GetTick>
 800352a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352c:	e00a      	b.n	8003544 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800352e:	f7fd fc97 	bl	8000e60 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f241 3288 	movw	r2, #5000	; 0x1388
 800353c:	4293      	cmp	r3, r2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e066      	b.n	8003612 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003544:	4b36      	ldr	r3, [pc, #216]	; (8003620 <HAL_RCC_ClockConfig+0x1b4>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 020c 	and.w	r2, r3, #12
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	429a      	cmp	r2, r3
 8003554:	d1eb      	bne.n	800352e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003562:	4b2f      	ldr	r3, [pc, #188]	; (8003620 <HAL_RCC_ClockConfig+0x1b4>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	492c      	ldr	r1, [pc, #176]	; (8003620 <HAL_RCC_ClockConfig+0x1b4>)
 8003570:	4313      	orrs	r3, r2
 8003572:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003574:	4b29      	ldr	r3, [pc, #164]	; (800361c <HAL_RCC_ClockConfig+0x1b0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d210      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b26      	ldr	r3, [pc, #152]	; (800361c <HAL_RCC_ClockConfig+0x1b0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 0207 	bic.w	r2, r3, #7
 800358a:	4924      	ldr	r1, [pc, #144]	; (800361c <HAL_RCC_ClockConfig+0x1b0>)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b22      	ldr	r3, [pc, #136]	; (800361c <HAL_RCC_ClockConfig+0x1b0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e036      	b.n	8003612 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_RCC_ClockConfig+0x1b4>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4918      	ldr	r1, [pc, #96]	; (8003620 <HAL_RCC_ClockConfig+0x1b4>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ce:	4b14      	ldr	r3, [pc, #80]	; (8003620 <HAL_RCC_ClockConfig+0x1b4>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4910      	ldr	r1, [pc, #64]	; (8003620 <HAL_RCC_ClockConfig+0x1b4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035e2:	f000 f825 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035e6:	4601      	mov	r1, r0
 80035e8:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <HAL_RCC_ClockConfig+0x1b4>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	5cd3      	ldrb	r3, [r2, r3]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	fa21 f303 	lsr.w	r3, r1, r3
 80035fe:	4a0a      	ldr	r2, [pc, #40]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd fbda 	bl	8000dc0 <HAL_InitTick>
 800360c:	4603      	mov	r3, r0
 800360e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003610:	7afb      	ldrb	r3, [r7, #11]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40022000 	.word	0x40022000
 8003620:	40021000 	.word	0x40021000
 8003624:	080059e4 	.word	0x080059e4
 8003628:	20000000 	.word	0x20000000
 800362c:	20000004 	.word	0x20000004

08003630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363e:	4b3d      	ldr	r3, [pc, #244]	; (8003734 <HAL_RCC_GetSysClockFreq+0x104>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003648:	4b3a      	ldr	r3, [pc, #232]	; (8003734 <HAL_RCC_GetSysClockFreq+0x104>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x34>
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b0c      	cmp	r3, #12
 800365c:	d121      	bne.n	80036a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d11e      	bne.n	80036a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003664:	4b33      	ldr	r3, [pc, #204]	; (8003734 <HAL_RCC_GetSysClockFreq+0x104>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d107      	bne.n	8003680 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003670:	4b30      	ldr	r3, [pc, #192]	; (8003734 <HAL_RCC_GetSysClockFreq+0x104>)
 8003672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	e005      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003680:	4b2c      	ldr	r3, [pc, #176]	; (8003734 <HAL_RCC_GetSysClockFreq+0x104>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800368c:	4a2a      	ldr	r2, [pc, #168]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003694:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10d      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036a0:	e00a      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d102      	bne.n	80036ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_RCC_GetSysClockFreq+0x10c>)
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	e004      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036b4:	4b22      	ldr	r3, [pc, #136]	; (8003740 <HAL_RCC_GetSysClockFreq+0x110>)
 80036b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b0c      	cmp	r3, #12
 80036bc:	d133      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036be:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <HAL_RCC_GetSysClockFreq+0x104>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d002      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0xa4>
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d003      	beq.n	80036da <HAL_RCC_GetSysClockFreq+0xaa>
 80036d2:	e005      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_RCC_GetSysClockFreq+0x10c>)
 80036d6:	617b      	str	r3, [r7, #20]
      break;
 80036d8:	e005      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036da:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_RCC_GetSysClockFreq+0x110>)
 80036dc:	617b      	str	r3, [r7, #20]
      break;
 80036de:	e002      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	617b      	str	r3, [r7, #20]
      break;
 80036e4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e6:	4b13      	ldr	r3, [pc, #76]	; (8003734 <HAL_RCC_GetSysClockFreq+0x104>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	3301      	adds	r3, #1
 80036f2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <HAL_RCC_GetSysClockFreq+0x104>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	fb02 f203 	mul.w	r2, r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	fbb2 f3f3 	udiv	r3, r2, r3
 800370a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <HAL_RCC_GetSysClockFreq+0x104>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	0e5b      	lsrs	r3, r3, #25
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	3301      	adds	r3, #1
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003726:	69bb      	ldr	r3, [r7, #24]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3724      	adds	r7, #36	; 0x24
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40021000 	.word	0x40021000
 8003738:	080059fc 	.word	0x080059fc
 800373c:	00f42400 	.word	0x00f42400
 8003740:	007a1200 	.word	0x007a1200

08003744 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003748:	4b03      	ldr	r3, [pc, #12]	; (8003758 <HAL_RCC_GetHCLKFreq+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000000 	.word	0x20000000

0800375c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003760:	f7ff fff0 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003764:	4601      	mov	r1, r0
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4a04      	ldr	r2, [pc, #16]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003772:	5cd3      	ldrb	r3, [r2, r3]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	fa21 f303 	lsr.w	r3, r1, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40021000 	.word	0x40021000
 8003784:	080059f4 	.word	0x080059f4

08003788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800378c:	f7ff ffda 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003790:	4601      	mov	r1, r0
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	0adb      	lsrs	r3, r3, #11
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800379e:	5cd3      	ldrb	r3, [r2, r3]
 80037a0:	f003 031f 	and.w	r3, r3, #31
 80037a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000
 80037b0:	080059f4 	.word	0x080059f4

080037b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037c0:	4b2a      	ldr	r3, [pc, #168]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037cc:	f7ff fa04 	bl	8002bd8 <HAL_PWREx_GetVoltageRange>
 80037d0:	6178      	str	r0, [r7, #20]
 80037d2:	e014      	b.n	80037fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037d4:	4b25      	ldr	r3, [pc, #148]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	4a24      	ldr	r2, [pc, #144]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037de:	6593      	str	r3, [r2, #88]	; 0x58
 80037e0:	4b22      	ldr	r3, [pc, #136]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037ec:	f7ff f9f4 	bl	8002bd8 <HAL_PWREx_GetVoltageRange>
 80037f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037f2:	4b1e      	ldr	r3, [pc, #120]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	4a1d      	ldr	r2, [pc, #116]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003804:	d10b      	bne.n	800381e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b80      	cmp	r3, #128	; 0x80
 800380a:	d919      	bls.n	8003840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2ba0      	cmp	r3, #160	; 0xa0
 8003810:	d902      	bls.n	8003818 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003812:	2302      	movs	r3, #2
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	e013      	b.n	8003840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003818:	2301      	movs	r3, #1
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	e010      	b.n	8003840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b80      	cmp	r3, #128	; 0x80
 8003822:	d902      	bls.n	800382a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003824:	2303      	movs	r3, #3
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	e00a      	b.n	8003840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b80      	cmp	r3, #128	; 0x80
 800382e:	d102      	bne.n	8003836 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003830:	2302      	movs	r3, #2
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	e004      	b.n	8003840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b70      	cmp	r3, #112	; 0x70
 800383a:	d101      	bne.n	8003840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800383c:	2301      	movs	r3, #1
 800383e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 0207 	bic.w	r2, r3, #7
 8003848:	4909      	ldr	r1, [pc, #36]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003850:	4b07      	ldr	r3, [pc, #28]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	429a      	cmp	r2, r3
 800385c:	d001      	beq.n	8003862 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000
 8003870:	40022000 	.word	0x40022000

08003874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800387c:	2300      	movs	r3, #0
 800387e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003880:	2300      	movs	r3, #0
 8003882:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800388c:	2b00      	cmp	r3, #0
 800388e:	d03f      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003898:	d01c      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800389a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800389e:	d802      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00e      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80038a4:	e01f      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80038a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038aa:	d003      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80038ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038b0:	d01c      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x78>
 80038b2:	e018      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038b4:	4b85      	ldr	r3, [pc, #532]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4a84      	ldr	r2, [pc, #528]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038c0:	e015      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fab9 	bl	8003e40 <RCCEx_PLLSAI1_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038d2:	e00c      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3320      	adds	r3, #32
 80038d8:	2100      	movs	r1, #0
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fba0 	bl	8004020 <RCCEx_PLLSAI2_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038e4:	e003      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	74fb      	strb	r3, [r7, #19]
      break;
 80038ea:	e000      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80038ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ee:	7cfb      	ldrb	r3, [r7, #19]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10b      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038f4:	4b75      	ldr	r3, [pc, #468]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003902:	4972      	ldr	r1, [pc, #456]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800390a:	e001      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390c:	7cfb      	ldrb	r3, [r7, #19]
 800390e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d03f      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003924:	d01c      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003926:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800392a:	d802      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00e      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003930:	e01f      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003936:	d003      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003938:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800393c:	d01c      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800393e:	e018      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003940:	4b62      	ldr	r3, [pc, #392]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4a61      	ldr	r2, [pc, #388]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800394c:	e015      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fa73 	bl	8003e40 <RCCEx_PLLSAI1_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800395e:	e00c      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3320      	adds	r3, #32
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fb5a 	bl	8004020 <RCCEx_PLLSAI2_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003970:	e003      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	74fb      	strb	r3, [r7, #19]
      break;
 8003976:	e000      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800397a:	7cfb      	ldrb	r3, [r7, #19]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003980:	4b52      	ldr	r3, [pc, #328]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800398e:	494f      	ldr	r1, [pc, #316]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003996:	e001      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	7cfb      	ldrb	r3, [r7, #19]
 800399a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80a0 	beq.w	8003aea <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039aa:	2300      	movs	r3, #0
 80039ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039ae:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00d      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c4:	4b41      	ldr	r3, [pc, #260]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	4a40      	ldr	r2, [pc, #256]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ce:	6593      	str	r3, [r2, #88]	; 0x58
 80039d0:	4b3e      	ldr	r3, [pc, #248]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039dc:	2301      	movs	r3, #1
 80039de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e0:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a3a      	ldr	r2, [pc, #232]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80039e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ec:	f7fd fa38 	bl	8000e60 <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039f2:	e009      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f4:	f7fd fa34 	bl	8000e60 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d902      	bls.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	74fb      	strb	r3, [r7, #19]
        break;
 8003a06:	e005      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a08:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0ef      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d15c      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a1a:	4b2c      	ldr	r3, [pc, #176]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01f      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d019      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a38:	4b24      	ldr	r3, [pc, #144]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a44:	4b21      	ldr	r3, [pc, #132]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4a:	4a20      	ldr	r2, [pc, #128]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5a:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a64:	4a19      	ldr	r2, [pc, #100]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fd f9f3 	bl	8000e60 <HAL_GetTick>
 8003a7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a7c:	e00b      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fd f9ef 	bl	8000e60 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d902      	bls.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	74fb      	strb	r3, [r7, #19]
            break;
 8003a94:	e006      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a96:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ec      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aba:	4904      	ldr	r1, [pc, #16]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ac2:	e009      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	74bb      	strb	r3, [r7, #18]
 8003ac8:	e006      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ad8:	7c7b      	ldrb	r3, [r7, #17]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d105      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ade:	4b9e      	ldr	r3, [pc, #632]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	4a9d      	ldr	r2, [pc, #628]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003af6:	4b98      	ldr	r3, [pc, #608]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	f023 0203 	bic.w	r2, r3, #3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	4994      	ldr	r1, [pc, #592]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b18:	4b8f      	ldr	r3, [pc, #572]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f023 020c 	bic.w	r2, r3, #12
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	498c      	ldr	r1, [pc, #560]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b3a:	4b87      	ldr	r3, [pc, #540]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	4983      	ldr	r1, [pc, #524]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b5c:	4b7e      	ldr	r3, [pc, #504]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	497b      	ldr	r1, [pc, #492]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b7e:	4b76      	ldr	r3, [pc, #472]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8c:	4972      	ldr	r1, [pc, #456]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ba0:	4b6d      	ldr	r3, [pc, #436]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bae:	496a      	ldr	r1, [pc, #424]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bc2:	4b65      	ldr	r3, [pc, #404]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd0:	4961      	ldr	r1, [pc, #388]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003be4:	4b5c      	ldr	r3, [pc, #368]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf2:	4959      	ldr	r1, [pc, #356]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c06:	4b54      	ldr	r3, [pc, #336]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c14:	4950      	ldr	r1, [pc, #320]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c28:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	4948      	ldr	r1, [pc, #288]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c4a:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	493f      	ldr	r1, [pc, #252]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d028      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c6c:	4b3a      	ldr	r3, [pc, #232]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7a:	4937      	ldr	r1, [pc, #220]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c8a:	d106      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c8c:	4b32      	ldr	r3, [pc, #200]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4a31      	ldr	r2, [pc, #196]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c96:	60d3      	str	r3, [r2, #12]
 8003c98:	e011      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ca2:	d10c      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f8c8 	bl	8003e40 <RCCEx_PLLSAI1_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003cba:	7cfb      	ldrb	r3, [r7, #19]
 8003cbc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d028      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cca:	4b23      	ldr	r3, [pc, #140]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd8:	491f      	ldr	r1, [pc, #124]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cea:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	4a1a      	ldr	r2, [pc, #104]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cf4:	60d3      	str	r3, [r2, #12]
 8003cf6:	e011      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	2101      	movs	r1, #1
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 f899 	bl	8003e40 <RCCEx_PLLSAI1_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d12:	7cfb      	ldrb	r3, [r7, #19]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d02b      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d36:	4908      	ldr	r1, [pc, #32]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d46:	d109      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a02      	ldr	r2, [pc, #8]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d52:	60d3      	str	r3, [r2, #12]
 8003d54:	e014      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 f867 	bl	8003e40 <RCCEx_PLLSAI1_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d76:	7cfb      	ldrb	r3, [r7, #19]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d02f      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d8c:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d9a:	4928      	ldr	r1, [pc, #160]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003daa:	d10d      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	2102      	movs	r1, #2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f844 	bl	8003e40 <RCCEx_PLLSAI1_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d014      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003dc2:	7cfb      	ldrb	r3, [r7, #19]
 8003dc4:	74bb      	strb	r3, [r7, #18]
 8003dc6:	e011      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3320      	adds	r3, #32
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 f921 	bl	8004020 <RCCEx_PLLSAI2_Config>
 8003dde:	4603      	mov	r3, r0
 8003de0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003de2:	7cfb      	ldrb	r3, [r7, #19]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003df8:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e06:	490d      	ldr	r1, [pc, #52]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e1a:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e2a:	4904      	ldr	r1, [pc, #16]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e32:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40021000 	.word	0x40021000

08003e40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e4e:	4b73      	ldr	r3, [pc, #460]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d018      	beq.n	8003e8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e5a:	4b70      	ldr	r3, [pc, #448]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0203 	and.w	r2, r3, #3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d10d      	bne.n	8003e86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
       ||
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e72:	4b6a      	ldr	r3, [pc, #424]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
       ||
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d044      	beq.n	8003f10 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
 8003e8a:	e041      	b.n	8003f10 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d00c      	beq.n	8003eae <RCCEx_PLLSAI1_Config+0x6e>
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d013      	beq.n	8003ec0 <RCCEx_PLLSAI1_Config+0x80>
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d120      	bne.n	8003ede <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e9c:	4b5f      	ldr	r3, [pc, #380]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d11d      	bne.n	8003ee4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eac:	e01a      	b.n	8003ee4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003eae:	4b5b      	ldr	r3, [pc, #364]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d116      	bne.n	8003ee8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ebe:	e013      	b.n	8003ee8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ec0:	4b56      	ldr	r3, [pc, #344]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10f      	bne.n	8003eec <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ecc:	4b53      	ldr	r3, [pc, #332]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003edc:	e006      	b.n	8003eec <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee2:	e004      	b.n	8003eee <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ee4:	bf00      	nop
 8003ee6:	e002      	b.n	8003eee <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ee8:	bf00      	nop
 8003eea:	e000      	b.n	8003eee <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003eec:	bf00      	nop
    }

    if(status == HAL_OK)
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10d      	bne.n	8003f10 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ef4:	4b49      	ldr	r3, [pc, #292]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	4944      	ldr	r1, [pc, #272]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d17d      	bne.n	8004012 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f16:	4b41      	ldr	r3, [pc, #260]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a40      	ldr	r2, [pc, #256]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f22:	f7fc ff9d 	bl	8000e60 <HAL_GetTick>
 8003f26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f28:	e009      	b.n	8003f3e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f2a:	f7fc ff99 	bl	8000e60 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d902      	bls.n	8003f3e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	73fb      	strb	r3, [r7, #15]
        break;
 8003f3c:	e005      	b.n	8003f4a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f3e:	4b37      	ldr	r3, [pc, #220]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ef      	bne.n	8003f2a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d160      	bne.n	8004012 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d111      	bne.n	8003f7a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f56:	4b31      	ldr	r3, [pc, #196]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6892      	ldr	r2, [r2, #8]
 8003f66:	0211      	lsls	r1, r2, #8
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68d2      	ldr	r2, [r2, #12]
 8003f6c:	0912      	lsrs	r2, r2, #4
 8003f6e:	0452      	lsls	r2, r2, #17
 8003f70:	430a      	orrs	r2, r1
 8003f72:	492a      	ldr	r1, [pc, #168]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	610b      	str	r3, [r1, #16]
 8003f78:	e027      	b.n	8003fca <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d112      	bne.n	8003fa6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f80:	4b26      	ldr	r3, [pc, #152]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6892      	ldr	r2, [r2, #8]
 8003f90:	0211      	lsls	r1, r2, #8
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6912      	ldr	r2, [r2, #16]
 8003f96:	0852      	lsrs	r2, r2, #1
 8003f98:	3a01      	subs	r2, #1
 8003f9a:	0552      	lsls	r2, r2, #21
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	491f      	ldr	r1, [pc, #124]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	610b      	str	r3, [r1, #16]
 8003fa4:	e011      	b.n	8003fca <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6892      	ldr	r2, [r2, #8]
 8003fb6:	0211      	lsls	r1, r2, #8
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6952      	ldr	r2, [r2, #20]
 8003fbc:	0852      	lsrs	r2, r2, #1
 8003fbe:	3a01      	subs	r2, #1
 8003fc0:	0652      	lsls	r2, r2, #25
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	4915      	ldr	r1, [pc, #84]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fca:	4b14      	ldr	r3, [pc, #80]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a13      	ldr	r2, [pc, #76]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fd4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd6:	f7fc ff43 	bl	8000e60 <HAL_GetTick>
 8003fda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fdc:	e009      	b.n	8003ff2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fde:	f7fc ff3f 	bl	8000e60 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d902      	bls.n	8003ff2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	73fb      	strb	r3, [r7, #15]
          break;
 8003ff0:	e005      	b.n	8003ffe <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0ef      	beq.n	8003fde <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d106      	bne.n	8004012 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	4903      	ldr	r1, [pc, #12]	; (800401c <RCCEx_PLLSAI1_Config+0x1dc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004012:	7bfb      	ldrb	r3, [r7, #15]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000

08004020 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800402e:	4b68      	ldr	r3, [pc, #416]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d018      	beq.n	800406c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800403a:	4b65      	ldr	r3, [pc, #404]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0203 	and.w	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d10d      	bne.n	8004066 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
       ||
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004052:	4b5f      	ldr	r3, [pc, #380]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
       ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d044      	beq.n	80040f0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
 800406a:	e041      	b.n	80040f0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b02      	cmp	r3, #2
 8004072:	d00c      	beq.n	800408e <RCCEx_PLLSAI2_Config+0x6e>
 8004074:	2b03      	cmp	r3, #3
 8004076:	d013      	beq.n	80040a0 <RCCEx_PLLSAI2_Config+0x80>
 8004078:	2b01      	cmp	r3, #1
 800407a:	d120      	bne.n	80040be <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800407c:	4b54      	ldr	r3, [pc, #336]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d11d      	bne.n	80040c4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800408c:	e01a      	b.n	80040c4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800408e:	4b50      	ldr	r3, [pc, #320]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004096:	2b00      	cmp	r3, #0
 8004098:	d116      	bne.n	80040c8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800409e:	e013      	b.n	80040c8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040a0:	4b4b      	ldr	r3, [pc, #300]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10f      	bne.n	80040cc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040ac:	4b48      	ldr	r3, [pc, #288]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d109      	bne.n	80040cc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040bc:	e006      	b.n	80040cc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
      break;
 80040c2:	e004      	b.n	80040ce <RCCEx_PLLSAI2_Config+0xae>
      break;
 80040c4:	bf00      	nop
 80040c6:	e002      	b.n	80040ce <RCCEx_PLLSAI2_Config+0xae>
      break;
 80040c8:	bf00      	nop
 80040ca:	e000      	b.n	80040ce <RCCEx_PLLSAI2_Config+0xae>
      break;
 80040cc:	bf00      	nop
    }

    if(status == HAL_OK)
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10d      	bne.n	80040f0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040d4:	4b3e      	ldr	r3, [pc, #248]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6819      	ldr	r1, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	430b      	orrs	r3, r1
 80040ea:	4939      	ldr	r1, [pc, #228]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d167      	bne.n	80041c6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040f6:	4b36      	ldr	r3, [pc, #216]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a35      	ldr	r2, [pc, #212]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004102:	f7fc fead 	bl	8000e60 <HAL_GetTick>
 8004106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004108:	e009      	b.n	800411e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800410a:	f7fc fea9 	bl	8000e60 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d902      	bls.n	800411e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	73fb      	strb	r3, [r7, #15]
        break;
 800411c:	e005      	b.n	800412a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800411e:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1ef      	bne.n	800410a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d14a      	bne.n	80041c6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d111      	bne.n	800415a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004136:	4b26      	ldr	r3, [pc, #152]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800413e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6892      	ldr	r2, [r2, #8]
 8004146:	0211      	lsls	r1, r2, #8
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68d2      	ldr	r2, [r2, #12]
 800414c:	0912      	lsrs	r2, r2, #4
 800414e:	0452      	lsls	r2, r2, #17
 8004150:	430a      	orrs	r2, r1
 8004152:	491f      	ldr	r1, [pc, #124]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004154:	4313      	orrs	r3, r2
 8004156:	614b      	str	r3, [r1, #20]
 8004158:	e011      	b.n	800417e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800415a:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004162:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6892      	ldr	r2, [r2, #8]
 800416a:	0211      	lsls	r1, r2, #8
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6912      	ldr	r2, [r2, #16]
 8004170:	0852      	lsrs	r2, r2, #1
 8004172:	3a01      	subs	r2, #1
 8004174:	0652      	lsls	r2, r2, #25
 8004176:	430a      	orrs	r2, r1
 8004178:	4915      	ldr	r1, [pc, #84]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800417a:	4313      	orrs	r3, r2
 800417c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800417e:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a13      	ldr	r2, [pc, #76]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418a:	f7fc fe69 	bl	8000e60 <HAL_GetTick>
 800418e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004190:	e009      	b.n	80041a6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004192:	f7fc fe65 	bl	8000e60 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d902      	bls.n	80041a6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	73fb      	strb	r3, [r7, #15]
          break;
 80041a4:	e005      	b.n	80041b2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0ef      	beq.n	8004192 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d106      	bne.n	80041c6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041ba:	695a      	ldr	r2, [r3, #20]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	4903      	ldr	r1, [pc, #12]	; (80041d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40021000 	.word	0x40021000

080041d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e040      	b.n	8004268 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fc fc60 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	; 0x24
 8004200:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f8c0 	bl	8004398 <UART_SetConfig>
 8004218:	4603      	mov	r3, r0
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e022      	b.n	8004268 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fb3e 	bl	80048ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800423e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800424e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fbc5 	bl	80049f0 <UART_CheckIdleState>
 8004266:	4603      	mov	r3, r0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004284:	2b20      	cmp	r3, #32
 8004286:	f040 8081 	bne.w	800438c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_UART_Transmit+0x26>
 8004290:	88fb      	ldrh	r3, [r7, #6]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e079      	b.n	800438e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_UART_Transmit+0x38>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e072      	b.n	800438e <HAL_UART_Transmit+0x11e>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2221      	movs	r2, #33	; 0x21
 80042ba:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80042bc:	f7fc fdd0 	bl	8000e60 <HAL_GetTick>
 80042c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	88fa      	ldrh	r2, [r7, #6]
 80042c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	88fa      	ldrh	r2, [r7, #6]
 80042ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	d108      	bne.n	80042ee <HAL_UART_Transmit+0x7e>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d104      	bne.n	80042ee <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	e003      	b.n	80042f6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80042fe:	e02d      	b.n	800435c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2200      	movs	r2, #0
 8004308:	2180      	movs	r1, #128	; 0x80
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 fbb5 	bl	8004a7a <UART_WaitOnFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e039      	b.n	800438e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10b      	bne.n	8004338 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	881a      	ldrh	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800432c:	b292      	uxth	r2, r2
 800432e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	3302      	adds	r3, #2
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	e008      	b.n	800434a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	781a      	ldrb	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	b292      	uxth	r2, r2
 8004342:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	3301      	adds	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1cb      	bne.n	8004300 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2200      	movs	r2, #0
 8004370:	2140      	movs	r1, #64	; 0x40
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fb81 	bl	8004a7a <UART_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e005      	b.n	800438e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	e000      	b.n	800438e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800438c:	2302      	movs	r3, #2
  }
}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004398:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800439c:	b088      	sub	sp, #32
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4bac      	ldr	r3, [pc, #688]	; (8004678 <UART_SetConfig+0x2e0>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	69f9      	ldr	r1, [r7, #28]
 80043ce:	430b      	orrs	r3, r1
 80043d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4aa2      	ldr	r2, [pc, #648]	; (800467c <UART_SetConfig+0x2e4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d004      	beq.n	8004402 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	430a      	orrs	r2, r1
 8004414:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a99      	ldr	r2, [pc, #612]	; (8004680 <UART_SetConfig+0x2e8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d121      	bne.n	8004464 <UART_SetConfig+0xcc>
 8004420:	4b98      	ldr	r3, [pc, #608]	; (8004684 <UART_SetConfig+0x2ec>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b03      	cmp	r3, #3
 800442c:	d816      	bhi.n	800445c <UART_SetConfig+0xc4>
 800442e:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <UART_SetConfig+0x9c>)
 8004430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004434:	08004445 	.word	0x08004445
 8004438:	08004451 	.word	0x08004451
 800443c:	0800444b 	.word	0x0800444b
 8004440:	08004457 	.word	0x08004457
 8004444:	2301      	movs	r3, #1
 8004446:	76fb      	strb	r3, [r7, #27]
 8004448:	e0e8      	b.n	800461c <UART_SetConfig+0x284>
 800444a:	2302      	movs	r3, #2
 800444c:	76fb      	strb	r3, [r7, #27]
 800444e:	e0e5      	b.n	800461c <UART_SetConfig+0x284>
 8004450:	2304      	movs	r3, #4
 8004452:	76fb      	strb	r3, [r7, #27]
 8004454:	e0e2      	b.n	800461c <UART_SetConfig+0x284>
 8004456:	2308      	movs	r3, #8
 8004458:	76fb      	strb	r3, [r7, #27]
 800445a:	e0df      	b.n	800461c <UART_SetConfig+0x284>
 800445c:	2310      	movs	r3, #16
 800445e:	76fb      	strb	r3, [r7, #27]
 8004460:	bf00      	nop
 8004462:	e0db      	b.n	800461c <UART_SetConfig+0x284>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a87      	ldr	r2, [pc, #540]	; (8004688 <UART_SetConfig+0x2f0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d134      	bne.n	80044d8 <UART_SetConfig+0x140>
 800446e:	4b85      	ldr	r3, [pc, #532]	; (8004684 <UART_SetConfig+0x2ec>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b0c      	cmp	r3, #12
 800447a:	d829      	bhi.n	80044d0 <UART_SetConfig+0x138>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <UART_SetConfig+0xec>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	080044b9 	.word	0x080044b9
 8004488:	080044d1 	.word	0x080044d1
 800448c:	080044d1 	.word	0x080044d1
 8004490:	080044d1 	.word	0x080044d1
 8004494:	080044c5 	.word	0x080044c5
 8004498:	080044d1 	.word	0x080044d1
 800449c:	080044d1 	.word	0x080044d1
 80044a0:	080044d1 	.word	0x080044d1
 80044a4:	080044bf 	.word	0x080044bf
 80044a8:	080044d1 	.word	0x080044d1
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044d1 	.word	0x080044d1
 80044b4:	080044cb 	.word	0x080044cb
 80044b8:	2300      	movs	r3, #0
 80044ba:	76fb      	strb	r3, [r7, #27]
 80044bc:	e0ae      	b.n	800461c <UART_SetConfig+0x284>
 80044be:	2302      	movs	r3, #2
 80044c0:	76fb      	strb	r3, [r7, #27]
 80044c2:	e0ab      	b.n	800461c <UART_SetConfig+0x284>
 80044c4:	2304      	movs	r3, #4
 80044c6:	76fb      	strb	r3, [r7, #27]
 80044c8:	e0a8      	b.n	800461c <UART_SetConfig+0x284>
 80044ca:	2308      	movs	r3, #8
 80044cc:	76fb      	strb	r3, [r7, #27]
 80044ce:	e0a5      	b.n	800461c <UART_SetConfig+0x284>
 80044d0:	2310      	movs	r3, #16
 80044d2:	76fb      	strb	r3, [r7, #27]
 80044d4:	bf00      	nop
 80044d6:	e0a1      	b.n	800461c <UART_SetConfig+0x284>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a6b      	ldr	r2, [pc, #428]	; (800468c <UART_SetConfig+0x2f4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d120      	bne.n	8004524 <UART_SetConfig+0x18c>
 80044e2:	4b68      	ldr	r3, [pc, #416]	; (8004684 <UART_SetConfig+0x2ec>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d00f      	beq.n	8004510 <UART_SetConfig+0x178>
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d802      	bhi.n	80044fa <UART_SetConfig+0x162>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <UART_SetConfig+0x16c>
 80044f8:	e010      	b.n	800451c <UART_SetConfig+0x184>
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d005      	beq.n	800450a <UART_SetConfig+0x172>
 80044fe:	2b30      	cmp	r3, #48	; 0x30
 8004500:	d009      	beq.n	8004516 <UART_SetConfig+0x17e>
 8004502:	e00b      	b.n	800451c <UART_SetConfig+0x184>
 8004504:	2300      	movs	r3, #0
 8004506:	76fb      	strb	r3, [r7, #27]
 8004508:	e088      	b.n	800461c <UART_SetConfig+0x284>
 800450a:	2302      	movs	r3, #2
 800450c:	76fb      	strb	r3, [r7, #27]
 800450e:	e085      	b.n	800461c <UART_SetConfig+0x284>
 8004510:	2304      	movs	r3, #4
 8004512:	76fb      	strb	r3, [r7, #27]
 8004514:	e082      	b.n	800461c <UART_SetConfig+0x284>
 8004516:	2308      	movs	r3, #8
 8004518:	76fb      	strb	r3, [r7, #27]
 800451a:	e07f      	b.n	800461c <UART_SetConfig+0x284>
 800451c:	2310      	movs	r3, #16
 800451e:	76fb      	strb	r3, [r7, #27]
 8004520:	bf00      	nop
 8004522:	e07b      	b.n	800461c <UART_SetConfig+0x284>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a59      	ldr	r2, [pc, #356]	; (8004690 <UART_SetConfig+0x2f8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d120      	bne.n	8004570 <UART_SetConfig+0x1d8>
 800452e:	4b55      	ldr	r3, [pc, #340]	; (8004684 <UART_SetConfig+0x2ec>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d00f      	beq.n	800455c <UART_SetConfig+0x1c4>
 800453c:	2b40      	cmp	r3, #64	; 0x40
 800453e:	d802      	bhi.n	8004546 <UART_SetConfig+0x1ae>
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <UART_SetConfig+0x1b8>
 8004544:	e010      	b.n	8004568 <UART_SetConfig+0x1d0>
 8004546:	2b80      	cmp	r3, #128	; 0x80
 8004548:	d005      	beq.n	8004556 <UART_SetConfig+0x1be>
 800454a:	2bc0      	cmp	r3, #192	; 0xc0
 800454c:	d009      	beq.n	8004562 <UART_SetConfig+0x1ca>
 800454e:	e00b      	b.n	8004568 <UART_SetConfig+0x1d0>
 8004550:	2300      	movs	r3, #0
 8004552:	76fb      	strb	r3, [r7, #27]
 8004554:	e062      	b.n	800461c <UART_SetConfig+0x284>
 8004556:	2302      	movs	r3, #2
 8004558:	76fb      	strb	r3, [r7, #27]
 800455a:	e05f      	b.n	800461c <UART_SetConfig+0x284>
 800455c:	2304      	movs	r3, #4
 800455e:	76fb      	strb	r3, [r7, #27]
 8004560:	e05c      	b.n	800461c <UART_SetConfig+0x284>
 8004562:	2308      	movs	r3, #8
 8004564:	76fb      	strb	r3, [r7, #27]
 8004566:	e059      	b.n	800461c <UART_SetConfig+0x284>
 8004568:	2310      	movs	r3, #16
 800456a:	76fb      	strb	r3, [r7, #27]
 800456c:	bf00      	nop
 800456e:	e055      	b.n	800461c <UART_SetConfig+0x284>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a47      	ldr	r2, [pc, #284]	; (8004694 <UART_SetConfig+0x2fc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d124      	bne.n	80045c4 <UART_SetConfig+0x22c>
 800457a:	4b42      	ldr	r3, [pc, #264]	; (8004684 <UART_SetConfig+0x2ec>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004588:	d012      	beq.n	80045b0 <UART_SetConfig+0x218>
 800458a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458e:	d802      	bhi.n	8004596 <UART_SetConfig+0x1fe>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <UART_SetConfig+0x20c>
 8004594:	e012      	b.n	80045bc <UART_SetConfig+0x224>
 8004596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800459a:	d006      	beq.n	80045aa <UART_SetConfig+0x212>
 800459c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a0:	d009      	beq.n	80045b6 <UART_SetConfig+0x21e>
 80045a2:	e00b      	b.n	80045bc <UART_SetConfig+0x224>
 80045a4:	2300      	movs	r3, #0
 80045a6:	76fb      	strb	r3, [r7, #27]
 80045a8:	e038      	b.n	800461c <UART_SetConfig+0x284>
 80045aa:	2302      	movs	r3, #2
 80045ac:	76fb      	strb	r3, [r7, #27]
 80045ae:	e035      	b.n	800461c <UART_SetConfig+0x284>
 80045b0:	2304      	movs	r3, #4
 80045b2:	76fb      	strb	r3, [r7, #27]
 80045b4:	e032      	b.n	800461c <UART_SetConfig+0x284>
 80045b6:	2308      	movs	r3, #8
 80045b8:	76fb      	strb	r3, [r7, #27]
 80045ba:	e02f      	b.n	800461c <UART_SetConfig+0x284>
 80045bc:	2310      	movs	r3, #16
 80045be:	76fb      	strb	r3, [r7, #27]
 80045c0:	bf00      	nop
 80045c2:	e02b      	b.n	800461c <UART_SetConfig+0x284>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a2c      	ldr	r2, [pc, #176]	; (800467c <UART_SetConfig+0x2e4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d124      	bne.n	8004618 <UART_SetConfig+0x280>
 80045ce:	4b2d      	ldr	r3, [pc, #180]	; (8004684 <UART_SetConfig+0x2ec>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045dc:	d012      	beq.n	8004604 <UART_SetConfig+0x26c>
 80045de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e2:	d802      	bhi.n	80045ea <UART_SetConfig+0x252>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d007      	beq.n	80045f8 <UART_SetConfig+0x260>
 80045e8:	e012      	b.n	8004610 <UART_SetConfig+0x278>
 80045ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ee:	d006      	beq.n	80045fe <UART_SetConfig+0x266>
 80045f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045f4:	d009      	beq.n	800460a <UART_SetConfig+0x272>
 80045f6:	e00b      	b.n	8004610 <UART_SetConfig+0x278>
 80045f8:	2300      	movs	r3, #0
 80045fa:	76fb      	strb	r3, [r7, #27]
 80045fc:	e00e      	b.n	800461c <UART_SetConfig+0x284>
 80045fe:	2302      	movs	r3, #2
 8004600:	76fb      	strb	r3, [r7, #27]
 8004602:	e00b      	b.n	800461c <UART_SetConfig+0x284>
 8004604:	2304      	movs	r3, #4
 8004606:	76fb      	strb	r3, [r7, #27]
 8004608:	e008      	b.n	800461c <UART_SetConfig+0x284>
 800460a:	2308      	movs	r3, #8
 800460c:	76fb      	strb	r3, [r7, #27]
 800460e:	e005      	b.n	800461c <UART_SetConfig+0x284>
 8004610:	2310      	movs	r3, #16
 8004612:	76fb      	strb	r3, [r7, #27]
 8004614:	bf00      	nop
 8004616:	e001      	b.n	800461c <UART_SetConfig+0x284>
 8004618:	2310      	movs	r3, #16
 800461a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a16      	ldr	r2, [pc, #88]	; (800467c <UART_SetConfig+0x2e4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	f040 8087 	bne.w	8004736 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004628:	7efb      	ldrb	r3, [r7, #27]
 800462a:	2b08      	cmp	r3, #8
 800462c:	d836      	bhi.n	800469c <UART_SetConfig+0x304>
 800462e:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <UART_SetConfig+0x29c>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	08004659 	.word	0x08004659
 8004638:	0800469d 	.word	0x0800469d
 800463c:	08004661 	.word	0x08004661
 8004640:	0800469d 	.word	0x0800469d
 8004644:	08004667 	.word	0x08004667
 8004648:	0800469d 	.word	0x0800469d
 800464c:	0800469d 	.word	0x0800469d
 8004650:	0800469d 	.word	0x0800469d
 8004654:	0800466f 	.word	0x0800466f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004658:	f7ff f880 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 800465c:	6178      	str	r0, [r7, #20]
        break;
 800465e:	e022      	b.n	80046a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004660:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <UART_SetConfig+0x300>)
 8004662:	617b      	str	r3, [r7, #20]
        break;
 8004664:	e01f      	b.n	80046a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004666:	f7fe ffe3 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 800466a:	6178      	str	r0, [r7, #20]
        break;
 800466c:	e01b      	b.n	80046a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800466e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004672:	617b      	str	r3, [r7, #20]
        break;
 8004674:	e017      	b.n	80046a6 <UART_SetConfig+0x30e>
 8004676:	bf00      	nop
 8004678:	efff69f3 	.word	0xefff69f3
 800467c:	40008000 	.word	0x40008000
 8004680:	40013800 	.word	0x40013800
 8004684:	40021000 	.word	0x40021000
 8004688:	40004400 	.word	0x40004400
 800468c:	40004800 	.word	0x40004800
 8004690:	40004c00 	.word	0x40004c00
 8004694:	40005000 	.word	0x40005000
 8004698:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	76bb      	strb	r3, [r7, #26]
        break;
 80046a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80f1 	beq.w	8004890 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	4413      	add	r3, r2
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d305      	bcc.n	80046ca <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d902      	bls.n	80046d0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	76bb      	strb	r3, [r7, #26]
 80046ce:	e0df      	b.n	8004890 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	4619      	mov	r1, r3
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	f04f 0400 	mov.w	r4, #0
 80046e0:	0214      	lsls	r4, r2, #8
 80046e2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80046e6:	020b      	lsls	r3, r1, #8
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6852      	ldr	r2, [r2, #4]
 80046ec:	0852      	lsrs	r2, r2, #1
 80046ee:	4611      	mov	r1, r2
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	eb13 0b01 	adds.w	fp, r3, r1
 80046f8:	eb44 0c02 	adc.w	ip, r4, r2
 80046fc:	4658      	mov	r0, fp
 80046fe:	4661      	mov	r1, ip
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f04f 0400 	mov.w	r4, #0
 8004708:	461a      	mov	r2, r3
 800470a:	4623      	mov	r3, r4
 800470c:	f7fb fdb0 	bl	8000270 <__aeabi_uldivmod>
 8004710:	4603      	mov	r3, r0
 8004712:	460c      	mov	r4, r1
 8004714:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471c:	d308      	bcc.n	8004730 <UART_SetConfig+0x398>
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004724:	d204      	bcs.n	8004730 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	60da      	str	r2, [r3, #12]
 800472e:	e0af      	b.n	8004890 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	76bb      	strb	r3, [r7, #26]
 8004734:	e0ac      	b.n	8004890 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473e:	d15b      	bne.n	80047f8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004740:	7efb      	ldrb	r3, [r7, #27]
 8004742:	2b08      	cmp	r3, #8
 8004744:	d827      	bhi.n	8004796 <UART_SetConfig+0x3fe>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0x3b4>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	08004771 	.word	0x08004771
 8004750:	08004779 	.word	0x08004779
 8004754:	08004781 	.word	0x08004781
 8004758:	08004797 	.word	0x08004797
 800475c:	08004787 	.word	0x08004787
 8004760:	08004797 	.word	0x08004797
 8004764:	08004797 	.word	0x08004797
 8004768:	08004797 	.word	0x08004797
 800476c:	0800478f 	.word	0x0800478f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004770:	f7fe fff4 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8004774:	6178      	str	r0, [r7, #20]
        break;
 8004776:	e013      	b.n	80047a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7ff f806 	bl	8003788 <HAL_RCC_GetPCLK2Freq>
 800477c:	6178      	str	r0, [r7, #20]
        break;
 800477e:	e00f      	b.n	80047a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004780:	4b49      	ldr	r3, [pc, #292]	; (80048a8 <UART_SetConfig+0x510>)
 8004782:	617b      	str	r3, [r7, #20]
        break;
 8004784:	e00c      	b.n	80047a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004786:	f7fe ff53 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 800478a:	6178      	str	r0, [r7, #20]
        break;
 800478c:	e008      	b.n	80047a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004792:	617b      	str	r3, [r7, #20]
        break;
 8004794:	e004      	b.n	80047a0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	76bb      	strb	r3, [r7, #26]
        break;
 800479e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d074      	beq.n	8004890 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	005a      	lsls	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	085b      	lsrs	r3, r3, #1
 80047b0:	441a      	add	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b0f      	cmp	r3, #15
 80047c2:	d916      	bls.n	80047f2 <UART_SetConfig+0x45a>
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ca:	d212      	bcs.n	80047f2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f023 030f 	bic.w	r3, r3, #15
 80047d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	89fb      	ldrh	r3, [r7, #14]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	89fa      	ldrh	r2, [r7, #14]
 80047ee:	60da      	str	r2, [r3, #12]
 80047f0:	e04e      	b.n	8004890 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	76bb      	strb	r3, [r7, #26]
 80047f6:	e04b      	b.n	8004890 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047f8:	7efb      	ldrb	r3, [r7, #27]
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d827      	bhi.n	800484e <UART_SetConfig+0x4b6>
 80047fe:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <UART_SetConfig+0x46c>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	08004829 	.word	0x08004829
 8004808:	08004831 	.word	0x08004831
 800480c:	08004839 	.word	0x08004839
 8004810:	0800484f 	.word	0x0800484f
 8004814:	0800483f 	.word	0x0800483f
 8004818:	0800484f 	.word	0x0800484f
 800481c:	0800484f 	.word	0x0800484f
 8004820:	0800484f 	.word	0x0800484f
 8004824:	08004847 	.word	0x08004847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004828:	f7fe ff98 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 800482c:	6178      	str	r0, [r7, #20]
        break;
 800482e:	e013      	b.n	8004858 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004830:	f7fe ffaa 	bl	8003788 <HAL_RCC_GetPCLK2Freq>
 8004834:	6178      	str	r0, [r7, #20]
        break;
 8004836:	e00f      	b.n	8004858 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004838:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <UART_SetConfig+0x510>)
 800483a:	617b      	str	r3, [r7, #20]
        break;
 800483c:	e00c      	b.n	8004858 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800483e:	f7fe fef7 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8004842:	6178      	str	r0, [r7, #20]
        break;
 8004844:	e008      	b.n	8004858 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484a:	617b      	str	r3, [r7, #20]
        break;
 800484c:	e004      	b.n	8004858 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	76bb      	strb	r3, [r7, #26]
        break;
 8004856:	bf00      	nop
    }

    if (pclk != 0U)
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d018      	beq.n	8004890 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	085a      	lsrs	r2, r3, #1
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	441a      	add	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	b29b      	uxth	r3, r3
 8004872:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b0f      	cmp	r3, #15
 8004878:	d908      	bls.n	800488c <UART_SetConfig+0x4f4>
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004880:	d204      	bcs.n	800488c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	60da      	str	r2, [r3, #12]
 800488a:	e001      	b.n	8004890 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800489c:	7ebb      	ldrb	r3, [r7, #26]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3720      	adds	r7, #32
 80048a2:	46bd      	mov	sp, r7
 80048a4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80048a8:	00f42400 	.word	0x00f42400

080048ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01a      	beq.n	80049c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049aa:	d10a      	bne.n	80049c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  }
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80049fe:	f7fc fa2f 	bl	8000e60 <HAL_GetTick>
 8004a02:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d10e      	bne.n	8004a30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f82a 	bl	8004a7a <UART_WaitOnFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e020      	b.n	8004a72 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d10e      	bne.n	8004a5c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f814 	bl	8004a7a <UART_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e00a      	b.n	8004a72 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	603b      	str	r3, [r7, #0]
 8004a86:	4613      	mov	r3, r2
 8004a88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a8a:	e05d      	b.n	8004b48 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d059      	beq.n	8004b48 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a94:	f7fc f9e4 	bl	8000e60 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d302      	bcc.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x30>
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d11b      	bne.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ab8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2220      	movs	r2, #32
 8004ace:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e042      	b.n	8004b68 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d02b      	beq.n	8004b48 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004afe:	d123      	bne.n	8004b48 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b18:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e00f      	b.n	8004b68 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69da      	ldr	r2, [r3, #28]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	4013      	ands	r3, r2
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	bf0c      	ite	eq
 8004b58:	2301      	moveq	r3, #1
 8004b5a:	2300      	movne	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d092      	beq.n	8004a8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <__errno>:
 8004b70:	4b01      	ldr	r3, [pc, #4]	; (8004b78 <__errno+0x8>)
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	2000000c 	.word	0x2000000c

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	4e0d      	ldr	r6, [pc, #52]	; (8004bb4 <__libc_init_array+0x38>)
 8004b80:	4c0d      	ldr	r4, [pc, #52]	; (8004bb8 <__libc_init_array+0x3c>)
 8004b82:	1ba4      	subs	r4, r4, r6
 8004b84:	10a4      	asrs	r4, r4, #2
 8004b86:	2500      	movs	r5, #0
 8004b88:	42a5      	cmp	r5, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	4e0b      	ldr	r6, [pc, #44]	; (8004bbc <__libc_init_array+0x40>)
 8004b8e:	4c0c      	ldr	r4, [pc, #48]	; (8004bc0 <__libc_init_array+0x44>)
 8004b90:	f000 ff04 	bl	800599c <_init>
 8004b94:	1ba4      	subs	r4, r4, r6
 8004b96:	10a4      	asrs	r4, r4, #2
 8004b98:	2500      	movs	r5, #0
 8004b9a:	42a5      	cmp	r5, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ba4:	4798      	blx	r3
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bae:	4798      	blx	r3
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	08005acc 	.word	0x08005acc
 8004bb8:	08005acc 	.word	0x08005acc
 8004bbc:	08005acc 	.word	0x08005acc
 8004bc0:	08005ad0 	.word	0x08005ad0

08004bc4 <memset>:
 8004bc4:	4402      	add	r2, r0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d100      	bne.n	8004bce <memset+0xa>
 8004bcc:	4770      	bx	lr
 8004bce:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd2:	e7f9      	b.n	8004bc8 <memset+0x4>

08004bd4 <iprintf>:
 8004bd4:	b40f      	push	{r0, r1, r2, r3}
 8004bd6:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <iprintf+0x2c>)
 8004bd8:	b513      	push	{r0, r1, r4, lr}
 8004bda:	681c      	ldr	r4, [r3, #0]
 8004bdc:	b124      	cbz	r4, 8004be8 <iprintf+0x14>
 8004bde:	69a3      	ldr	r3, [r4, #24]
 8004be0:	b913      	cbnz	r3, 8004be8 <iprintf+0x14>
 8004be2:	4620      	mov	r0, r4
 8004be4:	f000 f84e 	bl	8004c84 <__sinit>
 8004be8:	ab05      	add	r3, sp, #20
 8004bea:	9a04      	ldr	r2, [sp, #16]
 8004bec:	68a1      	ldr	r1, [r4, #8]
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f000 f955 	bl	8004ea0 <_vfiprintf_r>
 8004bf6:	b002      	add	sp, #8
 8004bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bfc:	b004      	add	sp, #16
 8004bfe:	4770      	bx	lr
 8004c00:	2000000c 	.word	0x2000000c

08004c04 <std>:
 8004c04:	2300      	movs	r3, #0
 8004c06:	b510      	push	{r4, lr}
 8004c08:	4604      	mov	r4, r0
 8004c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c0e:	6083      	str	r3, [r0, #8]
 8004c10:	8181      	strh	r1, [r0, #12]
 8004c12:	6643      	str	r3, [r0, #100]	; 0x64
 8004c14:	81c2      	strh	r2, [r0, #14]
 8004c16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c1a:	6183      	str	r3, [r0, #24]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	2208      	movs	r2, #8
 8004c20:	305c      	adds	r0, #92	; 0x5c
 8004c22:	f7ff ffcf 	bl	8004bc4 <memset>
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <std+0x38>)
 8004c28:	6263      	str	r3, [r4, #36]	; 0x24
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <std+0x3c>)
 8004c2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <std+0x40>)
 8004c30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <std+0x44>)
 8004c34:	6224      	str	r4, [r4, #32]
 8004c36:	6323      	str	r3, [r4, #48]	; 0x30
 8004c38:	bd10      	pop	{r4, pc}
 8004c3a:	bf00      	nop
 8004c3c:	080053fd 	.word	0x080053fd
 8004c40:	0800541f 	.word	0x0800541f
 8004c44:	08005457 	.word	0x08005457
 8004c48:	0800547b 	.word	0x0800547b

08004c4c <_cleanup_r>:
 8004c4c:	4901      	ldr	r1, [pc, #4]	; (8004c54 <_cleanup_r+0x8>)
 8004c4e:	f000 b885 	b.w	8004d5c <_fwalk_reent>
 8004c52:	bf00      	nop
 8004c54:	08005755 	.word	0x08005755

08004c58 <__sfmoreglue>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	1e4a      	subs	r2, r1, #1
 8004c5c:	2568      	movs	r5, #104	; 0x68
 8004c5e:	4355      	muls	r5, r2
 8004c60:	460e      	mov	r6, r1
 8004c62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c66:	f000 f897 	bl	8004d98 <_malloc_r>
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	b140      	cbz	r0, 8004c80 <__sfmoreglue+0x28>
 8004c6e:	2100      	movs	r1, #0
 8004c70:	e9c0 1600 	strd	r1, r6, [r0]
 8004c74:	300c      	adds	r0, #12
 8004c76:	60a0      	str	r0, [r4, #8]
 8004c78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c7c:	f7ff ffa2 	bl	8004bc4 <memset>
 8004c80:	4620      	mov	r0, r4
 8004c82:	bd70      	pop	{r4, r5, r6, pc}

08004c84 <__sinit>:
 8004c84:	6983      	ldr	r3, [r0, #24]
 8004c86:	b510      	push	{r4, lr}
 8004c88:	4604      	mov	r4, r0
 8004c8a:	bb33      	cbnz	r3, 8004cda <__sinit+0x56>
 8004c8c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004c90:	6503      	str	r3, [r0, #80]	; 0x50
 8004c92:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <__sinit+0x58>)
 8004c94:	4a12      	ldr	r2, [pc, #72]	; (8004ce0 <__sinit+0x5c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6282      	str	r2, [r0, #40]	; 0x28
 8004c9a:	4298      	cmp	r0, r3
 8004c9c:	bf04      	itt	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	6183      	streq	r3, [r0, #24]
 8004ca2:	f000 f81f 	bl	8004ce4 <__sfp>
 8004ca6:	6060      	str	r0, [r4, #4]
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f000 f81b 	bl	8004ce4 <__sfp>
 8004cae:	60a0      	str	r0, [r4, #8]
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f000 f817 	bl	8004ce4 <__sfp>
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	60e0      	str	r0, [r4, #12]
 8004cba:	2104      	movs	r1, #4
 8004cbc:	6860      	ldr	r0, [r4, #4]
 8004cbe:	f7ff ffa1 	bl	8004c04 <std>
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	2109      	movs	r1, #9
 8004cc6:	68a0      	ldr	r0, [r4, #8]
 8004cc8:	f7ff ff9c 	bl	8004c04 <std>
 8004ccc:	2202      	movs	r2, #2
 8004cce:	2112      	movs	r1, #18
 8004cd0:	68e0      	ldr	r0, [r4, #12]
 8004cd2:	f7ff ff97 	bl	8004c04 <std>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	61a3      	str	r3, [r4, #24]
 8004cda:	bd10      	pop	{r4, pc}
 8004cdc:	08005a2c 	.word	0x08005a2c
 8004ce0:	08004c4d 	.word	0x08004c4d

08004ce4 <__sfp>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <__sfp+0x70>)
 8004ce8:	681e      	ldr	r6, [r3, #0]
 8004cea:	69b3      	ldr	r3, [r6, #24]
 8004cec:	4607      	mov	r7, r0
 8004cee:	b913      	cbnz	r3, 8004cf6 <__sfp+0x12>
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f7ff ffc7 	bl	8004c84 <__sinit>
 8004cf6:	3648      	adds	r6, #72	; 0x48
 8004cf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	d503      	bpl.n	8004d08 <__sfp+0x24>
 8004d00:	6833      	ldr	r3, [r6, #0]
 8004d02:	b133      	cbz	r3, 8004d12 <__sfp+0x2e>
 8004d04:	6836      	ldr	r6, [r6, #0]
 8004d06:	e7f7      	b.n	8004cf8 <__sfp+0x14>
 8004d08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d0c:	b16d      	cbz	r5, 8004d2a <__sfp+0x46>
 8004d0e:	3468      	adds	r4, #104	; 0x68
 8004d10:	e7f4      	b.n	8004cfc <__sfp+0x18>
 8004d12:	2104      	movs	r1, #4
 8004d14:	4638      	mov	r0, r7
 8004d16:	f7ff ff9f 	bl	8004c58 <__sfmoreglue>
 8004d1a:	6030      	str	r0, [r6, #0]
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d1f1      	bne.n	8004d04 <__sfp+0x20>
 8004d20:	230c      	movs	r3, #12
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	4604      	mov	r4, r0
 8004d26:	4620      	mov	r0, r4
 8004d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <__sfp+0x74>)
 8004d2c:	6665      	str	r5, [r4, #100]	; 0x64
 8004d2e:	e9c4 5500 	strd	r5, r5, [r4]
 8004d32:	60a5      	str	r5, [r4, #8]
 8004d34:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004d38:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	4629      	mov	r1, r5
 8004d40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d44:	f7ff ff3e 	bl	8004bc4 <memset>
 8004d48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d50:	e7e9      	b.n	8004d26 <__sfp+0x42>
 8004d52:	bf00      	nop
 8004d54:	08005a2c 	.word	0x08005a2c
 8004d58:	ffff0001 	.word	0xffff0001

08004d5c <_fwalk_reent>:
 8004d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d60:	4680      	mov	r8, r0
 8004d62:	4689      	mov	r9, r1
 8004d64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d68:	2600      	movs	r6, #0
 8004d6a:	b914      	cbnz	r4, 8004d72 <_fwalk_reent+0x16>
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d72:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004d76:	3f01      	subs	r7, #1
 8004d78:	d501      	bpl.n	8004d7e <_fwalk_reent+0x22>
 8004d7a:	6824      	ldr	r4, [r4, #0]
 8004d7c:	e7f5      	b.n	8004d6a <_fwalk_reent+0xe>
 8004d7e:	89ab      	ldrh	r3, [r5, #12]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d907      	bls.n	8004d94 <_fwalk_reent+0x38>
 8004d84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	d003      	beq.n	8004d94 <_fwalk_reent+0x38>
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	4640      	mov	r0, r8
 8004d90:	47c8      	blx	r9
 8004d92:	4306      	orrs	r6, r0
 8004d94:	3568      	adds	r5, #104	; 0x68
 8004d96:	e7ee      	b.n	8004d76 <_fwalk_reent+0x1a>

08004d98 <_malloc_r>:
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	1ccd      	adds	r5, r1, #3
 8004d9c:	f025 0503 	bic.w	r5, r5, #3
 8004da0:	3508      	adds	r5, #8
 8004da2:	2d0c      	cmp	r5, #12
 8004da4:	bf38      	it	cc
 8004da6:	250c      	movcc	r5, #12
 8004da8:	2d00      	cmp	r5, #0
 8004daa:	4606      	mov	r6, r0
 8004dac:	db01      	blt.n	8004db2 <_malloc_r+0x1a>
 8004dae:	42a9      	cmp	r1, r5
 8004db0:	d903      	bls.n	8004dba <_malloc_r+0x22>
 8004db2:	230c      	movs	r3, #12
 8004db4:	6033      	str	r3, [r6, #0]
 8004db6:	2000      	movs	r0, #0
 8004db8:	bd70      	pop	{r4, r5, r6, pc}
 8004dba:	f000 fd6b 	bl	8005894 <__malloc_lock>
 8004dbe:	4a21      	ldr	r2, [pc, #132]	; (8004e44 <_malloc_r+0xac>)
 8004dc0:	6814      	ldr	r4, [r2, #0]
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	b991      	cbnz	r1, 8004dec <_malloc_r+0x54>
 8004dc6:	4c20      	ldr	r4, [pc, #128]	; (8004e48 <_malloc_r+0xb0>)
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	b91b      	cbnz	r3, 8004dd4 <_malloc_r+0x3c>
 8004dcc:	4630      	mov	r0, r6
 8004dce:	f000 fb05 	bl	80053dc <_sbrk_r>
 8004dd2:	6020      	str	r0, [r4, #0]
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	f000 fb00 	bl	80053dc <_sbrk_r>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d124      	bne.n	8004e2a <_malloc_r+0x92>
 8004de0:	230c      	movs	r3, #12
 8004de2:	6033      	str	r3, [r6, #0]
 8004de4:	4630      	mov	r0, r6
 8004de6:	f000 fd56 	bl	8005896 <__malloc_unlock>
 8004dea:	e7e4      	b.n	8004db6 <_malloc_r+0x1e>
 8004dec:	680b      	ldr	r3, [r1, #0]
 8004dee:	1b5b      	subs	r3, r3, r5
 8004df0:	d418      	bmi.n	8004e24 <_malloc_r+0x8c>
 8004df2:	2b0b      	cmp	r3, #11
 8004df4:	d90f      	bls.n	8004e16 <_malloc_r+0x7e>
 8004df6:	600b      	str	r3, [r1, #0]
 8004df8:	50cd      	str	r5, [r1, r3]
 8004dfa:	18cc      	adds	r4, r1, r3
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f000 fd4a 	bl	8005896 <__malloc_unlock>
 8004e02:	f104 000b 	add.w	r0, r4, #11
 8004e06:	1d23      	adds	r3, r4, #4
 8004e08:	f020 0007 	bic.w	r0, r0, #7
 8004e0c:	1ac3      	subs	r3, r0, r3
 8004e0e:	d0d3      	beq.n	8004db8 <_malloc_r+0x20>
 8004e10:	425a      	negs	r2, r3
 8004e12:	50e2      	str	r2, [r4, r3]
 8004e14:	e7d0      	b.n	8004db8 <_malloc_r+0x20>
 8004e16:	428c      	cmp	r4, r1
 8004e18:	684b      	ldr	r3, [r1, #4]
 8004e1a:	bf16      	itet	ne
 8004e1c:	6063      	strne	r3, [r4, #4]
 8004e1e:	6013      	streq	r3, [r2, #0]
 8004e20:	460c      	movne	r4, r1
 8004e22:	e7eb      	b.n	8004dfc <_malloc_r+0x64>
 8004e24:	460c      	mov	r4, r1
 8004e26:	6849      	ldr	r1, [r1, #4]
 8004e28:	e7cc      	b.n	8004dc4 <_malloc_r+0x2c>
 8004e2a:	1cc4      	adds	r4, r0, #3
 8004e2c:	f024 0403 	bic.w	r4, r4, #3
 8004e30:	42a0      	cmp	r0, r4
 8004e32:	d005      	beq.n	8004e40 <_malloc_r+0xa8>
 8004e34:	1a21      	subs	r1, r4, r0
 8004e36:	4630      	mov	r0, r6
 8004e38:	f000 fad0 	bl	80053dc <_sbrk_r>
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d0cf      	beq.n	8004de0 <_malloc_r+0x48>
 8004e40:	6025      	str	r5, [r4, #0]
 8004e42:	e7db      	b.n	8004dfc <_malloc_r+0x64>
 8004e44:	20000090 	.word	0x20000090
 8004e48:	20000094 	.word	0x20000094

08004e4c <__sfputc_r>:
 8004e4c:	6893      	ldr	r3, [r2, #8]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	b410      	push	{r4}
 8004e54:	6093      	str	r3, [r2, #8]
 8004e56:	da08      	bge.n	8004e6a <__sfputc_r+0x1e>
 8004e58:	6994      	ldr	r4, [r2, #24]
 8004e5a:	42a3      	cmp	r3, r4
 8004e5c:	db01      	blt.n	8004e62 <__sfputc_r+0x16>
 8004e5e:	290a      	cmp	r1, #10
 8004e60:	d103      	bne.n	8004e6a <__sfputc_r+0x1e>
 8004e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e66:	f000 bb0d 	b.w	8005484 <__swbuf_r>
 8004e6a:	6813      	ldr	r3, [r2, #0]
 8004e6c:	1c58      	adds	r0, r3, #1
 8004e6e:	6010      	str	r0, [r2, #0]
 8004e70:	7019      	strb	r1, [r3, #0]
 8004e72:	4608      	mov	r0, r1
 8004e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <__sfputs_r>:
 8004e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7c:	4606      	mov	r6, r0
 8004e7e:	460f      	mov	r7, r1
 8004e80:	4614      	mov	r4, r2
 8004e82:	18d5      	adds	r5, r2, r3
 8004e84:	42ac      	cmp	r4, r5
 8004e86:	d101      	bne.n	8004e8c <__sfputs_r+0x12>
 8004e88:	2000      	movs	r0, #0
 8004e8a:	e007      	b.n	8004e9c <__sfputs_r+0x22>
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e92:	4630      	mov	r0, r6
 8004e94:	f7ff ffda 	bl	8004e4c <__sfputc_r>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d1f3      	bne.n	8004e84 <__sfputs_r+0xa>
 8004e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ea0 <_vfiprintf_r>:
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	b09d      	sub	sp, #116	; 0x74
 8004ea8:	4617      	mov	r7, r2
 8004eaa:	461d      	mov	r5, r3
 8004eac:	4606      	mov	r6, r0
 8004eae:	b118      	cbz	r0, 8004eb8 <_vfiprintf_r+0x18>
 8004eb0:	6983      	ldr	r3, [r0, #24]
 8004eb2:	b90b      	cbnz	r3, 8004eb8 <_vfiprintf_r+0x18>
 8004eb4:	f7ff fee6 	bl	8004c84 <__sinit>
 8004eb8:	4b7c      	ldr	r3, [pc, #496]	; (80050ac <_vfiprintf_r+0x20c>)
 8004eba:	429c      	cmp	r4, r3
 8004ebc:	d158      	bne.n	8004f70 <_vfiprintf_r+0xd0>
 8004ebe:	6874      	ldr	r4, [r6, #4]
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	0718      	lsls	r0, r3, #28
 8004ec4:	d55e      	bpl.n	8004f84 <_vfiprintf_r+0xe4>
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d05b      	beq.n	8004f84 <_vfiprintf_r+0xe4>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	9309      	str	r3, [sp, #36]	; 0x24
 8004ed0:	2320      	movs	r3, #32
 8004ed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ed6:	2330      	movs	r3, #48	; 0x30
 8004ed8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004edc:	9503      	str	r5, [sp, #12]
 8004ede:	f04f 0b01 	mov.w	fp, #1
 8004ee2:	46b8      	mov	r8, r7
 8004ee4:	4645      	mov	r5, r8
 8004ee6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004eea:	b10b      	cbz	r3, 8004ef0 <_vfiprintf_r+0x50>
 8004eec:	2b25      	cmp	r3, #37	; 0x25
 8004eee:	d154      	bne.n	8004f9a <_vfiprintf_r+0xfa>
 8004ef0:	ebb8 0a07 	subs.w	sl, r8, r7
 8004ef4:	d00b      	beq.n	8004f0e <_vfiprintf_r+0x6e>
 8004ef6:	4653      	mov	r3, sl
 8004ef8:	463a      	mov	r2, r7
 8004efa:	4621      	mov	r1, r4
 8004efc:	4630      	mov	r0, r6
 8004efe:	f7ff ffbc 	bl	8004e7a <__sfputs_r>
 8004f02:	3001      	adds	r0, #1
 8004f04:	f000 80c2 	beq.w	800508c <_vfiprintf_r+0x1ec>
 8004f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0a:	4453      	add	r3, sl
 8004f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0e:	f898 3000 	ldrb.w	r3, [r8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 80ba 	beq.w	800508c <_vfiprintf_r+0x1ec>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f22:	9304      	str	r3, [sp, #16]
 8004f24:	9307      	str	r3, [sp, #28]
 8004f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f2c:	46a8      	mov	r8, r5
 8004f2e:	2205      	movs	r2, #5
 8004f30:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004f34:	485e      	ldr	r0, [pc, #376]	; (80050b0 <_vfiprintf_r+0x210>)
 8004f36:	f7fb f94b 	bl	80001d0 <memchr>
 8004f3a:	9b04      	ldr	r3, [sp, #16]
 8004f3c:	bb78      	cbnz	r0, 8004f9e <_vfiprintf_r+0xfe>
 8004f3e:	06d9      	lsls	r1, r3, #27
 8004f40:	bf44      	itt	mi
 8004f42:	2220      	movmi	r2, #32
 8004f44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f48:	071a      	lsls	r2, r3, #28
 8004f4a:	bf44      	itt	mi
 8004f4c:	222b      	movmi	r2, #43	; 0x2b
 8004f4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f52:	782a      	ldrb	r2, [r5, #0]
 8004f54:	2a2a      	cmp	r2, #42	; 0x2a
 8004f56:	d02a      	beq.n	8004fae <_vfiprintf_r+0x10e>
 8004f58:	9a07      	ldr	r2, [sp, #28]
 8004f5a:	46a8      	mov	r8, r5
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	250a      	movs	r5, #10
 8004f60:	4641      	mov	r1, r8
 8004f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f66:	3b30      	subs	r3, #48	; 0x30
 8004f68:	2b09      	cmp	r3, #9
 8004f6a:	d969      	bls.n	8005040 <_vfiprintf_r+0x1a0>
 8004f6c:	b360      	cbz	r0, 8004fc8 <_vfiprintf_r+0x128>
 8004f6e:	e024      	b.n	8004fba <_vfiprintf_r+0x11a>
 8004f70:	4b50      	ldr	r3, [pc, #320]	; (80050b4 <_vfiprintf_r+0x214>)
 8004f72:	429c      	cmp	r4, r3
 8004f74:	d101      	bne.n	8004f7a <_vfiprintf_r+0xda>
 8004f76:	68b4      	ldr	r4, [r6, #8]
 8004f78:	e7a2      	b.n	8004ec0 <_vfiprintf_r+0x20>
 8004f7a:	4b4f      	ldr	r3, [pc, #316]	; (80050b8 <_vfiprintf_r+0x218>)
 8004f7c:	429c      	cmp	r4, r3
 8004f7e:	bf08      	it	eq
 8004f80:	68f4      	ldreq	r4, [r6, #12]
 8004f82:	e79d      	b.n	8004ec0 <_vfiprintf_r+0x20>
 8004f84:	4621      	mov	r1, r4
 8004f86:	4630      	mov	r0, r6
 8004f88:	f000 fae0 	bl	800554c <__swsetup_r>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d09d      	beq.n	8004ecc <_vfiprintf_r+0x2c>
 8004f90:	f04f 30ff 	mov.w	r0, #4294967295
 8004f94:	b01d      	add	sp, #116	; 0x74
 8004f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9a:	46a8      	mov	r8, r5
 8004f9c:	e7a2      	b.n	8004ee4 <_vfiprintf_r+0x44>
 8004f9e:	4a44      	ldr	r2, [pc, #272]	; (80050b0 <_vfiprintf_r+0x210>)
 8004fa0:	1a80      	subs	r0, r0, r2
 8004fa2:	fa0b f000 	lsl.w	r0, fp, r0
 8004fa6:	4318      	orrs	r0, r3
 8004fa8:	9004      	str	r0, [sp, #16]
 8004faa:	4645      	mov	r5, r8
 8004fac:	e7be      	b.n	8004f2c <_vfiprintf_r+0x8c>
 8004fae:	9a03      	ldr	r2, [sp, #12]
 8004fb0:	1d11      	adds	r1, r2, #4
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	9103      	str	r1, [sp, #12]
 8004fb6:	2a00      	cmp	r2, #0
 8004fb8:	db01      	blt.n	8004fbe <_vfiprintf_r+0x11e>
 8004fba:	9207      	str	r2, [sp, #28]
 8004fbc:	e004      	b.n	8004fc8 <_vfiprintf_r+0x128>
 8004fbe:	4252      	negs	r2, r2
 8004fc0:	f043 0302 	orr.w	r3, r3, #2
 8004fc4:	9207      	str	r2, [sp, #28]
 8004fc6:	9304      	str	r3, [sp, #16]
 8004fc8:	f898 3000 	ldrb.w	r3, [r8]
 8004fcc:	2b2e      	cmp	r3, #46	; 0x2e
 8004fce:	d10e      	bne.n	8004fee <_vfiprintf_r+0x14e>
 8004fd0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8004fd6:	d138      	bne.n	800504a <_vfiprintf_r+0x1aa>
 8004fd8:	9b03      	ldr	r3, [sp, #12]
 8004fda:	1d1a      	adds	r2, r3, #4
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	9203      	str	r2, [sp, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	bfb8      	it	lt
 8004fe4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fe8:	f108 0802 	add.w	r8, r8, #2
 8004fec:	9305      	str	r3, [sp, #20]
 8004fee:	4d33      	ldr	r5, [pc, #204]	; (80050bc <_vfiprintf_r+0x21c>)
 8004ff0:	f898 1000 	ldrb.w	r1, [r8]
 8004ff4:	2203      	movs	r2, #3
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f7fb f8ea 	bl	80001d0 <memchr>
 8004ffc:	b140      	cbz	r0, 8005010 <_vfiprintf_r+0x170>
 8004ffe:	2340      	movs	r3, #64	; 0x40
 8005000:	1b40      	subs	r0, r0, r5
 8005002:	fa03 f000 	lsl.w	r0, r3, r0
 8005006:	9b04      	ldr	r3, [sp, #16]
 8005008:	4303      	orrs	r3, r0
 800500a:	f108 0801 	add.w	r8, r8, #1
 800500e:	9304      	str	r3, [sp, #16]
 8005010:	f898 1000 	ldrb.w	r1, [r8]
 8005014:	482a      	ldr	r0, [pc, #168]	; (80050c0 <_vfiprintf_r+0x220>)
 8005016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800501a:	2206      	movs	r2, #6
 800501c:	f108 0701 	add.w	r7, r8, #1
 8005020:	f7fb f8d6 	bl	80001d0 <memchr>
 8005024:	2800      	cmp	r0, #0
 8005026:	d037      	beq.n	8005098 <_vfiprintf_r+0x1f8>
 8005028:	4b26      	ldr	r3, [pc, #152]	; (80050c4 <_vfiprintf_r+0x224>)
 800502a:	bb1b      	cbnz	r3, 8005074 <_vfiprintf_r+0x1d4>
 800502c:	9b03      	ldr	r3, [sp, #12]
 800502e:	3307      	adds	r3, #7
 8005030:	f023 0307 	bic.w	r3, r3, #7
 8005034:	3308      	adds	r3, #8
 8005036:	9303      	str	r3, [sp, #12]
 8005038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800503a:	444b      	add	r3, r9
 800503c:	9309      	str	r3, [sp, #36]	; 0x24
 800503e:	e750      	b.n	8004ee2 <_vfiprintf_r+0x42>
 8005040:	fb05 3202 	mla	r2, r5, r2, r3
 8005044:	2001      	movs	r0, #1
 8005046:	4688      	mov	r8, r1
 8005048:	e78a      	b.n	8004f60 <_vfiprintf_r+0xc0>
 800504a:	2300      	movs	r3, #0
 800504c:	f108 0801 	add.w	r8, r8, #1
 8005050:	9305      	str	r3, [sp, #20]
 8005052:	4619      	mov	r1, r3
 8005054:	250a      	movs	r5, #10
 8005056:	4640      	mov	r0, r8
 8005058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800505c:	3a30      	subs	r2, #48	; 0x30
 800505e:	2a09      	cmp	r2, #9
 8005060:	d903      	bls.n	800506a <_vfiprintf_r+0x1ca>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0c3      	beq.n	8004fee <_vfiprintf_r+0x14e>
 8005066:	9105      	str	r1, [sp, #20]
 8005068:	e7c1      	b.n	8004fee <_vfiprintf_r+0x14e>
 800506a:	fb05 2101 	mla	r1, r5, r1, r2
 800506e:	2301      	movs	r3, #1
 8005070:	4680      	mov	r8, r0
 8005072:	e7f0      	b.n	8005056 <_vfiprintf_r+0x1b6>
 8005074:	ab03      	add	r3, sp, #12
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	4622      	mov	r2, r4
 800507a:	4b13      	ldr	r3, [pc, #76]	; (80050c8 <_vfiprintf_r+0x228>)
 800507c:	a904      	add	r1, sp, #16
 800507e:	4630      	mov	r0, r6
 8005080:	f3af 8000 	nop.w
 8005084:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005088:	4681      	mov	r9, r0
 800508a:	d1d5      	bne.n	8005038 <_vfiprintf_r+0x198>
 800508c:	89a3      	ldrh	r3, [r4, #12]
 800508e:	065b      	lsls	r3, r3, #25
 8005090:	f53f af7e 	bmi.w	8004f90 <_vfiprintf_r+0xf0>
 8005094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005096:	e77d      	b.n	8004f94 <_vfiprintf_r+0xf4>
 8005098:	ab03      	add	r3, sp, #12
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	4622      	mov	r2, r4
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <_vfiprintf_r+0x228>)
 80050a0:	a904      	add	r1, sp, #16
 80050a2:	4630      	mov	r0, r6
 80050a4:	f000 f888 	bl	80051b8 <_printf_i>
 80050a8:	e7ec      	b.n	8005084 <_vfiprintf_r+0x1e4>
 80050aa:	bf00      	nop
 80050ac:	08005a50 	.word	0x08005a50
 80050b0:	08005a90 	.word	0x08005a90
 80050b4:	08005a70 	.word	0x08005a70
 80050b8:	08005a30 	.word	0x08005a30
 80050bc:	08005a96 	.word	0x08005a96
 80050c0:	08005a9a 	.word	0x08005a9a
 80050c4:	00000000 	.word	0x00000000
 80050c8:	08004e7b 	.word	0x08004e7b

080050cc <_printf_common>:
 80050cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d0:	4691      	mov	r9, r2
 80050d2:	461f      	mov	r7, r3
 80050d4:	688a      	ldr	r2, [r1, #8]
 80050d6:	690b      	ldr	r3, [r1, #16]
 80050d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050dc:	4293      	cmp	r3, r2
 80050de:	bfb8      	it	lt
 80050e0:	4613      	movlt	r3, r2
 80050e2:	f8c9 3000 	str.w	r3, [r9]
 80050e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050ea:	4606      	mov	r6, r0
 80050ec:	460c      	mov	r4, r1
 80050ee:	b112      	cbz	r2, 80050f6 <_printf_common+0x2a>
 80050f0:	3301      	adds	r3, #1
 80050f2:	f8c9 3000 	str.w	r3, [r9]
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	0699      	lsls	r1, r3, #26
 80050fa:	bf42      	ittt	mi
 80050fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005100:	3302      	addmi	r3, #2
 8005102:	f8c9 3000 	strmi.w	r3, [r9]
 8005106:	6825      	ldr	r5, [r4, #0]
 8005108:	f015 0506 	ands.w	r5, r5, #6
 800510c:	d107      	bne.n	800511e <_printf_common+0x52>
 800510e:	f104 0a19 	add.w	sl, r4, #25
 8005112:	68e3      	ldr	r3, [r4, #12]
 8005114:	f8d9 2000 	ldr.w	r2, [r9]
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	42ab      	cmp	r3, r5
 800511c:	dc28      	bgt.n	8005170 <_printf_common+0xa4>
 800511e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005122:	6822      	ldr	r2, [r4, #0]
 8005124:	3300      	adds	r3, #0
 8005126:	bf18      	it	ne
 8005128:	2301      	movne	r3, #1
 800512a:	0692      	lsls	r2, r2, #26
 800512c:	d42d      	bmi.n	800518a <_printf_common+0xbe>
 800512e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005132:	4639      	mov	r1, r7
 8005134:	4630      	mov	r0, r6
 8005136:	47c0      	blx	r8
 8005138:	3001      	adds	r0, #1
 800513a:	d020      	beq.n	800517e <_printf_common+0xb2>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	68e5      	ldr	r5, [r4, #12]
 8005140:	f8d9 2000 	ldr.w	r2, [r9]
 8005144:	f003 0306 	and.w	r3, r3, #6
 8005148:	2b04      	cmp	r3, #4
 800514a:	bf08      	it	eq
 800514c:	1aad      	subeq	r5, r5, r2
 800514e:	68a3      	ldr	r3, [r4, #8]
 8005150:	6922      	ldr	r2, [r4, #16]
 8005152:	bf0c      	ite	eq
 8005154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005158:	2500      	movne	r5, #0
 800515a:	4293      	cmp	r3, r2
 800515c:	bfc4      	itt	gt
 800515e:	1a9b      	subgt	r3, r3, r2
 8005160:	18ed      	addgt	r5, r5, r3
 8005162:	f04f 0900 	mov.w	r9, #0
 8005166:	341a      	adds	r4, #26
 8005168:	454d      	cmp	r5, r9
 800516a:	d11a      	bne.n	80051a2 <_printf_common+0xd6>
 800516c:	2000      	movs	r0, #0
 800516e:	e008      	b.n	8005182 <_printf_common+0xb6>
 8005170:	2301      	movs	r3, #1
 8005172:	4652      	mov	r2, sl
 8005174:	4639      	mov	r1, r7
 8005176:	4630      	mov	r0, r6
 8005178:	47c0      	blx	r8
 800517a:	3001      	adds	r0, #1
 800517c:	d103      	bne.n	8005186 <_printf_common+0xba>
 800517e:	f04f 30ff 	mov.w	r0, #4294967295
 8005182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005186:	3501      	adds	r5, #1
 8005188:	e7c3      	b.n	8005112 <_printf_common+0x46>
 800518a:	18e1      	adds	r1, r4, r3
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	2030      	movs	r0, #48	; 0x30
 8005190:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005194:	4422      	add	r2, r4
 8005196:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800519a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800519e:	3302      	adds	r3, #2
 80051a0:	e7c5      	b.n	800512e <_printf_common+0x62>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4622      	mov	r2, r4
 80051a6:	4639      	mov	r1, r7
 80051a8:	4630      	mov	r0, r6
 80051aa:	47c0      	blx	r8
 80051ac:	3001      	adds	r0, #1
 80051ae:	d0e6      	beq.n	800517e <_printf_common+0xb2>
 80051b0:	f109 0901 	add.w	r9, r9, #1
 80051b4:	e7d8      	b.n	8005168 <_printf_common+0x9c>
	...

080051b8 <_printf_i>:
 80051b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051c0:	460c      	mov	r4, r1
 80051c2:	7e09      	ldrb	r1, [r1, #24]
 80051c4:	b085      	sub	sp, #20
 80051c6:	296e      	cmp	r1, #110	; 0x6e
 80051c8:	4617      	mov	r7, r2
 80051ca:	4606      	mov	r6, r0
 80051cc:	4698      	mov	r8, r3
 80051ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051d0:	f000 80b3 	beq.w	800533a <_printf_i+0x182>
 80051d4:	d822      	bhi.n	800521c <_printf_i+0x64>
 80051d6:	2963      	cmp	r1, #99	; 0x63
 80051d8:	d036      	beq.n	8005248 <_printf_i+0x90>
 80051da:	d80a      	bhi.n	80051f2 <_printf_i+0x3a>
 80051dc:	2900      	cmp	r1, #0
 80051de:	f000 80b9 	beq.w	8005354 <_printf_i+0x19c>
 80051e2:	2958      	cmp	r1, #88	; 0x58
 80051e4:	f000 8083 	beq.w	80052ee <_printf_i+0x136>
 80051e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80051f0:	e032      	b.n	8005258 <_printf_i+0xa0>
 80051f2:	2964      	cmp	r1, #100	; 0x64
 80051f4:	d001      	beq.n	80051fa <_printf_i+0x42>
 80051f6:	2969      	cmp	r1, #105	; 0x69
 80051f8:	d1f6      	bne.n	80051e8 <_printf_i+0x30>
 80051fa:	6820      	ldr	r0, [r4, #0]
 80051fc:	6813      	ldr	r3, [r2, #0]
 80051fe:	0605      	lsls	r5, r0, #24
 8005200:	f103 0104 	add.w	r1, r3, #4
 8005204:	d52a      	bpl.n	800525c <_printf_i+0xa4>
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6011      	str	r1, [r2, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	da03      	bge.n	8005216 <_printf_i+0x5e>
 800520e:	222d      	movs	r2, #45	; 0x2d
 8005210:	425b      	negs	r3, r3
 8005212:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005216:	486f      	ldr	r0, [pc, #444]	; (80053d4 <_printf_i+0x21c>)
 8005218:	220a      	movs	r2, #10
 800521a:	e039      	b.n	8005290 <_printf_i+0xd8>
 800521c:	2973      	cmp	r1, #115	; 0x73
 800521e:	f000 809d 	beq.w	800535c <_printf_i+0x1a4>
 8005222:	d808      	bhi.n	8005236 <_printf_i+0x7e>
 8005224:	296f      	cmp	r1, #111	; 0x6f
 8005226:	d020      	beq.n	800526a <_printf_i+0xb2>
 8005228:	2970      	cmp	r1, #112	; 0x70
 800522a:	d1dd      	bne.n	80051e8 <_printf_i+0x30>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	f043 0320 	orr.w	r3, r3, #32
 8005232:	6023      	str	r3, [r4, #0]
 8005234:	e003      	b.n	800523e <_printf_i+0x86>
 8005236:	2975      	cmp	r1, #117	; 0x75
 8005238:	d017      	beq.n	800526a <_printf_i+0xb2>
 800523a:	2978      	cmp	r1, #120	; 0x78
 800523c:	d1d4      	bne.n	80051e8 <_printf_i+0x30>
 800523e:	2378      	movs	r3, #120	; 0x78
 8005240:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005244:	4864      	ldr	r0, [pc, #400]	; (80053d8 <_printf_i+0x220>)
 8005246:	e055      	b.n	80052f4 <_printf_i+0x13c>
 8005248:	6813      	ldr	r3, [r2, #0]
 800524a:	1d19      	adds	r1, r3, #4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6011      	str	r1, [r2, #0]
 8005250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005258:	2301      	movs	r3, #1
 800525a:	e08c      	b.n	8005376 <_printf_i+0x1be>
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6011      	str	r1, [r2, #0]
 8005260:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005264:	bf18      	it	ne
 8005266:	b21b      	sxthne	r3, r3
 8005268:	e7cf      	b.n	800520a <_printf_i+0x52>
 800526a:	6813      	ldr	r3, [r2, #0]
 800526c:	6825      	ldr	r5, [r4, #0]
 800526e:	1d18      	adds	r0, r3, #4
 8005270:	6010      	str	r0, [r2, #0]
 8005272:	0628      	lsls	r0, r5, #24
 8005274:	d501      	bpl.n	800527a <_printf_i+0xc2>
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	e002      	b.n	8005280 <_printf_i+0xc8>
 800527a:	0668      	lsls	r0, r5, #25
 800527c:	d5fb      	bpl.n	8005276 <_printf_i+0xbe>
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	4854      	ldr	r0, [pc, #336]	; (80053d4 <_printf_i+0x21c>)
 8005282:	296f      	cmp	r1, #111	; 0x6f
 8005284:	bf14      	ite	ne
 8005286:	220a      	movne	r2, #10
 8005288:	2208      	moveq	r2, #8
 800528a:	2100      	movs	r1, #0
 800528c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005290:	6865      	ldr	r5, [r4, #4]
 8005292:	60a5      	str	r5, [r4, #8]
 8005294:	2d00      	cmp	r5, #0
 8005296:	f2c0 8095 	blt.w	80053c4 <_printf_i+0x20c>
 800529a:	6821      	ldr	r1, [r4, #0]
 800529c:	f021 0104 	bic.w	r1, r1, #4
 80052a0:	6021      	str	r1, [r4, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d13d      	bne.n	8005322 <_printf_i+0x16a>
 80052a6:	2d00      	cmp	r5, #0
 80052a8:	f040 808e 	bne.w	80053c8 <_printf_i+0x210>
 80052ac:	4665      	mov	r5, ip
 80052ae:	2a08      	cmp	r2, #8
 80052b0:	d10b      	bne.n	80052ca <_printf_i+0x112>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	07db      	lsls	r3, r3, #31
 80052b6:	d508      	bpl.n	80052ca <_printf_i+0x112>
 80052b8:	6923      	ldr	r3, [r4, #16]
 80052ba:	6862      	ldr	r2, [r4, #4]
 80052bc:	429a      	cmp	r2, r3
 80052be:	bfde      	ittt	le
 80052c0:	2330      	movle	r3, #48	; 0x30
 80052c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052ca:	ebac 0305 	sub.w	r3, ip, r5
 80052ce:	6123      	str	r3, [r4, #16]
 80052d0:	f8cd 8000 	str.w	r8, [sp]
 80052d4:	463b      	mov	r3, r7
 80052d6:	aa03      	add	r2, sp, #12
 80052d8:	4621      	mov	r1, r4
 80052da:	4630      	mov	r0, r6
 80052dc:	f7ff fef6 	bl	80050cc <_printf_common>
 80052e0:	3001      	adds	r0, #1
 80052e2:	d14d      	bne.n	8005380 <_printf_i+0x1c8>
 80052e4:	f04f 30ff 	mov.w	r0, #4294967295
 80052e8:	b005      	add	sp, #20
 80052ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052ee:	4839      	ldr	r0, [pc, #228]	; (80053d4 <_printf_i+0x21c>)
 80052f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80052f4:	6813      	ldr	r3, [r2, #0]
 80052f6:	6821      	ldr	r1, [r4, #0]
 80052f8:	1d1d      	adds	r5, r3, #4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6015      	str	r5, [r2, #0]
 80052fe:	060a      	lsls	r2, r1, #24
 8005300:	d50b      	bpl.n	800531a <_printf_i+0x162>
 8005302:	07ca      	lsls	r2, r1, #31
 8005304:	bf44      	itt	mi
 8005306:	f041 0120 	orrmi.w	r1, r1, #32
 800530a:	6021      	strmi	r1, [r4, #0]
 800530c:	b91b      	cbnz	r3, 8005316 <_printf_i+0x15e>
 800530e:	6822      	ldr	r2, [r4, #0]
 8005310:	f022 0220 	bic.w	r2, r2, #32
 8005314:	6022      	str	r2, [r4, #0]
 8005316:	2210      	movs	r2, #16
 8005318:	e7b7      	b.n	800528a <_printf_i+0xd2>
 800531a:	064d      	lsls	r5, r1, #25
 800531c:	bf48      	it	mi
 800531e:	b29b      	uxthmi	r3, r3
 8005320:	e7ef      	b.n	8005302 <_printf_i+0x14a>
 8005322:	4665      	mov	r5, ip
 8005324:	fbb3 f1f2 	udiv	r1, r3, r2
 8005328:	fb02 3311 	mls	r3, r2, r1, r3
 800532c:	5cc3      	ldrb	r3, [r0, r3]
 800532e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005332:	460b      	mov	r3, r1
 8005334:	2900      	cmp	r1, #0
 8005336:	d1f5      	bne.n	8005324 <_printf_i+0x16c>
 8005338:	e7b9      	b.n	80052ae <_printf_i+0xf6>
 800533a:	6813      	ldr	r3, [r2, #0]
 800533c:	6825      	ldr	r5, [r4, #0]
 800533e:	6961      	ldr	r1, [r4, #20]
 8005340:	1d18      	adds	r0, r3, #4
 8005342:	6010      	str	r0, [r2, #0]
 8005344:	0628      	lsls	r0, r5, #24
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	d501      	bpl.n	800534e <_printf_i+0x196>
 800534a:	6019      	str	r1, [r3, #0]
 800534c:	e002      	b.n	8005354 <_printf_i+0x19c>
 800534e:	066a      	lsls	r2, r5, #25
 8005350:	d5fb      	bpl.n	800534a <_printf_i+0x192>
 8005352:	8019      	strh	r1, [r3, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	6123      	str	r3, [r4, #16]
 8005358:	4665      	mov	r5, ip
 800535a:	e7b9      	b.n	80052d0 <_printf_i+0x118>
 800535c:	6813      	ldr	r3, [r2, #0]
 800535e:	1d19      	adds	r1, r3, #4
 8005360:	6011      	str	r1, [r2, #0]
 8005362:	681d      	ldr	r5, [r3, #0]
 8005364:	6862      	ldr	r2, [r4, #4]
 8005366:	2100      	movs	r1, #0
 8005368:	4628      	mov	r0, r5
 800536a:	f7fa ff31 	bl	80001d0 <memchr>
 800536e:	b108      	cbz	r0, 8005374 <_printf_i+0x1bc>
 8005370:	1b40      	subs	r0, r0, r5
 8005372:	6060      	str	r0, [r4, #4]
 8005374:	6863      	ldr	r3, [r4, #4]
 8005376:	6123      	str	r3, [r4, #16]
 8005378:	2300      	movs	r3, #0
 800537a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800537e:	e7a7      	b.n	80052d0 <_printf_i+0x118>
 8005380:	6923      	ldr	r3, [r4, #16]
 8005382:	462a      	mov	r2, r5
 8005384:	4639      	mov	r1, r7
 8005386:	4630      	mov	r0, r6
 8005388:	47c0      	blx	r8
 800538a:	3001      	adds	r0, #1
 800538c:	d0aa      	beq.n	80052e4 <_printf_i+0x12c>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	079b      	lsls	r3, r3, #30
 8005392:	d413      	bmi.n	80053bc <_printf_i+0x204>
 8005394:	68e0      	ldr	r0, [r4, #12]
 8005396:	9b03      	ldr	r3, [sp, #12]
 8005398:	4298      	cmp	r0, r3
 800539a:	bfb8      	it	lt
 800539c:	4618      	movlt	r0, r3
 800539e:	e7a3      	b.n	80052e8 <_printf_i+0x130>
 80053a0:	2301      	movs	r3, #1
 80053a2:	464a      	mov	r2, r9
 80053a4:	4639      	mov	r1, r7
 80053a6:	4630      	mov	r0, r6
 80053a8:	47c0      	blx	r8
 80053aa:	3001      	adds	r0, #1
 80053ac:	d09a      	beq.n	80052e4 <_printf_i+0x12c>
 80053ae:	3501      	adds	r5, #1
 80053b0:	68e3      	ldr	r3, [r4, #12]
 80053b2:	9a03      	ldr	r2, [sp, #12]
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	42ab      	cmp	r3, r5
 80053b8:	dcf2      	bgt.n	80053a0 <_printf_i+0x1e8>
 80053ba:	e7eb      	b.n	8005394 <_printf_i+0x1dc>
 80053bc:	2500      	movs	r5, #0
 80053be:	f104 0919 	add.w	r9, r4, #25
 80053c2:	e7f5      	b.n	80053b0 <_printf_i+0x1f8>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1ac      	bne.n	8005322 <_printf_i+0x16a>
 80053c8:	7803      	ldrb	r3, [r0, #0]
 80053ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053d2:	e76c      	b.n	80052ae <_printf_i+0xf6>
 80053d4:	08005aa1 	.word	0x08005aa1
 80053d8:	08005ab2 	.word	0x08005ab2

080053dc <_sbrk_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4c06      	ldr	r4, [pc, #24]	; (80053f8 <_sbrk_r+0x1c>)
 80053e0:	2300      	movs	r3, #0
 80053e2:	4605      	mov	r5, r0
 80053e4:	4608      	mov	r0, r1
 80053e6:	6023      	str	r3, [r4, #0]
 80053e8:	f7fb fc34 	bl	8000c54 <_sbrk>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	d102      	bne.n	80053f6 <_sbrk_r+0x1a>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	b103      	cbz	r3, 80053f6 <_sbrk_r+0x1a>
 80053f4:	602b      	str	r3, [r5, #0]
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	200001d0 	.word	0x200001d0

080053fc <__sread>:
 80053fc:	b510      	push	{r4, lr}
 80053fe:	460c      	mov	r4, r1
 8005400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005404:	f000 fa96 	bl	8005934 <_read_r>
 8005408:	2800      	cmp	r0, #0
 800540a:	bfab      	itete	ge
 800540c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800540e:	89a3      	ldrhlt	r3, [r4, #12]
 8005410:	181b      	addge	r3, r3, r0
 8005412:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005416:	bfac      	ite	ge
 8005418:	6563      	strge	r3, [r4, #84]	; 0x54
 800541a:	81a3      	strhlt	r3, [r4, #12]
 800541c:	bd10      	pop	{r4, pc}

0800541e <__swrite>:
 800541e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005422:	461f      	mov	r7, r3
 8005424:	898b      	ldrh	r3, [r1, #12]
 8005426:	05db      	lsls	r3, r3, #23
 8005428:	4605      	mov	r5, r0
 800542a:	460c      	mov	r4, r1
 800542c:	4616      	mov	r6, r2
 800542e:	d505      	bpl.n	800543c <__swrite+0x1e>
 8005430:	2302      	movs	r3, #2
 8005432:	2200      	movs	r2, #0
 8005434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005438:	f000 f9b6 	bl	80057a8 <_lseek_r>
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005446:	81a3      	strh	r3, [r4, #12]
 8005448:	4632      	mov	r2, r6
 800544a:	463b      	mov	r3, r7
 800544c:	4628      	mov	r0, r5
 800544e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005452:	f000 b869 	b.w	8005528 <_write_r>

08005456 <__sseek>:
 8005456:	b510      	push	{r4, lr}
 8005458:	460c      	mov	r4, r1
 800545a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545e:	f000 f9a3 	bl	80057a8 <_lseek_r>
 8005462:	1c43      	adds	r3, r0, #1
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	bf15      	itete	ne
 8005468:	6560      	strne	r0, [r4, #84]	; 0x54
 800546a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800546e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005472:	81a3      	strheq	r3, [r4, #12]
 8005474:	bf18      	it	ne
 8005476:	81a3      	strhne	r3, [r4, #12]
 8005478:	bd10      	pop	{r4, pc}

0800547a <__sclose>:
 800547a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800547e:	f000 b8d3 	b.w	8005628 <_close_r>
	...

08005484 <__swbuf_r>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	460e      	mov	r6, r1
 8005488:	4614      	mov	r4, r2
 800548a:	4605      	mov	r5, r0
 800548c:	b118      	cbz	r0, 8005496 <__swbuf_r+0x12>
 800548e:	6983      	ldr	r3, [r0, #24]
 8005490:	b90b      	cbnz	r3, 8005496 <__swbuf_r+0x12>
 8005492:	f7ff fbf7 	bl	8004c84 <__sinit>
 8005496:	4b21      	ldr	r3, [pc, #132]	; (800551c <__swbuf_r+0x98>)
 8005498:	429c      	cmp	r4, r3
 800549a:	d12a      	bne.n	80054f2 <__swbuf_r+0x6e>
 800549c:	686c      	ldr	r4, [r5, #4]
 800549e:	69a3      	ldr	r3, [r4, #24]
 80054a0:	60a3      	str	r3, [r4, #8]
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	071a      	lsls	r2, r3, #28
 80054a6:	d52e      	bpl.n	8005506 <__swbuf_r+0x82>
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	b363      	cbz	r3, 8005506 <__swbuf_r+0x82>
 80054ac:	6923      	ldr	r3, [r4, #16]
 80054ae:	6820      	ldr	r0, [r4, #0]
 80054b0:	1ac0      	subs	r0, r0, r3
 80054b2:	6963      	ldr	r3, [r4, #20]
 80054b4:	b2f6      	uxtb	r6, r6
 80054b6:	4283      	cmp	r3, r0
 80054b8:	4637      	mov	r7, r6
 80054ba:	dc04      	bgt.n	80054c6 <__swbuf_r+0x42>
 80054bc:	4621      	mov	r1, r4
 80054be:	4628      	mov	r0, r5
 80054c0:	f000 f948 	bl	8005754 <_fflush_r>
 80054c4:	bb28      	cbnz	r0, 8005512 <__swbuf_r+0x8e>
 80054c6:	68a3      	ldr	r3, [r4, #8]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	60a3      	str	r3, [r4, #8]
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	6022      	str	r2, [r4, #0]
 80054d2:	701e      	strb	r6, [r3, #0]
 80054d4:	6963      	ldr	r3, [r4, #20]
 80054d6:	3001      	adds	r0, #1
 80054d8:	4283      	cmp	r3, r0
 80054da:	d004      	beq.n	80054e6 <__swbuf_r+0x62>
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	07db      	lsls	r3, r3, #31
 80054e0:	d519      	bpl.n	8005516 <__swbuf_r+0x92>
 80054e2:	2e0a      	cmp	r6, #10
 80054e4:	d117      	bne.n	8005516 <__swbuf_r+0x92>
 80054e6:	4621      	mov	r1, r4
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 f933 	bl	8005754 <_fflush_r>
 80054ee:	b190      	cbz	r0, 8005516 <__swbuf_r+0x92>
 80054f0:	e00f      	b.n	8005512 <__swbuf_r+0x8e>
 80054f2:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <__swbuf_r+0x9c>)
 80054f4:	429c      	cmp	r4, r3
 80054f6:	d101      	bne.n	80054fc <__swbuf_r+0x78>
 80054f8:	68ac      	ldr	r4, [r5, #8]
 80054fa:	e7d0      	b.n	800549e <__swbuf_r+0x1a>
 80054fc:	4b09      	ldr	r3, [pc, #36]	; (8005524 <__swbuf_r+0xa0>)
 80054fe:	429c      	cmp	r4, r3
 8005500:	bf08      	it	eq
 8005502:	68ec      	ldreq	r4, [r5, #12]
 8005504:	e7cb      	b.n	800549e <__swbuf_r+0x1a>
 8005506:	4621      	mov	r1, r4
 8005508:	4628      	mov	r0, r5
 800550a:	f000 f81f 	bl	800554c <__swsetup_r>
 800550e:	2800      	cmp	r0, #0
 8005510:	d0cc      	beq.n	80054ac <__swbuf_r+0x28>
 8005512:	f04f 37ff 	mov.w	r7, #4294967295
 8005516:	4638      	mov	r0, r7
 8005518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800551a:	bf00      	nop
 800551c:	08005a50 	.word	0x08005a50
 8005520:	08005a70 	.word	0x08005a70
 8005524:	08005a30 	.word	0x08005a30

08005528 <_write_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4c07      	ldr	r4, [pc, #28]	; (8005548 <_write_r+0x20>)
 800552c:	4605      	mov	r5, r0
 800552e:	4608      	mov	r0, r1
 8005530:	4611      	mov	r1, r2
 8005532:	2200      	movs	r2, #0
 8005534:	6022      	str	r2, [r4, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	f7fb f81a 	bl	8000570 <_write>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d102      	bne.n	8005546 <_write_r+0x1e>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	b103      	cbz	r3, 8005546 <_write_r+0x1e>
 8005544:	602b      	str	r3, [r5, #0]
 8005546:	bd38      	pop	{r3, r4, r5, pc}
 8005548:	200001d0 	.word	0x200001d0

0800554c <__swsetup_r>:
 800554c:	4b32      	ldr	r3, [pc, #200]	; (8005618 <__swsetup_r+0xcc>)
 800554e:	b570      	push	{r4, r5, r6, lr}
 8005550:	681d      	ldr	r5, [r3, #0]
 8005552:	4606      	mov	r6, r0
 8005554:	460c      	mov	r4, r1
 8005556:	b125      	cbz	r5, 8005562 <__swsetup_r+0x16>
 8005558:	69ab      	ldr	r3, [r5, #24]
 800555a:	b913      	cbnz	r3, 8005562 <__swsetup_r+0x16>
 800555c:	4628      	mov	r0, r5
 800555e:	f7ff fb91 	bl	8004c84 <__sinit>
 8005562:	4b2e      	ldr	r3, [pc, #184]	; (800561c <__swsetup_r+0xd0>)
 8005564:	429c      	cmp	r4, r3
 8005566:	d10f      	bne.n	8005588 <__swsetup_r+0x3c>
 8005568:	686c      	ldr	r4, [r5, #4]
 800556a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800556e:	b29a      	uxth	r2, r3
 8005570:	0715      	lsls	r5, r2, #28
 8005572:	d42c      	bmi.n	80055ce <__swsetup_r+0x82>
 8005574:	06d0      	lsls	r0, r2, #27
 8005576:	d411      	bmi.n	800559c <__swsetup_r+0x50>
 8005578:	2209      	movs	r2, #9
 800557a:	6032      	str	r2, [r6, #0]
 800557c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005580:	81a3      	strh	r3, [r4, #12]
 8005582:	f04f 30ff 	mov.w	r0, #4294967295
 8005586:	e03e      	b.n	8005606 <__swsetup_r+0xba>
 8005588:	4b25      	ldr	r3, [pc, #148]	; (8005620 <__swsetup_r+0xd4>)
 800558a:	429c      	cmp	r4, r3
 800558c:	d101      	bne.n	8005592 <__swsetup_r+0x46>
 800558e:	68ac      	ldr	r4, [r5, #8]
 8005590:	e7eb      	b.n	800556a <__swsetup_r+0x1e>
 8005592:	4b24      	ldr	r3, [pc, #144]	; (8005624 <__swsetup_r+0xd8>)
 8005594:	429c      	cmp	r4, r3
 8005596:	bf08      	it	eq
 8005598:	68ec      	ldreq	r4, [r5, #12]
 800559a:	e7e6      	b.n	800556a <__swsetup_r+0x1e>
 800559c:	0751      	lsls	r1, r2, #29
 800559e:	d512      	bpl.n	80055c6 <__swsetup_r+0x7a>
 80055a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055a2:	b141      	cbz	r1, 80055b6 <__swsetup_r+0x6a>
 80055a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055a8:	4299      	cmp	r1, r3
 80055aa:	d002      	beq.n	80055b2 <__swsetup_r+0x66>
 80055ac:	4630      	mov	r0, r6
 80055ae:	f000 f973 	bl	8005898 <_free_r>
 80055b2:	2300      	movs	r3, #0
 80055b4:	6363      	str	r3, [r4, #52]	; 0x34
 80055b6:	89a3      	ldrh	r3, [r4, #12]
 80055b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055bc:	81a3      	strh	r3, [r4, #12]
 80055be:	2300      	movs	r3, #0
 80055c0:	6063      	str	r3, [r4, #4]
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	f043 0308 	orr.w	r3, r3, #8
 80055cc:	81a3      	strh	r3, [r4, #12]
 80055ce:	6923      	ldr	r3, [r4, #16]
 80055d0:	b94b      	cbnz	r3, 80055e6 <__swsetup_r+0x9a>
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055dc:	d003      	beq.n	80055e6 <__swsetup_r+0x9a>
 80055de:	4621      	mov	r1, r4
 80055e0:	4630      	mov	r0, r6
 80055e2:	f000 f917 	bl	8005814 <__smakebuf_r>
 80055e6:	89a2      	ldrh	r2, [r4, #12]
 80055e8:	f012 0301 	ands.w	r3, r2, #1
 80055ec:	d00c      	beq.n	8005608 <__swsetup_r+0xbc>
 80055ee:	2300      	movs	r3, #0
 80055f0:	60a3      	str	r3, [r4, #8]
 80055f2:	6963      	ldr	r3, [r4, #20]
 80055f4:	425b      	negs	r3, r3
 80055f6:	61a3      	str	r3, [r4, #24]
 80055f8:	6923      	ldr	r3, [r4, #16]
 80055fa:	b953      	cbnz	r3, 8005612 <__swsetup_r+0xc6>
 80055fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005600:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005604:	d1ba      	bne.n	800557c <__swsetup_r+0x30>
 8005606:	bd70      	pop	{r4, r5, r6, pc}
 8005608:	0792      	lsls	r2, r2, #30
 800560a:	bf58      	it	pl
 800560c:	6963      	ldrpl	r3, [r4, #20]
 800560e:	60a3      	str	r3, [r4, #8]
 8005610:	e7f2      	b.n	80055f8 <__swsetup_r+0xac>
 8005612:	2000      	movs	r0, #0
 8005614:	e7f7      	b.n	8005606 <__swsetup_r+0xba>
 8005616:	bf00      	nop
 8005618:	2000000c 	.word	0x2000000c
 800561c:	08005a50 	.word	0x08005a50
 8005620:	08005a70 	.word	0x08005a70
 8005624:	08005a30 	.word	0x08005a30

08005628 <_close_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4c06      	ldr	r4, [pc, #24]	; (8005644 <_close_r+0x1c>)
 800562c:	2300      	movs	r3, #0
 800562e:	4605      	mov	r5, r0
 8005630:	4608      	mov	r0, r1
 8005632:	6023      	str	r3, [r4, #0]
 8005634:	f7fb fad9 	bl	8000bea <_close>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <_close_r+0x1a>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	b103      	cbz	r3, 8005642 <_close_r+0x1a>
 8005640:	602b      	str	r3, [r5, #0]
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	200001d0 	.word	0x200001d0

08005648 <__sflush_r>:
 8005648:	898a      	ldrh	r2, [r1, #12]
 800564a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800564e:	4605      	mov	r5, r0
 8005650:	0710      	lsls	r0, r2, #28
 8005652:	460c      	mov	r4, r1
 8005654:	d458      	bmi.n	8005708 <__sflush_r+0xc0>
 8005656:	684b      	ldr	r3, [r1, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	dc05      	bgt.n	8005668 <__sflush_r+0x20>
 800565c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	dc02      	bgt.n	8005668 <__sflush_r+0x20>
 8005662:	2000      	movs	r0, #0
 8005664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800566a:	2e00      	cmp	r6, #0
 800566c:	d0f9      	beq.n	8005662 <__sflush_r+0x1a>
 800566e:	2300      	movs	r3, #0
 8005670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005674:	682f      	ldr	r7, [r5, #0]
 8005676:	6a21      	ldr	r1, [r4, #32]
 8005678:	602b      	str	r3, [r5, #0]
 800567a:	d032      	beq.n	80056e2 <__sflush_r+0x9a>
 800567c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	075a      	lsls	r2, r3, #29
 8005682:	d505      	bpl.n	8005690 <__sflush_r+0x48>
 8005684:	6863      	ldr	r3, [r4, #4]
 8005686:	1ac0      	subs	r0, r0, r3
 8005688:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800568a:	b10b      	cbz	r3, 8005690 <__sflush_r+0x48>
 800568c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800568e:	1ac0      	subs	r0, r0, r3
 8005690:	2300      	movs	r3, #0
 8005692:	4602      	mov	r2, r0
 8005694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005696:	6a21      	ldr	r1, [r4, #32]
 8005698:	4628      	mov	r0, r5
 800569a:	47b0      	blx	r6
 800569c:	1c43      	adds	r3, r0, #1
 800569e:	89a3      	ldrh	r3, [r4, #12]
 80056a0:	d106      	bne.n	80056b0 <__sflush_r+0x68>
 80056a2:	6829      	ldr	r1, [r5, #0]
 80056a4:	291d      	cmp	r1, #29
 80056a6:	d848      	bhi.n	800573a <__sflush_r+0xf2>
 80056a8:	4a29      	ldr	r2, [pc, #164]	; (8005750 <__sflush_r+0x108>)
 80056aa:	40ca      	lsrs	r2, r1
 80056ac:	07d6      	lsls	r6, r2, #31
 80056ae:	d544      	bpl.n	800573a <__sflush_r+0xf2>
 80056b0:	2200      	movs	r2, #0
 80056b2:	6062      	str	r2, [r4, #4]
 80056b4:	04d9      	lsls	r1, r3, #19
 80056b6:	6922      	ldr	r2, [r4, #16]
 80056b8:	6022      	str	r2, [r4, #0]
 80056ba:	d504      	bpl.n	80056c6 <__sflush_r+0x7e>
 80056bc:	1c42      	adds	r2, r0, #1
 80056be:	d101      	bne.n	80056c4 <__sflush_r+0x7c>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	b903      	cbnz	r3, 80056c6 <__sflush_r+0x7e>
 80056c4:	6560      	str	r0, [r4, #84]	; 0x54
 80056c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056c8:	602f      	str	r7, [r5, #0]
 80056ca:	2900      	cmp	r1, #0
 80056cc:	d0c9      	beq.n	8005662 <__sflush_r+0x1a>
 80056ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056d2:	4299      	cmp	r1, r3
 80056d4:	d002      	beq.n	80056dc <__sflush_r+0x94>
 80056d6:	4628      	mov	r0, r5
 80056d8:	f000 f8de 	bl	8005898 <_free_r>
 80056dc:	2000      	movs	r0, #0
 80056de:	6360      	str	r0, [r4, #52]	; 0x34
 80056e0:	e7c0      	b.n	8005664 <__sflush_r+0x1c>
 80056e2:	2301      	movs	r3, #1
 80056e4:	4628      	mov	r0, r5
 80056e6:	47b0      	blx	r6
 80056e8:	1c41      	adds	r1, r0, #1
 80056ea:	d1c8      	bne.n	800567e <__sflush_r+0x36>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0c5      	beq.n	800567e <__sflush_r+0x36>
 80056f2:	2b1d      	cmp	r3, #29
 80056f4:	d001      	beq.n	80056fa <__sflush_r+0xb2>
 80056f6:	2b16      	cmp	r3, #22
 80056f8:	d101      	bne.n	80056fe <__sflush_r+0xb6>
 80056fa:	602f      	str	r7, [r5, #0]
 80056fc:	e7b1      	b.n	8005662 <__sflush_r+0x1a>
 80056fe:	89a3      	ldrh	r3, [r4, #12]
 8005700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005704:	81a3      	strh	r3, [r4, #12]
 8005706:	e7ad      	b.n	8005664 <__sflush_r+0x1c>
 8005708:	690f      	ldr	r7, [r1, #16]
 800570a:	2f00      	cmp	r7, #0
 800570c:	d0a9      	beq.n	8005662 <__sflush_r+0x1a>
 800570e:	0793      	lsls	r3, r2, #30
 8005710:	680e      	ldr	r6, [r1, #0]
 8005712:	bf08      	it	eq
 8005714:	694b      	ldreq	r3, [r1, #20]
 8005716:	600f      	str	r7, [r1, #0]
 8005718:	bf18      	it	ne
 800571a:	2300      	movne	r3, #0
 800571c:	eba6 0807 	sub.w	r8, r6, r7
 8005720:	608b      	str	r3, [r1, #8]
 8005722:	f1b8 0f00 	cmp.w	r8, #0
 8005726:	dd9c      	ble.n	8005662 <__sflush_r+0x1a>
 8005728:	4643      	mov	r3, r8
 800572a:	463a      	mov	r2, r7
 800572c:	6a21      	ldr	r1, [r4, #32]
 800572e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005730:	4628      	mov	r0, r5
 8005732:	47b0      	blx	r6
 8005734:	2800      	cmp	r0, #0
 8005736:	dc06      	bgt.n	8005746 <__sflush_r+0xfe>
 8005738:	89a3      	ldrh	r3, [r4, #12]
 800573a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800573e:	81a3      	strh	r3, [r4, #12]
 8005740:	f04f 30ff 	mov.w	r0, #4294967295
 8005744:	e78e      	b.n	8005664 <__sflush_r+0x1c>
 8005746:	4407      	add	r7, r0
 8005748:	eba8 0800 	sub.w	r8, r8, r0
 800574c:	e7e9      	b.n	8005722 <__sflush_r+0xda>
 800574e:	bf00      	nop
 8005750:	20400001 	.word	0x20400001

08005754 <_fflush_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	690b      	ldr	r3, [r1, #16]
 8005758:	4605      	mov	r5, r0
 800575a:	460c      	mov	r4, r1
 800575c:	b1db      	cbz	r3, 8005796 <_fflush_r+0x42>
 800575e:	b118      	cbz	r0, 8005768 <_fflush_r+0x14>
 8005760:	6983      	ldr	r3, [r0, #24]
 8005762:	b90b      	cbnz	r3, 8005768 <_fflush_r+0x14>
 8005764:	f7ff fa8e 	bl	8004c84 <__sinit>
 8005768:	4b0c      	ldr	r3, [pc, #48]	; (800579c <_fflush_r+0x48>)
 800576a:	429c      	cmp	r4, r3
 800576c:	d109      	bne.n	8005782 <_fflush_r+0x2e>
 800576e:	686c      	ldr	r4, [r5, #4]
 8005770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005774:	b17b      	cbz	r3, 8005796 <_fflush_r+0x42>
 8005776:	4621      	mov	r1, r4
 8005778:	4628      	mov	r0, r5
 800577a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800577e:	f7ff bf63 	b.w	8005648 <__sflush_r>
 8005782:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <_fflush_r+0x4c>)
 8005784:	429c      	cmp	r4, r3
 8005786:	d101      	bne.n	800578c <_fflush_r+0x38>
 8005788:	68ac      	ldr	r4, [r5, #8]
 800578a:	e7f1      	b.n	8005770 <_fflush_r+0x1c>
 800578c:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <_fflush_r+0x50>)
 800578e:	429c      	cmp	r4, r3
 8005790:	bf08      	it	eq
 8005792:	68ec      	ldreq	r4, [r5, #12]
 8005794:	e7ec      	b.n	8005770 <_fflush_r+0x1c>
 8005796:	2000      	movs	r0, #0
 8005798:	bd38      	pop	{r3, r4, r5, pc}
 800579a:	bf00      	nop
 800579c:	08005a50 	.word	0x08005a50
 80057a0:	08005a70 	.word	0x08005a70
 80057a4:	08005a30 	.word	0x08005a30

080057a8 <_lseek_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	4c07      	ldr	r4, [pc, #28]	; (80057c8 <_lseek_r+0x20>)
 80057ac:	4605      	mov	r5, r0
 80057ae:	4608      	mov	r0, r1
 80057b0:	4611      	mov	r1, r2
 80057b2:	2200      	movs	r2, #0
 80057b4:	6022      	str	r2, [r4, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f7fb fa3e 	bl	8000c38 <_lseek>
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	d102      	bne.n	80057c6 <_lseek_r+0x1e>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	b103      	cbz	r3, 80057c6 <_lseek_r+0x1e>
 80057c4:	602b      	str	r3, [r5, #0]
 80057c6:	bd38      	pop	{r3, r4, r5, pc}
 80057c8:	200001d0 	.word	0x200001d0

080057cc <__swhatbuf_r>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	460e      	mov	r6, r1
 80057d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d4:	2900      	cmp	r1, #0
 80057d6:	b096      	sub	sp, #88	; 0x58
 80057d8:	4614      	mov	r4, r2
 80057da:	461d      	mov	r5, r3
 80057dc:	da07      	bge.n	80057ee <__swhatbuf_r+0x22>
 80057de:	2300      	movs	r3, #0
 80057e0:	602b      	str	r3, [r5, #0]
 80057e2:	89b3      	ldrh	r3, [r6, #12]
 80057e4:	061a      	lsls	r2, r3, #24
 80057e6:	d410      	bmi.n	800580a <__swhatbuf_r+0x3e>
 80057e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ec:	e00e      	b.n	800580c <__swhatbuf_r+0x40>
 80057ee:	466a      	mov	r2, sp
 80057f0:	f000 f8b2 	bl	8005958 <_fstat_r>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	dbf2      	blt.n	80057de <__swhatbuf_r+0x12>
 80057f8:	9a01      	ldr	r2, [sp, #4]
 80057fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005802:	425a      	negs	r2, r3
 8005804:	415a      	adcs	r2, r3
 8005806:	602a      	str	r2, [r5, #0]
 8005808:	e7ee      	b.n	80057e8 <__swhatbuf_r+0x1c>
 800580a:	2340      	movs	r3, #64	; 0x40
 800580c:	2000      	movs	r0, #0
 800580e:	6023      	str	r3, [r4, #0]
 8005810:	b016      	add	sp, #88	; 0x58
 8005812:	bd70      	pop	{r4, r5, r6, pc}

08005814 <__smakebuf_r>:
 8005814:	898b      	ldrh	r3, [r1, #12]
 8005816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005818:	079d      	lsls	r5, r3, #30
 800581a:	4606      	mov	r6, r0
 800581c:	460c      	mov	r4, r1
 800581e:	d507      	bpl.n	8005830 <__smakebuf_r+0x1c>
 8005820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005824:	6023      	str	r3, [r4, #0]
 8005826:	6123      	str	r3, [r4, #16]
 8005828:	2301      	movs	r3, #1
 800582a:	6163      	str	r3, [r4, #20]
 800582c:	b002      	add	sp, #8
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	ab01      	add	r3, sp, #4
 8005832:	466a      	mov	r2, sp
 8005834:	f7ff ffca 	bl	80057cc <__swhatbuf_r>
 8005838:	9900      	ldr	r1, [sp, #0]
 800583a:	4605      	mov	r5, r0
 800583c:	4630      	mov	r0, r6
 800583e:	f7ff faab 	bl	8004d98 <_malloc_r>
 8005842:	b948      	cbnz	r0, 8005858 <__smakebuf_r+0x44>
 8005844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005848:	059a      	lsls	r2, r3, #22
 800584a:	d4ef      	bmi.n	800582c <__smakebuf_r+0x18>
 800584c:	f023 0303 	bic.w	r3, r3, #3
 8005850:	f043 0302 	orr.w	r3, r3, #2
 8005854:	81a3      	strh	r3, [r4, #12]
 8005856:	e7e3      	b.n	8005820 <__smakebuf_r+0xc>
 8005858:	4b0d      	ldr	r3, [pc, #52]	; (8005890 <__smakebuf_r+0x7c>)
 800585a:	62b3      	str	r3, [r6, #40]	; 0x28
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	6020      	str	r0, [r4, #0]
 8005860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005864:	81a3      	strh	r3, [r4, #12]
 8005866:	9b00      	ldr	r3, [sp, #0]
 8005868:	6163      	str	r3, [r4, #20]
 800586a:	9b01      	ldr	r3, [sp, #4]
 800586c:	6120      	str	r0, [r4, #16]
 800586e:	b15b      	cbz	r3, 8005888 <__smakebuf_r+0x74>
 8005870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005874:	4630      	mov	r0, r6
 8005876:	f000 f881 	bl	800597c <_isatty_r>
 800587a:	b128      	cbz	r0, 8005888 <__smakebuf_r+0x74>
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	81a3      	strh	r3, [r4, #12]
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	431d      	orrs	r5, r3
 800588c:	81a5      	strh	r5, [r4, #12]
 800588e:	e7cd      	b.n	800582c <__smakebuf_r+0x18>
 8005890:	08004c4d 	.word	0x08004c4d

08005894 <__malloc_lock>:
 8005894:	4770      	bx	lr

08005896 <__malloc_unlock>:
 8005896:	4770      	bx	lr

08005898 <_free_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4605      	mov	r5, r0
 800589c:	2900      	cmp	r1, #0
 800589e:	d045      	beq.n	800592c <_free_r+0x94>
 80058a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a4:	1f0c      	subs	r4, r1, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bfb8      	it	lt
 80058aa:	18e4      	addlt	r4, r4, r3
 80058ac:	f7ff fff2 	bl	8005894 <__malloc_lock>
 80058b0:	4a1f      	ldr	r2, [pc, #124]	; (8005930 <_free_r+0x98>)
 80058b2:	6813      	ldr	r3, [r2, #0]
 80058b4:	4610      	mov	r0, r2
 80058b6:	b933      	cbnz	r3, 80058c6 <_free_r+0x2e>
 80058b8:	6063      	str	r3, [r4, #4]
 80058ba:	6014      	str	r4, [r2, #0]
 80058bc:	4628      	mov	r0, r5
 80058be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058c2:	f7ff bfe8 	b.w	8005896 <__malloc_unlock>
 80058c6:	42a3      	cmp	r3, r4
 80058c8:	d90c      	bls.n	80058e4 <_free_r+0x4c>
 80058ca:	6821      	ldr	r1, [r4, #0]
 80058cc:	1862      	adds	r2, r4, r1
 80058ce:	4293      	cmp	r3, r2
 80058d0:	bf04      	itt	eq
 80058d2:	681a      	ldreq	r2, [r3, #0]
 80058d4:	685b      	ldreq	r3, [r3, #4]
 80058d6:	6063      	str	r3, [r4, #4]
 80058d8:	bf04      	itt	eq
 80058da:	1852      	addeq	r2, r2, r1
 80058dc:	6022      	streq	r2, [r4, #0]
 80058de:	6004      	str	r4, [r0, #0]
 80058e0:	e7ec      	b.n	80058bc <_free_r+0x24>
 80058e2:	4613      	mov	r3, r2
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	b10a      	cbz	r2, 80058ec <_free_r+0x54>
 80058e8:	42a2      	cmp	r2, r4
 80058ea:	d9fa      	bls.n	80058e2 <_free_r+0x4a>
 80058ec:	6819      	ldr	r1, [r3, #0]
 80058ee:	1858      	adds	r0, r3, r1
 80058f0:	42a0      	cmp	r0, r4
 80058f2:	d10b      	bne.n	800590c <_free_r+0x74>
 80058f4:	6820      	ldr	r0, [r4, #0]
 80058f6:	4401      	add	r1, r0
 80058f8:	1858      	adds	r0, r3, r1
 80058fa:	4282      	cmp	r2, r0
 80058fc:	6019      	str	r1, [r3, #0]
 80058fe:	d1dd      	bne.n	80058bc <_free_r+0x24>
 8005900:	6810      	ldr	r0, [r2, #0]
 8005902:	6852      	ldr	r2, [r2, #4]
 8005904:	605a      	str	r2, [r3, #4]
 8005906:	4401      	add	r1, r0
 8005908:	6019      	str	r1, [r3, #0]
 800590a:	e7d7      	b.n	80058bc <_free_r+0x24>
 800590c:	d902      	bls.n	8005914 <_free_r+0x7c>
 800590e:	230c      	movs	r3, #12
 8005910:	602b      	str	r3, [r5, #0]
 8005912:	e7d3      	b.n	80058bc <_free_r+0x24>
 8005914:	6820      	ldr	r0, [r4, #0]
 8005916:	1821      	adds	r1, r4, r0
 8005918:	428a      	cmp	r2, r1
 800591a:	bf04      	itt	eq
 800591c:	6811      	ldreq	r1, [r2, #0]
 800591e:	6852      	ldreq	r2, [r2, #4]
 8005920:	6062      	str	r2, [r4, #4]
 8005922:	bf04      	itt	eq
 8005924:	1809      	addeq	r1, r1, r0
 8005926:	6021      	streq	r1, [r4, #0]
 8005928:	605c      	str	r4, [r3, #4]
 800592a:	e7c7      	b.n	80058bc <_free_r+0x24>
 800592c:	bd38      	pop	{r3, r4, r5, pc}
 800592e:	bf00      	nop
 8005930:	20000090 	.word	0x20000090

08005934 <_read_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	4c07      	ldr	r4, [pc, #28]	; (8005954 <_read_r+0x20>)
 8005938:	4605      	mov	r5, r0
 800593a:	4608      	mov	r0, r1
 800593c:	4611      	mov	r1, r2
 800593e:	2200      	movs	r2, #0
 8005940:	6022      	str	r2, [r4, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	f7fb f934 	bl	8000bb0 <_read>
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	d102      	bne.n	8005952 <_read_r+0x1e>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	b103      	cbz	r3, 8005952 <_read_r+0x1e>
 8005950:	602b      	str	r3, [r5, #0]
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	200001d0 	.word	0x200001d0

08005958 <_fstat_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4c07      	ldr	r4, [pc, #28]	; (8005978 <_fstat_r+0x20>)
 800595c:	2300      	movs	r3, #0
 800595e:	4605      	mov	r5, r0
 8005960:	4608      	mov	r0, r1
 8005962:	4611      	mov	r1, r2
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	f7fb f94c 	bl	8000c02 <_fstat>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	d102      	bne.n	8005974 <_fstat_r+0x1c>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	b103      	cbz	r3, 8005974 <_fstat_r+0x1c>
 8005972:	602b      	str	r3, [r5, #0]
 8005974:	bd38      	pop	{r3, r4, r5, pc}
 8005976:	bf00      	nop
 8005978:	200001d0 	.word	0x200001d0

0800597c <_isatty_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4c06      	ldr	r4, [pc, #24]	; (8005998 <_isatty_r+0x1c>)
 8005980:	2300      	movs	r3, #0
 8005982:	4605      	mov	r5, r0
 8005984:	4608      	mov	r0, r1
 8005986:	6023      	str	r3, [r4, #0]
 8005988:	f7fb f94b 	bl	8000c22 <_isatty>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_isatty_r+0x1a>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	b103      	cbz	r3, 8005996 <_isatty_r+0x1a>
 8005994:	602b      	str	r3, [r5, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	200001d0 	.word	0x200001d0

0800599c <_init>:
 800599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599e:	bf00      	nop
 80059a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a2:	bc08      	pop	{r3}
 80059a4:	469e      	mov	lr, r3
 80059a6:	4770      	bx	lr

080059a8 <_fini>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr
