
samson55_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008798  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08008a38  08008a38  00018a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008b1c  08008b1c  00018b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008b24  08008b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008b28  08008b28  00018b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08008b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000530  20000074  08008ba0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200005a4  08008ba0  000205a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021382  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000361e  00000000  00000000  00041424  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001338  00000000  00000000  00044a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011f0  00000000  00000000  00045d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c8e9  00000000  00000000  00046f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000104f3  00000000  00000000  00083859  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00190039  00000000  00000000  00093d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00223d85  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000058bc  00000000  00000000  00223e00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008a20 	.word	0x08008a20

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	08008a20 	.word	0x08008a20

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000

080007b4 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3 , ptr , len , 50);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	2332      	movs	r3, #50	; 0x32
 80007c6:	68b9      	ldr	r1, [r7, #8]
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <_write+0x24>)
 80007ca:	f005 fe9b 	bl	8006504 <HAL_UART_Transmit>
    return len;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000a4 	.word	0x200000a4

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007e8:	bf00      	nop
 80007ea:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <main+0xdc>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d004      	beq.n	8000800 <main+0x24>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	1e5a      	subs	r2, r3, #1
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	dcf4      	bgt.n	80007ea <main+0xe>
  if ( timeout < 0 )
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	da01      	bge.n	800080a <main+0x2e>
  {
  Error_Handler();
 8000806:	f000 fb4f 	bl	8000ea8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f000 fd49 	bl	80012a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f85f 	bl	80008d0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000812:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <main+0xdc>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000818:	4a27      	ldr	r2, [pc, #156]	; (80008b8 <main+0xdc>)
 800081a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800081e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <main+0xdc>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000830:	2000      	movs	r0, #0
 8000832:	f002 fddf 	bl	80033f4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000836:	2100      	movs	r1, #0
 8000838:	2000      	movs	r0, #0
 800083a:	f002 fdf5 	bl	8003428 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800083e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000842:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000844:	bf00      	nop
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <main+0xdc>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d104      	bne.n	800085c <main+0x80>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	dcf4      	bgt.n	8000846 <main+0x6a>
if ( timeout < 0 )
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	da01      	bge.n	8000866 <main+0x8a>
{
Error_Handler();
 8000862:	f000 fb21 	bl	8000ea8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000866:	f000 fa19 	bl	8000c9c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800086a:	f000 f999 	bl	8000ba0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800086e:	f000 f9e3 	bl	8000c38 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000872:	f000 f91d 	bl	8000ab0 <MX_ADC1_Init>
//	  printf("hal_adc_start_it NOTOK\n\r");
//  }
//  printf("in main\n\r");

//  HAL_ADC_Start(&hadc1);
  if (HAL_ADC_Start_IT(&hadc1) != HAL_OK) {
 8000876:	4811      	ldr	r0, [pc, #68]	; (80008bc <main+0xe0>)
 8000878:	f001 f968 	bl	8001b4c <HAL_ADC_Start_IT>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <main+0xaa>
      Error_Handler();
 8000882:	f000 fb11 	bl	8000ea8 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000886:	2101      	movs	r1, #1
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <main+0xe4>)
 800088a:	f002 fd98 	bl	80033be <HAL_GPIO_TogglePin>
	  if(adc_flag==1){
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <main+0xe8>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b01      	cmp	r3, #1
 8000896:	d10a      	bne.n	80008ae <main+0xd2>
		  printf("Zmierzono: %ld\n\r", adc_value);
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <main+0xec>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <main+0xf0>)
 80008a0:	f007 f9da 	bl	8007c58 <iprintf>
		  process_adc();
 80008a4:	f000 fa88 	bl	8000db8 <process_adc>
		  adc_flag=0;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <main+0xe8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
//		  HAL_ADC_Start_IT(&hadc1);
	  }
	  HAL_Delay(1000);
 80008ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b2:	f000 fd87 	bl	80013c4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80008b6:	e7e6      	b.n	8000886 <main+0xaa>
 80008b8:	58024400 	.word	0x58024400
 80008bc:	20000538 	.word	0x20000538
 80008c0:	58020400 	.word	0x58020400
 80008c4:	20000094 	.word	0x20000094
 80008c8:	20000090 	.word	0x20000090
 80008cc:	08008a38 	.word	0x08008a38

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b0cc      	sub	sp, #304	; 0x130
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008da:	224c      	movs	r2, #76	; 0x4c
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f007 f9b2 	bl	8007c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008e8:	2220      	movs	r2, #32
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f007 f9ab 	bl	8007c48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4618      	mov	r0, r3
 80008f8:	23bc      	movs	r3, #188	; 0xbc
 80008fa:	461a      	mov	r2, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	f007 f9a3 	bl	8007c48 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000902:	2004      	movs	r0, #4
 8000904:	f002 feec 	bl	80036e0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	4b64      	ldr	r3, [pc, #400]	; (8000aa0 <SystemClock_Config+0x1d0>)
 8000910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000912:	4a63      	ldr	r2, [pc, #396]	; (8000aa0 <SystemClock_Config+0x1d0>)
 8000914:	f023 0301 	bic.w	r3, r3, #1
 8000918:	62d3      	str	r3, [r2, #44]	; 0x2c
 800091a:	4b61      	ldr	r3, [pc, #388]	; (8000aa0 <SystemClock_Config+0x1d0>)
 800091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091e:	f003 0201 	and.w	r2, r3, #1
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	4b5f      	ldr	r3, [pc, #380]	; (8000aa4 <SystemClock_Config+0x1d4>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800092e:	4a5d      	ldr	r2, [pc, #372]	; (8000aa4 <SystemClock_Config+0x1d4>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b5b      	ldr	r3, [pc, #364]	; (8000aa4 <SystemClock_Config+0x1d4>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000946:	bf00      	nop
 8000948:	4b56      	ldr	r3, [pc, #344]	; (8000aa4 <SystemClock_Config+0x1d4>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000954:	d1f8      	bne.n	8000948 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000956:	4b54      	ldr	r3, [pc, #336]	; (8000aa8 <SystemClock_Config+0x1d8>)
 8000958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095a:	f023 0303 	bic.w	r3, r3, #3
 800095e:	4a52      	ldr	r2, [pc, #328]	; (8000aa8 <SystemClock_Config+0x1d8>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800096c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000970:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000974:	2301      	movs	r3, #1
 8000976:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097a:	2340      	movs	r3, #64	; 0x40
 800097c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000980:	2302      	movs	r3, #2
 8000982:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000986:	2302      	movs	r3, #2
 8000988:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000992:	2318      	movs	r3, #24
 8000994:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000998:	2302      	movs	r3, #2
 800099a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800099e:	2304      	movs	r3, #4
 80009a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009aa:	230c      	movs	r3, #12
 80009ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fef7 	bl	80037b4 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80009cc:	f000 fa6c 	bl	8000ea8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d0:	233f      	movs	r3, #63	; 0x3f
 80009d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 fae4 	bl	8003fd4 <HAL_RCC_ClockConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0x146>
  {
    Error_Handler();
 8000a12:	f000 fa49 	bl	8000ea8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	4a24      	ldr	r2, [pc, #144]	; (8000aac <SystemClock_Config+0x1dc>)
 8000a1c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	2201      	movs	r2, #1
 8000a24:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	2213      	movs	r2, #19
 8000a2c:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	2203      	movs	r2, #3
 8000a34:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	2202      	movs	r2, #2
 8000a44:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	22c0      	movs	r2, #192	; 0xc0
 8000a4c:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	2220      	movs	r2, #32
 8000a54:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	2200      	movs	r2, #0
 8000a64:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	2200      	movs	r2, #0
 8000a78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 fe2b 	bl	80046dc <HAL_RCCEx_PeriphCLKConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x1c0>
  {
    Error_Handler();
 8000a8c:	f000 fa0c 	bl	8000ea8 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000a90:	f002 fe80 	bl	8003794 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000a94:	bf00      	nop
 8000a96:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	58000400 	.word	0x58000400
 8000aa4:	58024800 	.word	0x58024800
 8000aa8:	58024400 	.word	0x58024400
 8000aac:	000c0002 	.word	0x000c0002

08000ab0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
 8000ad0:	615a      	str	r2, [r3, #20]
 8000ad2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000ad6:	4a30      	ldr	r2, [pc, #192]	; (8000b98 <MX_ADC1_Init+0xe8>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ada:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000aee:	2204      	movs	r2, #4
 8000af0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000af8:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b30:	4818      	ldr	r0, [pc, #96]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000b32:	f000 fe6b 	bl	800180c <HAL_ADC_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b3c:	f000 f9b4 	bl	8000ea8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4812      	ldr	r0, [pc, #72]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000b4c:	f002 f884 	bl	8002c58 <HAL_ADCEx_MultiModeConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000b56:	f000 f9a7 	bl	8000ea8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_ADC1_Init+0xec>)
 8000b5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b5e:	2306      	movs	r3, #6
 8000b60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000b62:	2306      	movs	r3, #6
 8000b64:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b66:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b6a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_ADC1_Init+0xe4>)
 8000b7e:	f001 fb83 	bl	8002288 <HAL_ADC_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000b88:	f000 f98e 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000538 	.word	0x20000538
 8000b98:	40022000 	.word	0x40022000
 8000b9c:	3ac04000 	.word	0x3ac04000

08000ba0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000ba6:	4a23      	ldr	r2, [pc, #140]	; (8000c34 <MX_USART3_UART_Init+0x94>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000be8:	4811      	ldr	r0, [pc, #68]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bea:	f005 fc3b 	bl	8006464 <HAL_UART_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bf4:	f000 f958 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bfc:	f006 fc6b 	bl	80074d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c06:	f000 f94f 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4808      	ldr	r0, [pc, #32]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000c0e:	f006 fca0 	bl	8007552 <HAL_UARTEx_SetRxFifoThreshold>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c18:	f000 f946 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000c1e:	f006 fc21 	bl	8007464 <HAL_UARTEx_DisableFifoMode>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c28:	f000 f93e 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200000a4 	.word	0x200000a4
 8000c34:	40004800 	.word	0x40004800

08000c38 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c3e:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c40:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c44:	2209      	movs	r2, #9
 8000c46:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c56:	2202      	movs	r2, #2
 8000c58:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c80:	f002 fbe6 	bl	8003450 <HAL_PCD_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c8a:	f000 f90d 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000130 	.word	0x20000130
 8000c98:	40080000 	.word	0x40080000

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	4a2f      	ldr	r2, [pc, #188]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd0:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	4a28      	ldr	r2, [pc, #160]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce0:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	4a11      	ldr	r2, [pc, #68]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_GPIO_Init+0xdc>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000d4e:	f002 fb1d 	bl	800338c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000d52:	2301      	movs	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_GPIO_Init+0xe0>)
 8000d6a:	f002 f95f 	bl	800302c <HAL_GPIO_Init>

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58020400 	.word	0x58020400

08000d80 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1) {
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_ADC_ConvCpltCallback+0x2c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d108      	bne.n	8000da4 <HAL_ADC_ConvCpltCallback+0x24>
    adc_value = HAL_ADC_GetValue(hadc);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f001 f81c 	bl	8001dd0 <HAL_ADC_GetValue>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_ADC_ConvCpltCallback+0x30>)
 8000d9c:	601a      	str	r2, [r3, #0]
    adc_flag = 1;
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_ADC_ConvCpltCallback+0x34>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
  }
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40022000 	.word	0x40022000
 8000db0:	20000090 	.word	0x20000090
 8000db4:	20000094 	.word	0x20000094

08000db8 <process_adc>:

void process_adc(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
    send_adc_value(adc_value);
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <process_adc+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f804 	bl	8000dd0 <send_adc_value>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000090 	.word	0x20000090

08000dd0 <send_adc_value>:

void send_adc_value(uint16_t value) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
    uint8_t frame[5];
    frame[0] = 0xAA;
 8000dda:	23aa      	movs	r3, #170	; 0xaa
 8000ddc:	723b      	strb	r3, [r7, #8]
    frame[1] = (value >> 8) & 0xFF;
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	727b      	strb	r3, [r7, #9]
    frame[2] = value & 0xFF;
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	72bb      	strb	r3, [r7, #10]
    uint16_t crc = CRC16(&frame[1], 2);
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	3301      	adds	r3, #1
 8000df4:	2102      	movs	r1, #2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f818 	bl	8000e2c <CRC16>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	81fb      	strh	r3, [r7, #14]
    frame[3] = crc & 0xFF;
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	72fb      	strb	r3, [r7, #11]
    frame[4] = (crc >> 8) & 0xFF;
 8000e06:	89fb      	ldrh	r3, [r7, #14]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(&huart3, frame, 5, HAL_MAX_DELAY);
 8000e10:	f107 0108 	add.w	r1, r7, #8
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
 8000e18:	2205      	movs	r2, #5
 8000e1a:	4803      	ldr	r0, [pc, #12]	; (8000e28 <send_adc_value+0x58>)
 8000e1c:	f005 fb72 	bl	8006504 <HAL_UART_Transmit>
}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200000a4 	.word	0x200000a4

08000e2c <CRC16>:
            crc = (crc & 0x80) ? (crc << 1) ^ 0x07 : (crc << 1);
    }
    return crc;
}

uint16_t CRC16(const uint8_t *data, uint16_t length) {	// modbus
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e3c:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 8000e3e:	2300      	movs	r3, #0
 8000e40:	81bb      	strh	r3, [r7, #12]
 8000e42:	e026      	b.n	8000e92 <CRC16+0x66>
        crc ^= data[i];
 8000e44:	89bb      	ldrh	r3, [r7, #12]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	89fb      	ldrh	r3, [r7, #14]
 8000e50:	4053      	eors	r3, r2
 8000e52:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8000e54:	2300      	movs	r3, #0
 8000e56:	72fb      	strb	r3, [r7, #11]
 8000e58:	e015      	b.n	8000e86 <CRC16+0x5a>
            if (crc & 0x0001) {
 8000e5a:	89fb      	ldrh	r3, [r7, #14]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00a      	beq.n	8000e7a <CRC16+0x4e>
                crc >>= 1;
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	085b      	lsrs	r3, r3, #1
 8000e68:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 8000e6a:	89fb      	ldrh	r3, [r7, #14]
 8000e6c:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000e70:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000e74:	43db      	mvns	r3, r3
 8000e76:	81fb      	strh	r3, [r7, #14]
 8000e78:	e002      	b.n	8000e80 <CRC16+0x54>
            } else {
                crc >>= 1;
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	085b      	lsrs	r3, r3, #1
 8000e7e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8000e80:	7afb      	ldrb	r3, [r7, #11]
 8000e82:	3301      	adds	r3, #1
 8000e84:	72fb      	strb	r3, [r7, #11]
 8000e86:	7afb      	ldrb	r3, [r7, #11]
 8000e88:	2b07      	cmp	r3, #7
 8000e8a:	d9e6      	bls.n	8000e5a <CRC16+0x2e>
    for (uint16_t i = 0; i < length; i++) {
 8000e8c:	89bb      	ldrh	r3, [r7, #12]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	81bb      	strh	r3, [r7, #12]
 8000e92:	89ba      	ldrh	r2, [r7, #12]
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d3d4      	bcc.n	8000e44 <CRC16+0x18>
            }
        }
    }
    return crc;
 8000e9a:	89fb      	ldrh	r3, [r7, #14]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_MspInit+0x30>)
 8000ec0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ec4:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_MspInit+0x30>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_MspInit+0x30>)
 8000ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	58024400 	.word	0x58024400

08000eec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <HAL_ADC_MspInit+0x90>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d131      	bne.n	8000f72 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_ADC_MspInit+0x94>)
 8000f10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f14:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <HAL_ADC_MspInit+0x94>)
 8000f16:	f043 0320 	orr.w	r3, r3, #32
 8000f1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_ADC_MspInit+0x94>)
 8000f20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f24:	f003 0320 	and.w	r3, r3, #32
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_ADC_MspInit+0x94>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f32:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <HAL_ADC_MspInit+0x94>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_ADC_MspInit+0x94>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4809      	ldr	r0, [pc, #36]	; (8000f84 <HAL_ADC_MspInit+0x98>)
 8000f5e:	f002 f865 	bl	800302c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2012      	movs	r0, #18
 8000f68:	f002 f82b 	bl	8002fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f6c:	2012      	movs	r0, #18
 8000f6e:	f002 f842 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	; 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40022000 	.word	0x40022000
 8000f80:	58024400 	.word	0x58024400
 8000f84:	58020000 	.word	0x58020000

08000f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d12e      	bne.n	8001008 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8000fac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fb0:	4a18      	ldr	r2, [pc, #96]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8000fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8000fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	4a11      	ldr	r2, [pc, #68]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fe6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <HAL_UART_MspInit+0x90>)
 8001004:	f002 f812 	bl	800302c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40004800 	.word	0x40004800
 8001014:	58024400 	.word	0x58024400
 8001018:	58020c00 	.word	0x58020c00

0800101c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <HAL_PCD_MspInit+0xa4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d13b      	bne.n	80010b6 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_PCD_MspInit+0xa8>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001044:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <HAL_PCD_MspInit+0xa8>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <HAL_PCD_MspInit+0xa8>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800105c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800106e:	230a      	movs	r3, #10
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4813      	ldr	r0, [pc, #76]	; (80010c8 <HAL_PCD_MspInit+0xac>)
 800107a:	f001 ffd7 	bl	800302c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800107e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	480d      	ldr	r0, [pc, #52]	; (80010c8 <HAL_PCD_MspInit+0xac>)
 8001094:	f001 ffca 	bl	800302c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_PCD_MspInit+0xa8>)
 800109a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800109e:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <HAL_PCD_MspInit+0xa8>)
 80010a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_PCD_MspInit+0xa8>)
 80010aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	; 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40080000 	.word	0x40080000
 80010c4:	58024400 	.word	0x58024400
 80010c8:	58020000 	.word	0x58020000

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <MemManage_Handler+0x4>

080010e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001120:	f000 f930 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <ADC_IRQHandler+0x10>)
 800112e:	f000 fe5d 	bl	8001dec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000538 	.word	0x20000538

0800113c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	e00a      	b.n	8001164 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800114e:	f3af 8000 	nop.w
 8001152:	4601      	mov	r1, r0
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	60ba      	str	r2, [r7, #8]
 800115a:	b2ca      	uxtb	r2, r1
 800115c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3301      	adds	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	429a      	cmp	r2, r3
 800116a:	dbf0      	blt.n	800114e <_read+0x12>
	}

return len;
 800116c:	687b      	ldr	r3, [r7, #4]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
	return -1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119e:	605a      	str	r2, [r3, #4]
	return 0;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <_isatty>:

int _isatty(int file)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
	return 1;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
	return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	; (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f006 fcf0 	bl	8007bf4 <__errno>
 8001214:	4602      	mov	r2, r0
 8001216:	230c      	movs	r3, #12
 8001218:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <_sbrk+0x64>)
 8001230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20020000 	.word	0x20020000
 8001240:	00000400 	.word	0x00000400
 8001244:	20000098 	.word	0x20000098
 8001248:	200005a8 	.word	0x200005a8

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001284 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001250:	f7ff fa16 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001254:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001256:	e003      	b.n	8001260 <LoopCopyDataInit>

08001258 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800125a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800125c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800125e:	3104      	adds	r1, #4

08001260 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001260:	480a      	ldr	r0, [pc, #40]	; (800128c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001264:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001266:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001268:	d3f6      	bcc.n	8001258 <CopyDataInit>
  ldr  r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800126c:	e002      	b.n	8001274 <LoopFillZerobss>

0800126e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800126e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001270:	f842 3b04 	str.w	r3, [r2], #4

08001274 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001276:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001278:	d3f9      	bcc.n	800126e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127a:	f006 fcc1 	bl	8007c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff faad 	bl	80007dc <main>
  bx  lr    
 8001282:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001284:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001288:	08008b2c 	.word	0x08008b2c
  ldr  r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001290:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001294:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001298:	200005a4 	.word	0x200005a4

0800129c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC3_IRQHandler>
	...

080012a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a6:	2003      	movs	r0, #3
 80012a8:	f001 fe80 	bl	8002fac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012ac:	f003 f848 	bl	8004340 <HAL_RCC_GetSysClockFreq>
 80012b0:	4601      	mov	r1, r0
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_Init+0x68>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	4a13      	ldr	r2, [pc, #76]	; (800130c <HAL_Init+0x6c>)
 80012be:	5cd3      	ldrb	r3, [r2, r3]
 80012c0:	f003 031f 	and.w	r3, r3, #31
 80012c4:	fa21 f303 	lsr.w	r3, r1, r3
 80012c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_Init+0x68>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <HAL_Init+0x6c>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	fa22 f303 	lsr.w	r3, r2, r3
 80012e0:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <HAL_Init+0x70>)
 80012e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <HAL_Init+0x74>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ea:	2000      	movs	r0, #0
 80012ec:	f000 f814 	bl	8001318 <HAL_InitTick>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e002      	b.n	8001300 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012fa:	f7ff fddd 	bl	8000eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	58024400 	.word	0x58024400
 800130c:	08008a5c 	.word	0x08008a5c
 8001310:	20000004 	.word	0x20000004
 8001314:	20000000 	.word	0x20000000

08001318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_InitTick+0x60>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e021      	b.n	8001370 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <HAL_InitTick+0x64>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_InitTick+0x60>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fe65 	bl	8003012 <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f001 fe2f 	bl	8002fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_InitTick+0x68>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000000c 	.word	0x2000000c
 800137c:	20000000 	.word	0x20000000
 8001380:	20000008 	.word	0x20000008

08001384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	2000000c 	.word	0x2000000c
 80013a8:	2000059c 	.word	0x2000059c

080013ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	2000059c 	.word	0x2000059c

080013c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff ffee 	bl	80013ac <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_Delay+0x40>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffde 	bl	80013ac <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000000c 	.word	0x2000000c

08001408 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_GetREVID+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	0c1b      	lsrs	r3, r3, #16
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	5c001000 	.word	0x5c001000

08001420 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	609a      	str	r2, [r3, #8]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3360      	adds	r3, #96	; 0x60
 800149a:	461a      	mov	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	431a      	orrs	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80014bc:	bf00      	nop
 80014be:	371c      	adds	r7, #28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	431a      	orrs	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	611a      	str	r2, [r3, #16]
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b087      	sub	sp, #28
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3360      	adds	r3, #96	; 0x60
 800150a:	461a      	mov	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	431a      	orrs	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	601a      	str	r2, [r3, #0]
  }
}
 8001524:	bf00      	nop
 8001526:	371c      	adds	r7, #28
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001556:	b480      	push	{r7}
 8001558:	b087      	sub	sp, #28
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3330      	adds	r3, #48	; 0x30
 8001566:	461a      	mov	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	0a1b      	lsrs	r3, r3, #8
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	4413      	add	r3, r2
 8001574:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	f003 031f 	and.w	r3, r3, #31
 8001580:	211f      	movs	r1, #31
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	401a      	ands	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	0e9b      	lsrs	r3, r3, #26
 800158e:	f003 011f 	and.w	r1, r3, #31
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	431a      	orrs	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015a2:	bf00      	nop
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3314      	adds	r3, #20
 80015e4:	461a      	mov	r2, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	0e5b      	lsrs	r3, r3, #25
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	4413      	add	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	0d1b      	lsrs	r3, r3, #20
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	2107      	movs	r1, #7
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	401a      	ands	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	0d1b      	lsrs	r3, r3, #20
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	431a      	orrs	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800161e:	bf00      	nop
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001644:	43db      	mvns	r3, r3
 8001646:	401a      	ands	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0318 	and.w	r3, r3, #24
 800164e:	4908      	ldr	r1, [pc, #32]	; (8001670 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001650:	40d9      	lsrs	r1, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	400b      	ands	r3, r1
 8001656:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800165a:	431a      	orrs	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	000fffff 	.word	0x000fffff

08001674 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 031f 	and.w	r3, r3, #31
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <LL_ADC_DisableDeepPowerDown+0x20>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6093      	str	r3, [r2, #8]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	5fffffc0 	.word	0x5fffffc0

080016d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016e4:	d101      	bne.n	80016ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <LL_ADC_EnableInternalRegulator+0x24>)
 8001706:	4013      	ands	r3, r2
 8001708:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	6fffffc0 	.word	0x6fffffc0

08001720 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001734:	d101      	bne.n	800173a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <LL_ADC_Enable+0x24>)
 8001756:	4013      	ands	r3, r2
 8001758:	f043 0201 	orr.w	r2, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	7fffffc0 	.word	0x7fffffc0

08001770 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <LL_ADC_IsEnabled+0x18>
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <LL_ADC_IsEnabled+0x1a>
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <LL_ADC_REG_StartConversion+0x24>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	f043 0204 	orr.w	r2, r3, #4
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	7fffffc0 	.word	0x7fffffc0

080017c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d101      	bne.n	80017d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d101      	bne.n	80017fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e18e      	b.n	8001b44 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fb59 	bl	8000eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff3f 	bl	80016d0 <LL_ADC_IsDeepPowerDownEnabled>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d004      	beq.n	8001862 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff25 	bl	80016ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff5a 	bl	8001720 <LL_ADC_IsInternalRegulatorEnabled>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d113      	bne.n	800189a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff3e 	bl	80016f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800187c:	4b9a      	ldr	r3, [pc, #616]	; (8001ae8 <HAL_ADC_Init+0x2dc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	099b      	lsrs	r3, r3, #6
 8001882:	4a9a      	ldr	r2, [pc, #616]	; (8001aec <HAL_ADC_Init+0x2e0>)
 8001884:	fba2 2303 	umull	r2, r3, r2, r3
 8001888:	099b      	lsrs	r3, r3, #6
 800188a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800188c:	e002      	b.n	8001894 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3b01      	subs	r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f9      	bne.n	800188e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff3e 	bl	8001720 <LL_ADC_IsInternalRegulatorEnabled>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10d      	bne.n	80018c6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ae:	f043 0210 	orr.w	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff78 	bl	80017c0 <LL_ADC_REG_IsConversionOngoing>
 80018d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f040 8129 	bne.w	8001b32 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 8125 	bne.w	8001b32 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018f0:	f043 0202 	orr.w	r2, r3, #2
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff37 	bl	8001770 <LL_ADC_IsEnabled>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d136      	bne.n	8001976 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a78      	ldr	r2, [pc, #480]	; (8001af0 <HAL_ADC_Init+0x2e4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d004      	beq.n	800191c <HAL_ADC_Init+0x110>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a77      	ldr	r2, [pc, #476]	; (8001af4 <HAL_ADC_Init+0x2e8>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d10e      	bne.n	800193a <HAL_ADC_Init+0x12e>
 800191c:	4874      	ldr	r0, [pc, #464]	; (8001af0 <HAL_ADC_Init+0x2e4>)
 800191e:	f7ff ff27 	bl	8001770 <LL_ADC_IsEnabled>
 8001922:	4604      	mov	r4, r0
 8001924:	4873      	ldr	r0, [pc, #460]	; (8001af4 <HAL_ADC_Init+0x2e8>)
 8001926:	f7ff ff23 	bl	8001770 <LL_ADC_IsEnabled>
 800192a:	4603      	mov	r3, r0
 800192c:	4323      	orrs	r3, r4
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf0c      	ite	eq
 8001932:	2301      	moveq	r3, #1
 8001934:	2300      	movne	r3, #0
 8001936:	b2db      	uxtb	r3, r3
 8001938:	e008      	b.n	800194c <HAL_ADC_Init+0x140>
 800193a:	486f      	ldr	r0, [pc, #444]	; (8001af8 <HAL_ADC_Init+0x2ec>)
 800193c:	f7ff ff18 	bl	8001770 <LL_ADC_IsEnabled>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf0c      	ite	eq
 8001946:	2301      	moveq	r3, #1
 8001948:	2300      	movne	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d012      	beq.n	8001976 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a66      	ldr	r2, [pc, #408]	; (8001af0 <HAL_ADC_Init+0x2e4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d004      	beq.n	8001964 <HAL_ADC_Init+0x158>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a65      	ldr	r2, [pc, #404]	; (8001af4 <HAL_ADC_Init+0x2e8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_ADC_Init+0x15c>
 8001964:	4a65      	ldr	r2, [pc, #404]	; (8001afc <HAL_ADC_Init+0x2f0>)
 8001966:	e000      	b.n	800196a <HAL_ADC_Init+0x15e>
 8001968:	4a65      	ldr	r2, [pc, #404]	; (8001b00 <HAL_ADC_Init+0x2f4>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4619      	mov	r1, r3
 8001970:	4610      	mov	r0, r2
 8001972:	f7ff fd55 	bl	8001420 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001976:	f7ff fd47 	bl	8001408 <HAL_GetREVID>
 800197a:	4602      	mov	r2, r0
 800197c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001980:	429a      	cmp	r2, r3
 8001982:	d914      	bls.n	80019ae <HAL_ADC_Init+0x1a2>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b10      	cmp	r3, #16
 800198a:	d110      	bne.n	80019ae <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7d5b      	ldrb	r3, [r3, #21]
 8001990:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001996:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800199c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7f1b      	ldrb	r3, [r3, #28]
 80019a2:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80019a4:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019a6:	f043 030c 	orr.w	r3, r3, #12
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	e00d      	b.n	80019ca <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7d5b      	ldrb	r3, [r3, #21]
 80019b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80019be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7f1b      	ldrb	r3, [r3, #28]
 80019c4:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7f1b      	ldrb	r3, [r3, #28]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d106      	bne.n	80019e0 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	045b      	lsls	r3, r3, #17
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d009      	beq.n	80019fc <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <HAL_ADC_Init+0x2f8>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	69b9      	ldr	r1, [r7, #24]
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fed3 	bl	80017c0 <LL_ADC_REG_IsConversionOngoing>
 8001a1a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fee0 	bl	80017e6 <LL_ADC_INJ_IsConversionOngoing>
 8001a26:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d14a      	bne.n	8001ac4 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d147      	bne.n	8001ac4 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7d1b      	ldrb	r3, [r3, #20]
 8001a38:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <HAL_ADC_Init+0x2fc>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	69b9      	ldr	r1, [r7, #24]
 8001a52:	430b      	orrs	r3, r1
 8001a54:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d11b      	bne.n	8001a98 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <HAL_ADC_Init+0x300>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a74:	3a01      	subs	r2, #1
 8001a76:	0411      	lsls	r1, r2, #16
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a7c:	4311      	orrs	r1, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a82:	4311      	orrs	r1, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 0201 	orr.w	r2, r2, #1
 8001a94:	611a      	str	r2, [r3, #16]
 8001a96:	e007      	b.n	8001aa8 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 ff7a 	bl	80029b8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d121      	bne.n	8001b10 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f023 010f 	bic.w	r1, r3, #15
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	1e5a      	subs	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ae4:	e01c      	b.n	8001b20 <HAL_ADC_Init+0x314>
 8001ae6:	bf00      	nop
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	053e2d63 	.word	0x053e2d63
 8001af0:	40022000 	.word	0x40022000
 8001af4:	40022100 	.word	0x40022100
 8001af8:	58026000 	.word	0x58026000
 8001afc:	40022300 	.word	0x40022300
 8001b00:	58026300 	.word	0x58026300
 8001b04:	fff0c003 	.word	0xfff0c003
 8001b08:	ffffbffc 	.word	0xffffbffc
 8001b0c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 020f 	bic.w	r2, r2, #15
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	f023 0303 	bic.w	r3, r3, #3
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	655a      	str	r2, [r3, #84]	; 0x54
 8001b30:	e007      	b.n	8001b42 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b36:	f043 0210 	orr.w	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b42:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3724      	adds	r7, #36	; 0x24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}

08001b4c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a98      	ldr	r2, [pc, #608]	; (8001dbc <HAL_ADC_Start_IT+0x270>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d004      	beq.n	8001b68 <HAL_ADC_Start_IT+0x1c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a97      	ldr	r2, [pc, #604]	; (8001dc0 <HAL_ADC_Start_IT+0x274>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_Start_IT+0x20>
 8001b68:	4b96      	ldr	r3, [pc, #600]	; (8001dc4 <HAL_ADC_Start_IT+0x278>)
 8001b6a:	e000      	b.n	8001b6e <HAL_ADC_Start_IT+0x22>
 8001b6c:	4b96      	ldr	r3, [pc, #600]	; (8001dc8 <HAL_ADC_Start_IT+0x27c>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fd80 	bl	8001674 <LL_ADC_GetMultimode>
 8001b74:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fe20 	bl	80017c0 <LL_ADC_REG_IsConversionOngoing>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 8110 	bne.w	8001da8 <HAL_ADC_Start_IT+0x25c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_ADC_Start_IT+0x4a>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e10d      	b.n	8001db2 <HAL_ADC_Start_IT+0x266>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 fe86 	bl	80028b0 <ADC_Enable>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 80f7 	bne.w	8001d9e <HAL_ADC_Start_IT+0x252>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001bb4:	4b85      	ldr	r3, [pc, #532]	; (8001dcc <HAL_ADC_Start_IT+0x280>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a7e      	ldr	r2, [pc, #504]	; (8001dc0 <HAL_ADC_Start_IT+0x274>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d002      	beq.n	8001bd0 <HAL_ADC_Start_IT+0x84>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	e000      	b.n	8001bd2 <HAL_ADC_Start_IT+0x86>
 8001bd0:	4b7a      	ldr	r3, [pc, #488]	; (8001dbc <HAL_ADC_Start_IT+0x270>)
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d002      	beq.n	8001be0 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d105      	bne.n	8001bec <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfc:	f023 0206 	bic.w	r2, r3, #6
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	659a      	str	r2, [r3, #88]	; 0x58
 8001c04:	e002      	b.n	8001c0c <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	221c      	movs	r2, #28
 8001c12:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 021c 	bic.w	r2, r2, #28
 8001c2a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d108      	bne.n	8001c46 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0208 	orr.w	r2, r2, #8
 8001c42:	605a      	str	r2, [r3, #4]
          break;
 8001c44:	e008      	b.n	8001c58 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0204 	orr.w	r2, r2, #4
 8001c54:	605a      	str	r2, [r3, #4]
          break;
 8001c56:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d107      	bne.n	8001c70 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0210 	orr.w	r2, r2, #16
 8001c6e:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_ADC_Start_IT+0x274>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d002      	beq.n	8001c80 <HAL_ADC_Start_IT+0x134>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	e000      	b.n	8001c82 <HAL_ADC_Start_IT+0x136>
 8001c80:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <HAL_ADC_Start_IT+0x270>)
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d008      	beq.n	8001c9c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d002      	beq.n	8001c9c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	d13b      	bne.n	8001d14 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d02d      	beq.n	8001d06 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d110      	bne.n	8001ce4 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0220 	bic.w	r2, r2, #32
 8001cd0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ce0:	605a      	str	r2, [r3, #4]
              break;
 8001ce2:	e011      	b.n	8001d08 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cf2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0220 	orr.w	r2, r2, #32
 8001d02:	605a      	str	r2, [r3, #4]
              break;
 8001d04:	e000      	b.n	8001d08 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 8001d06:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fd43 	bl	8001798 <LL_ADC_REG_StartConversion>
 8001d12:	e04d      	b.n	8001db0 <HAL_ADC_Start_IT+0x264>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a26      	ldr	r2, [pc, #152]	; (8001dc0 <HAL_ADC_Start_IT+0x274>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d002      	beq.n	8001d30 <HAL_ADC_Start_IT+0x1e4>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	e000      	b.n	8001d32 <HAL_ADC_Start_IT+0x1e6>
 8001d30:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <HAL_ADC_Start_IT+0x270>)
 8001d32:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d036      	beq.n	8001dae <HAL_ADC_Start_IT+0x262>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d110      	bne.n	8001d7a <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0220 	bic.w	r2, r2, #32
 8001d66:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d76:	605a      	str	r2, [r3, #4]
              break;
 8001d78:	e01a      	b.n	8001db0 <HAL_ADC_Start_IT+0x264>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d88:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0220 	orr.w	r2, r2, #32
 8001d98:	605a      	str	r2, [r3, #4]
              break;
 8001d9a:	bf00      	nop
 8001d9c:	e008      	b.n	8001db0 <HAL_ADC_Start_IT+0x264>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001da6:	e003      	b.n	8001db0 <HAL_ADC_Start_IT+0x264>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001da8:	2302      	movs	r3, #2
 8001daa:	75fb      	strb	r3, [r7, #23]
 8001dac:	e000      	b.n	8001db0 <HAL_ADC_Start_IT+0x264>
        }
 8001dae:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40022100 	.word	0x40022100
 8001dc4:	40022300 	.word	0x40022300
 8001dc8:	58026300 	.word	0x58026300
 8001dcc:	fffff0fe 	.word	0xfffff0fe

08001dd0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a87      	ldr	r2, [pc, #540]	; (800202c <HAL_ADC_IRQHandler+0x240>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d004      	beq.n	8001e1c <HAL_ADC_IRQHandler+0x30>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a86      	ldr	r2, [pc, #536]	; (8002030 <HAL_ADC_IRQHandler+0x244>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_IRQHandler+0x34>
 8001e1c:	4b85      	ldr	r3, [pc, #532]	; (8002034 <HAL_ADC_IRQHandler+0x248>)
 8001e1e:	e000      	b.n	8001e22 <HAL_ADC_IRQHandler+0x36>
 8001e20:	4b85      	ldr	r3, [pc, #532]	; (8002038 <HAL_ADC_IRQHandler+0x24c>)
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fc26 	bl	8001674 <LL_ADC_GetMultimode>
 8001e28:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d017      	beq.n	8001e64 <HAL_ADC_IRQHandler+0x78>
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d012      	beq.n	8001e64 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fef4 	bl	8002c44 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2202      	movs	r2, #2
 8001e62:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d004      	beq.n	8001e78 <HAL_ADC_IRQHandler+0x8c>
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10a      	bne.n	8001e8e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8083 	beq.w	8001f8a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d07d      	beq.n	8001f8a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d105      	bne.n	8001ea6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fb40 	bl	8001530 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d062      	beq.n	8001f7c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a5d      	ldr	r2, [pc, #372]	; (8002030 <HAL_ADC_IRQHandler+0x244>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d002      	beq.n	8001ec6 <HAL_ADC_IRQHandler+0xda>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	e000      	b.n	8001ec8 <HAL_ADC_IRQHandler+0xdc>
 8001ec6:	4b59      	ldr	r3, [pc, #356]	; (800202c <HAL_ADC_IRQHandler+0x240>)
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d008      	beq.n	8001ee2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d005      	beq.n	8001ee2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	d002      	beq.n	8001ee2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b09      	cmp	r3, #9
 8001ee0:	d104      	bne.n	8001eec <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	623b      	str	r3, [r7, #32]
 8001eea:	e00c      	b.n	8001f06 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a4f      	ldr	r2, [pc, #316]	; (8002030 <HAL_ADC_IRQHandler+0x244>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d002      	beq.n	8001efc <HAL_ADC_IRQHandler+0x110>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	e000      	b.n	8001efe <HAL_ADC_IRQHandler+0x112>
 8001efc:	4b4b      	ldr	r3, [pc, #300]	; (800202c <HAL_ADC_IRQHandler+0x240>)
 8001efe:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d135      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d12e      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fc4c 	bl	80017c0 <LL_ADC_REG_IsConversionOngoing>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d11a      	bne.n	8001f64 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 020c 	bic.w	r2, r2, #12
 8001f3c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d112      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
 8001f62:	e00b      	b.n	8001f7c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f043 0210 	orr.w	r2, r3, #16
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	f043 0201 	orr.w	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7fe feff 	bl	8000d80 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	220c      	movs	r2, #12
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x1b2>
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a0 	beq.w	80020ea <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 809a 	beq.w	80020ea <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff faeb 	bl	80015ae <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001fd8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff faa6 	bl	8001530 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fe4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a11      	ldr	r2, [pc, #68]	; (8002030 <HAL_ADC_IRQHandler+0x244>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d002      	beq.n	8001ff6 <HAL_ADC_IRQHandler+0x20a>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	e000      	b.n	8001ff8 <HAL_ADC_IRQHandler+0x20c>
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_ADC_IRQHandler+0x240>)
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d008      	beq.n	8002012 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2b06      	cmp	r3, #6
 800200a:	d002      	beq.n	8002012 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b07      	cmp	r3, #7
 8002010:	d104      	bne.n	800201c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	623b      	str	r3, [r7, #32]
 800201a:	e014      	b.n	8002046 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a03      	ldr	r2, [pc, #12]	; (8002030 <HAL_ADC_IRQHandler+0x244>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00a      	beq.n	800203c <HAL_ADC_IRQHandler+0x250>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	e008      	b.n	800203e <HAL_ADC_IRQHandler+0x252>
 800202c:	40022000 	.word	0x40022000
 8002030:	40022100 	.word	0x40022100
 8002034:	40022300 	.word	0x40022300
 8002038:	58026300 	.word	0x58026300
 800203c:	4b84      	ldr	r3, [pc, #528]	; (8002250 <HAL_ADC_IRQHandler+0x464>)
 800203e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10c      	bne.n	8002066 <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002052:	2b00      	cmp	r3, #0
 8002054:	d142      	bne.n	80020dc <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d03f      	beq.n	80020dc <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002062:	2b00      	cmp	r3, #0
 8002064:	d13a      	bne.n	80020dc <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b40      	cmp	r3, #64	; 0x40
 8002072:	d133      	bne.n	80020dc <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d12e      	bne.n	80020dc <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fbaf 	bl	80017e6 <LL_ADC_INJ_IsConversionOngoing>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d11a      	bne.n	80020c4 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800209c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d112      	bne.n	80020dc <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
 80020c2:	e00b      	b.n	80020dc <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c8:	f043 0210 	orr.w	r2, r3, #16
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 fd89 	bl	8002bf4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2260      	movs	r2, #96	; 0x60
 80020e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d011      	beq.n	8002118 <HAL_ADC_IRQHandler+0x32c>
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f8a8 	bl	8002260 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <HAL_ADC_IRQHandler+0x35c>
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00d      	beq.n	8002148 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fd6f 	bl	8002c1c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002146:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800214e:	2b00      	cmp	r3, #0
 8002150:	d012      	beq.n	8002178 <HAL_ADC_IRQHandler+0x38c>
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00d      	beq.n	8002178 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 fd61 	bl	8002c30 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002176:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	d043      	beq.n	800220a <HAL_ADC_IRQHandler+0x41e>
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	d03e      	beq.n	800220a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002194:	2301      	movs	r3, #1
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
 8002198:	e021      	b.n	80021de <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d015      	beq.n	80021cc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2a      	ldr	r2, [pc, #168]	; (8002250 <HAL_ADC_IRQHandler+0x464>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d004      	beq.n	80021b4 <HAL_ADC_IRQHandler+0x3c8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a29      	ldr	r2, [pc, #164]	; (8002254 <HAL_ADC_IRQHandler+0x468>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x3cc>
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <HAL_ADC_IRQHandler+0x46c>)
 80021b6:	e000      	b.n	80021ba <HAL_ADC_IRQHandler+0x3ce>
 80021b8:	4b28      	ldr	r3, [pc, #160]	; (800225c <HAL_ADC_IRQHandler+0x470>)
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fa68 	bl	8001690 <LL_ADC_GetMultiDMATransfer>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80021c6:	2301      	movs	r3, #1
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ca:	e008      	b.n	80021de <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80021da:	2301      	movs	r3, #1
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d10e      	bne.n	8002202 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f4:	f043 0202 	orr.w	r2, r3, #2
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f839 	bl	8002274 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2210      	movs	r2, #16
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002210:	2b00      	cmp	r3, #0
 8002212:	d018      	beq.n	8002246 <HAL_ADC_IRQHandler+0x45a>
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221a:	2b00      	cmp	r3, #0
 800221c:	d013      	beq.n	8002246 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	f043 0208 	orr.w	r2, r3, #8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800223e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fce1 	bl	8002c08 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002246:	bf00      	nop
 8002248:	3728      	adds	r7, #40	; 0x28
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40022000 	.word	0x40022000
 8002254:	40022100 	.word	0x40022100
 8002258:	40022300 	.word	0x40022300
 800225c:	58026300 	.word	0x58026300

08002260 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b099      	sub	sp, #100	; 0x64
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a99      	ldr	r2, [pc, #612]	; (8002508 <HAL_ADC_ConfigChannel+0x280>)
 80022a2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x2a>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e2e6      	b.n	8002880 <HAL_ADC_ConfigChannel+0x5f8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fa7e 	bl	80017c0 <LL_ADC_REG_IsConversionOngoing>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 82cb 	bne.w	8002862 <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d108      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x62>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	2201      	movs	r2, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	e00f      	b.n	800230a <HAL_ADC_ConfigChannel+0x82>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2201      	movs	r2, #1
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	69d1      	ldr	r1, [r2, #28]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	430b      	orrs	r3, r1
 8002316:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	f7ff f916 	bl	8001556 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fa46 	bl	80017c0 <LL_ADC_REG_IsConversionOngoing>
 8002334:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fa53 	bl	80017e6 <LL_ADC_INJ_IsConversionOngoing>
 8002340:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002344:	2b00      	cmp	r3, #0
 8002346:	f040 80b3 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800234a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 80af 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6819      	ldr	r1, [r3, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	461a      	mov	r2, r3
 8002360:	f7ff f938 	bl	80015d4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002364:	4b69      	ldr	r3, [pc, #420]	; (800250c <HAL_ADC_ConfigChannel+0x284>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800236c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002370:	d10b      	bne.n	800238a <HAL_ADC_ConfigChannel+0x102>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	e01d      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x13e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10b      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x128>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	e00a      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x13e>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d027      	beq.n	8002420 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6919      	ldr	r1, [r3, #16]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023de:	f7ff f853 	bl	8001488 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6919      	ldr	r1, [r3, #16]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	7e5b      	ldrb	r3, [r3, #25]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d102      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x170>
 80023f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80023f6:	e000      	b.n	80023fa <HAL_ADC_ConfigChannel+0x172>
 80023f8:	2300      	movs	r3, #0
 80023fa:	461a      	mov	r2, r3
 80023fc:	f7ff f87d 	bl	80014fa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6919      	ldr	r1, [r3, #16]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	7e1b      	ldrb	r3, [r3, #24]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d102      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x18e>
 8002410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002414:	e000      	b.n	8002418 <HAL_ADC_ConfigChannel+0x190>
 8002416:	2300      	movs	r3, #0
 8002418:	461a      	mov	r2, r3
 800241a:	f7ff f855 	bl	80014c8 <LL_ADC_SetDataRightShift>
 800241e:	e047      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002426:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	069b      	lsls	r3, r3, #26
 8002430:	429a      	cmp	r2, r3
 8002432:	d107      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002442:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800244a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	069b      	lsls	r3, r3, #26
 8002454:	429a      	cmp	r2, r3
 8002456:	d107      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002466:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800246e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	069b      	lsls	r3, r3, #26
 8002478:	429a      	cmp	r2, r3
 800247a:	d107      	bne.n	800248c <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800248a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002492:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	069b      	lsls	r3, r3, #26
 800249c:	429a      	cmp	r2, r3
 800249e:	d107      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024ae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff f95b 	bl	8001770 <LL_ADC_IsEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f040 81d9 	bne.w	8002874 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f7ff f8ac 	bl	800162c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <HAL_ADC_ConfigChannel+0x280>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	f040 8101 	bne.w	80026e2 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10f      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x288>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	3301      	adds	r3, #1
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	bf94      	ite	ls
 8002500:	2301      	movls	r3, #1
 8002502:	2300      	movhi	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e016      	b.n	8002536 <HAL_ADC_ConfigChannel+0x2ae>
 8002508:	47ff0000 	.word	0x47ff0000
 800250c:	5c001000 	.word	0x5c001000
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800251e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	3301      	adds	r3, #1
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	2b09      	cmp	r3, #9
 800252e:	bf94      	ite	ls
 8002530:	2301      	movls	r3, #1
 8002532:	2300      	movhi	r3, #0
 8002534:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002536:	2b00      	cmp	r3, #0
 8002538:	d064      	beq.n	8002604 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002542:	2b00      	cmp	r3, #0
 8002544:	d107      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x2ce>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	0e9b      	lsrs	r3, r3, #26
 800254c:	3301      	adds	r3, #1
 800254e:	069b      	lsls	r3, r3, #26
 8002550:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002554:	e00e      	b.n	8002574 <HAL_ADC_ConfigChannel+0x2ec>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x30c>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0e9b      	lsrs	r3, r3, #26
 8002586:	3301      	adds	r3, #1
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2101      	movs	r1, #1
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	e010      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x32e>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	ea42 0103 	orr.w	r1, r2, r3
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10a      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x354>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	0e9b      	lsrs	r3, r3, #26
 80025cc:	3301      	adds	r3, #1
 80025ce:	f003 021f 	and.w	r2, r3, #31
 80025d2:	4613      	mov	r3, r2
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	4413      	add	r3, r2
 80025d8:	051b      	lsls	r3, r3, #20
 80025da:	e011      	b.n	8002600 <HAL_ADC_ConfigChannel+0x378>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	3301      	adds	r3, #1
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002600:	430b      	orrs	r3, r1
 8002602:	e069      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800260c:	2b00      	cmp	r3, #0
 800260e:	d107      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x398>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	3301      	adds	r3, #1
 8002618:	069b      	lsls	r3, r3, #26
 800261a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800261e:	e00e      	b.n	800263e <HAL_ADC_ConfigChannel+0x3b6>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	61fb      	str	r3, [r7, #28]
  return result;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	3301      	adds	r3, #1
 8002638:	069b      	lsls	r3, r3, #26
 800263a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_ADC_ConfigChannel+0x3d6>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	0e9b      	lsrs	r3, r3, #26
 8002650:	3301      	adds	r3, #1
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	e010      	b.n	8002680 <HAL_ADC_ConfigChannel+0x3f8>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	617b      	str	r3, [r7, #20]
  return result;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	3301      	adds	r3, #1
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	2101      	movs	r1, #1
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	ea42 0103 	orr.w	r1, r2, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10d      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x424>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	0e9b      	lsrs	r3, r3, #26
 8002696:	3301      	adds	r3, #1
 8002698:	f003 021f 	and.w	r2, r3, #31
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	3b1e      	subs	r3, #30
 80026a4:	051b      	lsls	r3, r3, #20
 80026a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026aa:	e014      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x44e>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	fa93 f3a3 	rbit	r3, r3
 80026b8:	60fb      	str	r3, [r7, #12]
  return result;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	3b1e      	subs	r3, #30
 80026d0:	051b      	lsls	r3, r3, #20
 80026d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d6:	430b      	orrs	r3, r1
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	6892      	ldr	r2, [r2, #8]
 80026dc:	4619      	mov	r1, r3
 80026de:	f7fe ff79 	bl	80015d4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f280 80c4 	bge.w	8002874 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a65      	ldr	r2, [pc, #404]	; (8002888 <HAL_ADC_ConfigChannel+0x600>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d004      	beq.n	8002700 <HAL_ADC_ConfigChannel+0x478>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a64      	ldr	r2, [pc, #400]	; (800288c <HAL_ADC_ConfigChannel+0x604>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x47c>
 8002700:	4b63      	ldr	r3, [pc, #396]	; (8002890 <HAL_ADC_ConfigChannel+0x608>)
 8002702:	e000      	b.n	8002706 <HAL_ADC_ConfigChannel+0x47e>
 8002704:	4b63      	ldr	r3, [pc, #396]	; (8002894 <HAL_ADC_ConfigChannel+0x60c>)
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe feb0 	bl	800146c <LL_ADC_GetCommonPathInternalCh>
 800270c:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a5d      	ldr	r2, [pc, #372]	; (8002888 <HAL_ADC_ConfigChannel+0x600>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d004      	beq.n	8002722 <HAL_ADC_ConfigChannel+0x49a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a5b      	ldr	r2, [pc, #364]	; (800288c <HAL_ADC_ConfigChannel+0x604>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d10e      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x4b8>
 8002722:	4859      	ldr	r0, [pc, #356]	; (8002888 <HAL_ADC_ConfigChannel+0x600>)
 8002724:	f7ff f824 	bl	8001770 <LL_ADC_IsEnabled>
 8002728:	4604      	mov	r4, r0
 800272a:	4858      	ldr	r0, [pc, #352]	; (800288c <HAL_ADC_ConfigChannel+0x604>)
 800272c:	f7ff f820 	bl	8001770 <LL_ADC_IsEnabled>
 8002730:	4603      	mov	r3, r0
 8002732:	4323      	orrs	r3, r4
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	e008      	b.n	8002752 <HAL_ADC_ConfigChannel+0x4ca>
 8002740:	4855      	ldr	r0, [pc, #340]	; (8002898 <HAL_ADC_ConfigChannel+0x610>)
 8002742:	f7ff f815 	bl	8001770 <LL_ADC_IsEnabled>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d07b      	beq.n	800284e <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a50      	ldr	r2, [pc, #320]	; (800289c <HAL_ADC_ConfigChannel+0x614>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d12e      	bne.n	80027be <HAL_ADC_ConfigChannel+0x536>
 8002760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d129      	bne.n	80027be <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a4a      	ldr	r2, [pc, #296]	; (8002898 <HAL_ADC_ConfigChannel+0x610>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d17f      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a43      	ldr	r2, [pc, #268]	; (8002888 <HAL_ADC_ConfigChannel+0x600>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d004      	beq.n	8002788 <HAL_ADC_ConfigChannel+0x500>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a42      	ldr	r2, [pc, #264]	; (800288c <HAL_ADC_ConfigChannel+0x604>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x504>
 8002788:	4a41      	ldr	r2, [pc, #260]	; (8002890 <HAL_ADC_ConfigChannel+0x608>)
 800278a:	e000      	b.n	800278e <HAL_ADC_ConfigChannel+0x506>
 800278c:	4a41      	ldr	r2, [pc, #260]	; (8002894 <HAL_ADC_ConfigChannel+0x60c>)
 800278e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002790:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002794:	4619      	mov	r1, r3
 8002796:	4610      	mov	r0, r2
 8002798:	f7fe fe55 	bl	8001446 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800279c:	4b40      	ldr	r3, [pc, #256]	; (80028a0 <HAL_ADC_ConfigChannel+0x618>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	4a40      	ldr	r2, [pc, #256]	; (80028a4 <HAL_ADC_ConfigChannel+0x61c>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	099b      	lsrs	r3, r3, #6
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027ae:	e002      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f9      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027bc:	e05a      	b.n	8002874 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a39      	ldr	r2, [pc, #228]	; (80028a8 <HAL_ADC_ConfigChannel+0x620>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d11e      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x57e>
 80027c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d119      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a30      	ldr	r2, [pc, #192]	; (8002898 <HAL_ADC_ConfigChannel+0x610>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d14b      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a29      	ldr	r2, [pc, #164]	; (8002888 <HAL_ADC_ConfigChannel+0x600>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d004      	beq.n	80027f0 <HAL_ADC_ConfigChannel+0x568>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a28      	ldr	r2, [pc, #160]	; (800288c <HAL_ADC_ConfigChannel+0x604>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x56c>
 80027f0:	4a27      	ldr	r2, [pc, #156]	; (8002890 <HAL_ADC_ConfigChannel+0x608>)
 80027f2:	e000      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x56e>
 80027f4:	4a27      	ldr	r2, [pc, #156]	; (8002894 <HAL_ADC_ConfigChannel+0x60c>)
 80027f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fc:	4619      	mov	r1, r3
 80027fe:	4610      	mov	r0, r2
 8002800:	f7fe fe21 	bl	8001446 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002804:	e036      	b.n	8002874 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a28      	ldr	r2, [pc, #160]	; (80028ac <HAL_ADC_ConfigChannel+0x624>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d131      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x5ec>
 8002810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d12c      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1e      	ldr	r2, [pc, #120]	; (8002898 <HAL_ADC_ConfigChannel+0x610>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d127      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a17      	ldr	r2, [pc, #92]	; (8002888 <HAL_ADC_ConfigChannel+0x600>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d004      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x5b0>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a16      	ldr	r2, [pc, #88]	; (800288c <HAL_ADC_ConfigChannel+0x604>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x5b4>
 8002838:	4a15      	ldr	r2, [pc, #84]	; (8002890 <HAL_ADC_ConfigChannel+0x608>)
 800283a:	e000      	b.n	800283e <HAL_ADC_ConfigChannel+0x5b6>
 800283c:	4a15      	ldr	r2, [pc, #84]	; (8002894 <HAL_ADC_ConfigChannel+0x60c>)
 800283e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002840:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f7fe fdfd 	bl	8001446 <LL_ADC_SetCommonPathInternalCh>
 800284c:	e012      	b.n	8002874 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002860:	e008      	b.n	8002874 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800287c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002880:	4618      	mov	r0, r3
 8002882:	3764      	adds	r7, #100	; 0x64
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}
 8002888:	40022000 	.word	0x40022000
 800288c:	40022100 	.word	0x40022100
 8002890:	40022300 	.word	0x40022300
 8002894:	58026300 	.word	0x58026300
 8002898:	58026000 	.word	0x58026000
 800289c:	cb840000 	.word	0xcb840000
 80028a0:	20000000 	.word	0x20000000
 80028a4:	053e2d63 	.word	0x053e2d63
 80028a8:	c7520000 	.word	0xc7520000
 80028ac:	cfb80000 	.word	0xcfb80000

080028b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe ff57 	bl	8001770 <LL_ADC_IsEnabled>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d167      	bne.n	8002998 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	4b35      	ldr	r3, [pc, #212]	; (80029a4 <ADC_Enable+0xf4>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00d      	beq.n	80028f2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028da:	f043 0210 	orr.w	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e053      	b.n	800299a <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe ff26 	bl	8001748 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028fc:	f7fe fd56 	bl	80013ac <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a28      	ldr	r2, [pc, #160]	; (80029a8 <ADC_Enable+0xf8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d004      	beq.n	8002916 <ADC_Enable+0x66>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a26      	ldr	r2, [pc, #152]	; (80029ac <ADC_Enable+0xfc>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <ADC_Enable+0x6a>
 8002916:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <ADC_Enable+0x100>)
 8002918:	e000      	b.n	800291c <ADC_Enable+0x6c>
 800291a:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <ADC_Enable+0x104>)
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe fea9 	bl	8001674 <LL_ADC_GetMultimode>
 8002922:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a20      	ldr	r2, [pc, #128]	; (80029ac <ADC_Enable+0xfc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d002      	beq.n	8002934 <ADC_Enable+0x84>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	e000      	b.n	8002936 <ADC_Enable+0x86>
 8002934:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <ADC_Enable+0xf8>)
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	4293      	cmp	r3, r2
 800293c:	d025      	beq.n	800298a <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d129      	bne.n	8002998 <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002944:	e021      	b.n	800298a <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe ff10 	bl	8001770 <LL_ADC_IsEnabled>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe fef4 	bl	8001748 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002960:	f7fe fd24 	bl	80013ac <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d90d      	bls.n	800298a <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002972:	f043 0210 	orr.w	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e007      	b.n	800299a <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b01      	cmp	r3, #1
 8002996:	d1d6      	bne.n	8002946 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	8000003f 	.word	0x8000003f
 80029a8:	40022000 	.word	0x40022000
 80029ac:	40022100 	.word	0x40022100
 80029b0:	40022300 	.word	0x40022300
 80029b4:	58026300 	.word	0x58026300

080029b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a70      	ldr	r2, [pc, #448]	; (8002b88 <ADC_ConfigureBoostMode+0x1d0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d004      	beq.n	80029d4 <ADC_ConfigureBoostMode+0x1c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6f      	ldr	r2, [pc, #444]	; (8002b8c <ADC_ConfigureBoostMode+0x1d4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d109      	bne.n	80029e8 <ADC_ConfigureBoostMode+0x30>
 80029d4:	4b6e      	ldr	r3, [pc, #440]	; (8002b90 <ADC_ConfigureBoostMode+0x1d8>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	e008      	b.n	80029fa <ADC_ConfigureBoostMode+0x42>
 80029e8:	4b6a      	ldr	r3, [pc, #424]	; (8002b94 <ADC_ConfigureBoostMode+0x1dc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf14      	ite	ne
 80029f4:	2301      	movne	r3, #1
 80029f6:	2300      	moveq	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01a      	beq.n	8002a34 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80029fe:	f001 fe11 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 8002a02:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a0c:	d006      	beq.n	8002a1c <ADC_ConfigureBoostMode+0x64>
 8002a0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a12:	d00b      	beq.n	8002a2c <ADC_ConfigureBoostMode+0x74>
 8002a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a18:	d000      	beq.n	8002a1c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002a1a:	e05d      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	60fb      	str	r3, [r7, #12]
        break;
 8002a2a:	e055      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	60fb      	str	r3, [r7, #12]
        break;
 8002a32:	e051      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002a34:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a38:	f002 fd3e 	bl	80054b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a3c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002a46:	d02a      	beq.n	8002a9e <ADC_ConfigureBoostMode+0xe6>
 8002a48:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002a4c:	d813      	bhi.n	8002a76 <ADC_ConfigureBoostMode+0xbe>
 8002a4e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a52:	d024      	beq.n	8002a9e <ADC_ConfigureBoostMode+0xe6>
 8002a54:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a58:	d806      	bhi.n	8002a68 <ADC_ConfigureBoostMode+0xb0>
 8002a5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a5e:	d01e      	beq.n	8002a9e <ADC_ConfigureBoostMode+0xe6>
 8002a60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a64:	d01b      	beq.n	8002a9e <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002a66:	e037      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a6c:	d017      	beq.n	8002a9e <ADC_ConfigureBoostMode+0xe6>
 8002a6e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a72:	d014      	beq.n	8002a9e <ADC_ConfigureBoostMode+0xe6>
        break;
 8002a74:	e030      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002a76:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a7a:	d021      	beq.n	8002ac0 <ADC_ConfigureBoostMode+0x108>
 8002a7c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a80:	d806      	bhi.n	8002a90 <ADC_ConfigureBoostMode+0xd8>
 8002a82:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a86:	d013      	beq.n	8002ab0 <ADC_ConfigureBoostMode+0xf8>
 8002a88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a8c:	d014      	beq.n	8002ab8 <ADC_ConfigureBoostMode+0x100>
        break;
 8002a8e:	e023      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002a90:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002a94:	d018      	beq.n	8002ac8 <ADC_ConfigureBoostMode+0x110>
 8002a96:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002a9a:	d019      	beq.n	8002ad0 <ADC_ConfigureBoostMode+0x118>
        break;
 8002a9c:	e01c      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	0c9b      	lsrs	r3, r3, #18
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aac:	60fb      	str	r3, [r7, #12]
        break;
 8002aae:	e013      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	60fb      	str	r3, [r7, #12]
        break;
 8002ab6:	e00f      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	60fb      	str	r3, [r7, #12]
        break;
 8002abe:	e00b      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	099b      	lsrs	r3, r3, #6
 8002ac4:	60fb      	str	r3, [r7, #12]
        break;
 8002ac6:	e007      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	09db      	lsrs	r3, r3, #7
 8002acc:	60fb      	str	r3, [r7, #12]
        break;
 8002ace:	e003      	b.n	8002ad8 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	0a1b      	lsrs	r3, r3, #8
 8002ad4:	60fb      	str	r3, [r7, #12]
        break;
 8002ad6:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002ad8:	f7fe fc96 	bl	8001408 <HAL_GetREVID>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d815      	bhi.n	8002b12 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a2b      	ldr	r2, [pc, #172]	; (8002b98 <ADC_ConfigureBoostMode+0x1e0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d908      	bls.n	8002b00 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002afc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002afe:	e03e      	b.n	8002b7e <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b0e:	609a      	str	r2, [r3, #8]
}
 8002b10:	e035      	b.n	8002b7e <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a20      	ldr	r2, [pc, #128]	; (8002b9c <ADC_ConfigureBoostMode+0x1e4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d808      	bhi.n	8002b32 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002b2e:	609a      	str	r2, [r3, #8]
}
 8002b30:	e025      	b.n	8002b7e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4a1a      	ldr	r2, [pc, #104]	; (8002ba0 <ADC_ConfigureBoostMode+0x1e8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d80a      	bhi.n	8002b50 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b4c:	609a      	str	r2, [r3, #8]
}
 8002b4e:	e016      	b.n	8002b7e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <ADC_ConfigureBoostMode+0x1ec>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d80a      	bhi.n	8002b6e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	e007      	b.n	8002b7e <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b7c:	609a      	str	r2, [r3, #8]
}
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40022100 	.word	0x40022100
 8002b90:	40022300 	.word	0x40022300
 8002b94:	58026300 	.word	0x58026300
 8002b98:	01312d00 	.word	0x01312d00
 8002b9c:	005f5e10 	.word	0x005f5e10
 8002ba0:	00bebc20 	.word	0x00bebc20
 8002ba4:	017d7840 	.word	0x017d7840

08002ba8 <LL_ADC_IsEnabled>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <LL_ADC_IsEnabled+0x18>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <LL_ADC_IsEnabled+0x1a>
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_ADC_REG_IsConversionOngoing>:
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d101      	bne.n	8002be6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b09f      	sub	sp, #124	; 0x7c
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e0ba      	b.n	8002dec <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a5c      	ldr	r2, [pc, #368]	; (8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d102      	bne.n	8002c8e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002c88:	4b5b      	ldr	r3, [pc, #364]	; (8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	e001      	b.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10b      	bne.n	8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9c:	f043 0220 	orr.w	r2, r3, #32
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e09d      	b.n	8002dec <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ff8b 	bl	8002bce <LL_ADC_REG_IsConversionOngoing>
 8002cb8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff ff85 	bl	8002bce <LL_ADC_REG_IsConversionOngoing>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d17f      	bne.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d17c      	bne.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a47      	ldr	r2, [pc, #284]	; (8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a46      	ldr	r2, [pc, #280]	; (8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002ce4:	4b45      	ldr	r3, [pc, #276]	; (8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ce6:	e000      	b.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002ce8:	4b45      	ldr	r3, [pc, #276]	; (8002e00 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cea:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d039      	beq.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d04:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a3a      	ldr	r2, [pc, #232]	; (8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d004      	beq.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a38      	ldr	r2, [pc, #224]	; (8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d10e      	bne.n	8002d38 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002d1a:	4836      	ldr	r0, [pc, #216]	; (8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002d1c:	f7ff ff44 	bl	8002ba8 <LL_ADC_IsEnabled>
 8002d20:	4604      	mov	r4, r0
 8002d22:	4835      	ldr	r0, [pc, #212]	; (8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002d24:	f7ff ff40 	bl	8002ba8 <LL_ADC_IsEnabled>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4323      	orrs	r3, r4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	e008      	b.n	8002d4a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002d38:	4832      	ldr	r0, [pc, #200]	; (8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002d3a:	f7ff ff35 	bl	8002ba8 <LL_ADC_IsEnabled>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d047      	beq.n	8002dde <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	6811      	ldr	r1, [r2, #0]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	6892      	ldr	r2, [r2, #8]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	431a      	orrs	r2, r3
 8002d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d64:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d66:	e03a      	b.n	8002dde <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d72:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d004      	beq.n	8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d10e      	bne.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002d88:	481a      	ldr	r0, [pc, #104]	; (8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002d8a:	f7ff ff0d 	bl	8002ba8 <LL_ADC_IsEnabled>
 8002d8e:	4604      	mov	r4, r0
 8002d90:	4819      	ldr	r0, [pc, #100]	; (8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002d92:	f7ff ff09 	bl	8002ba8 <LL_ADC_IsEnabled>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4323      	orrs	r3, r4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	e008      	b.n	8002db8 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002da6:	4817      	ldr	r0, [pc, #92]	; (8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002da8:	f7ff fefe 	bl	8002ba8 <LL_ADC_IsEnabled>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bf0c      	ite	eq
 8002db2:	2301      	moveq	r3, #1
 8002db4:	2300      	movne	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dc6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc8:	e009      	b.n	8002dde <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ddc:	e000      	b.n	8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dde:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002de8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	377c      	adds	r7, #124	; 0x7c
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd90      	pop	{r4, r7, pc}
 8002df4:	40022000 	.word	0x40022000
 8002df8:	40022100 	.word	0x40022100
 8002dfc:	40022300 	.word	0x40022300
 8002e00:	58026300 	.word	0x58026300
 8002e04:	58026000 	.word	0x58026000
 8002e08:	fffff0e0 	.word	0xfffff0e0

08002e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <__NVIC_SetPriorityGrouping+0x40>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e34:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <__NVIC_SetPriorityGrouping+0x44>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e3a:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <__NVIC_SetPriorityGrouping+0x40>)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	60d3      	str	r3, [r2, #12]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000ed00 	.word	0xe000ed00
 8002e50:	05fa0000 	.word	0x05fa0000

08002e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <__NVIC_GetPriorityGrouping+0x18>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	f003 0307 	and.w	r3, r3, #7
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	db0b      	blt.n	8002e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	f003 021f 	and.w	r2, r3, #31
 8002e88:	4907      	ldr	r1, [pc, #28]	; (8002ea8 <__NVIC_EnableIRQ+0x38>)
 8002e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	2001      	movs	r0, #1
 8002e92:	fa00 f202 	lsl.w	r2, r0, r2
 8002e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000e100 	.word	0xe000e100

08002eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	6039      	str	r1, [r7, #0]
 8002eb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	db0a      	blt.n	8002ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	490c      	ldr	r1, [pc, #48]	; (8002ef8 <__NVIC_SetPriority+0x4c>)
 8002ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eca:	0112      	lsls	r2, r2, #4
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	440b      	add	r3, r1
 8002ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed4:	e00a      	b.n	8002eec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4908      	ldr	r1, [pc, #32]	; (8002efc <__NVIC_SetPriority+0x50>)
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	3b04      	subs	r3, #4
 8002ee4:	0112      	lsls	r2, r2, #4
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	440b      	add	r3, r1
 8002eea:	761a      	strb	r2, [r3, #24]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000e100 	.word	0xe000e100
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	; 0x24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f1c3 0307 	rsb	r3, r3, #7
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	bf28      	it	cs
 8002f1e:	2304      	movcs	r3, #4
 8002f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	d902      	bls.n	8002f30 <NVIC_EncodePriority+0x30>
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3b03      	subs	r3, #3
 8002f2e:	e000      	b.n	8002f32 <NVIC_EncodePriority+0x32>
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	f04f 32ff 	mov.w	r2, #4294967295
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	401a      	ands	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f48:	f04f 31ff 	mov.w	r1, #4294967295
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	43d9      	mvns	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	4313      	orrs	r3, r2
         );
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3724      	adds	r7, #36	; 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f78:	d301      	bcc.n	8002f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e00f      	b.n	8002f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <SysTick_Config+0x40>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f86:	210f      	movs	r1, #15
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8c:	f7ff ff8e 	bl	8002eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <SysTick_Config+0x40>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f96:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <SysTick_Config+0x40>)
 8002f98:	2207      	movs	r2, #7
 8002f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	e000e010 	.word	0xe000e010

08002fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff29 	bl	8002e0c <__NVIC_SetPriorityGrouping>
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b086      	sub	sp, #24
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	4603      	mov	r3, r0
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd0:	f7ff ff40 	bl	8002e54 <__NVIC_GetPriorityGrouping>
 8002fd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	6978      	ldr	r0, [r7, #20]
 8002fdc:	f7ff ff90 	bl	8002f00 <NVIC_EncodePriority>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ff5f 	bl	8002eac <__NVIC_SetPriority>
}
 8002fee:	bf00      	nop
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003000:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff33 	bl	8002e70 <__NVIC_EnableIRQ>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ffa4 	bl	8002f68 <SysTick_Config>
 8003020:	4603      	mov	r3, r0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800303a:	4b89      	ldr	r3, [pc, #548]	; (8003260 <HAL_GPIO_Init+0x234>)
 800303c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800303e:	e194      	b.n	800336a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2101      	movs	r1, #1
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa01 f303 	lsl.w	r3, r1, r3
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 8186 	beq.w	8003364 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d00b      	beq.n	8003078 <HAL_GPIO_Init+0x4c>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d007      	beq.n	8003078 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800306c:	2b11      	cmp	r3, #17
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b12      	cmp	r3, #18
 8003076:	d130      	bne.n	80030da <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	2203      	movs	r2, #3
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030ae:	2201      	movs	r2, #1
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	f003 0201 	and.w	r2, r3, #1
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	2203      	movs	r2, #3
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d003      	beq.n	800311a <HAL_GPIO_Init+0xee>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b12      	cmp	r3, #18
 8003118:	d123      	bne.n	8003162 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	08da      	lsrs	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3208      	adds	r2, #8
 8003122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	220f      	movs	r2, #15
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	08da      	lsrs	r2, r3, #3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3208      	adds	r2, #8
 800315c:	69b9      	ldr	r1, [r7, #24]
 800315e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	2203      	movs	r2, #3
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0203 	and.w	r2, r3, #3
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 80e0 	beq.w	8003364 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a4:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <HAL_GPIO_Init+0x238>)
 80031a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031aa:	4a2e      	ldr	r2, [pc, #184]	; (8003264 <HAL_GPIO_Init+0x238>)
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80031b4:	4b2b      	ldr	r3, [pc, #172]	; (8003264 <HAL_GPIO_Init+0x238>)
 80031b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031c2:	4a29      	ldr	r2, [pc, #164]	; (8003268 <HAL_GPIO_Init+0x23c>)
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	3302      	adds	r3, #2
 80031ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	220f      	movs	r2, #15
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a20      	ldr	r2, [pc, #128]	; (800326c <HAL_GPIO_Init+0x240>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d052      	beq.n	8003294 <HAL_GPIO_Init+0x268>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a1f      	ldr	r2, [pc, #124]	; (8003270 <HAL_GPIO_Init+0x244>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d031      	beq.n	800325a <HAL_GPIO_Init+0x22e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a1e      	ldr	r2, [pc, #120]	; (8003274 <HAL_GPIO_Init+0x248>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d02b      	beq.n	8003256 <HAL_GPIO_Init+0x22a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <HAL_GPIO_Init+0x24c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d025      	beq.n	8003252 <HAL_GPIO_Init+0x226>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <HAL_GPIO_Init+0x250>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01f      	beq.n	800324e <HAL_GPIO_Init+0x222>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1b      	ldr	r2, [pc, #108]	; (8003280 <HAL_GPIO_Init+0x254>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d019      	beq.n	800324a <HAL_GPIO_Init+0x21e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1a      	ldr	r2, [pc, #104]	; (8003284 <HAL_GPIO_Init+0x258>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <HAL_GPIO_Init+0x21a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <HAL_GPIO_Init+0x25c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00d      	beq.n	8003242 <HAL_GPIO_Init+0x216>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a18      	ldr	r2, [pc, #96]	; (800328c <HAL_GPIO_Init+0x260>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d007      	beq.n	800323e <HAL_GPIO_Init+0x212>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a17      	ldr	r2, [pc, #92]	; (8003290 <HAL_GPIO_Init+0x264>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d101      	bne.n	800323a <HAL_GPIO_Init+0x20e>
 8003236:	2309      	movs	r3, #9
 8003238:	e02d      	b.n	8003296 <HAL_GPIO_Init+0x26a>
 800323a:	230a      	movs	r3, #10
 800323c:	e02b      	b.n	8003296 <HAL_GPIO_Init+0x26a>
 800323e:	2308      	movs	r3, #8
 8003240:	e029      	b.n	8003296 <HAL_GPIO_Init+0x26a>
 8003242:	2307      	movs	r3, #7
 8003244:	e027      	b.n	8003296 <HAL_GPIO_Init+0x26a>
 8003246:	2306      	movs	r3, #6
 8003248:	e025      	b.n	8003296 <HAL_GPIO_Init+0x26a>
 800324a:	2305      	movs	r3, #5
 800324c:	e023      	b.n	8003296 <HAL_GPIO_Init+0x26a>
 800324e:	2304      	movs	r3, #4
 8003250:	e021      	b.n	8003296 <HAL_GPIO_Init+0x26a>
 8003252:	2303      	movs	r3, #3
 8003254:	e01f      	b.n	8003296 <HAL_GPIO_Init+0x26a>
 8003256:	2302      	movs	r3, #2
 8003258:	e01d      	b.n	8003296 <HAL_GPIO_Init+0x26a>
 800325a:	2301      	movs	r3, #1
 800325c:	e01b      	b.n	8003296 <HAL_GPIO_Init+0x26a>
 800325e:	bf00      	nop
 8003260:	58000080 	.word	0x58000080
 8003264:	58024400 	.word	0x58024400
 8003268:	58000400 	.word	0x58000400
 800326c:	58020000 	.word	0x58020000
 8003270:	58020400 	.word	0x58020400
 8003274:	58020800 	.word	0x58020800
 8003278:	58020c00 	.word	0x58020c00
 800327c:	58021000 	.word	0x58021000
 8003280:	58021400 	.word	0x58021400
 8003284:	58021800 	.word	0x58021800
 8003288:	58021c00 	.word	0x58021c00
 800328c:	58022000 	.word	0x58022000
 8003290:	58022400 	.word	0x58022400
 8003294:	2300      	movs	r3, #0
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	f002 0203 	and.w	r2, r2, #3
 800329c:	0092      	lsls	r2, r2, #2
 800329e:	4093      	lsls	r3, r2
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032a6:	4938      	ldr	r1, [pc, #224]	; (8003388 <HAL_GPIO_Init+0x35c>)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	3302      	adds	r3, #2
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800332e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800335c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	3301      	adds	r3, #1
 8003368:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	f47f ae63 	bne.w	8003040 <HAL_GPIO_Init+0x14>
  }
}
 800337a:	bf00      	nop
 800337c:	3724      	adds	r7, #36	; 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	58000400 	.word	0x58000400

0800338c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	807b      	strh	r3, [r7, #2]
 8003398:	4613      	mov	r3, r2
 800339a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800339c:	787b      	ldrb	r3, [r7, #1]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80033a8:	e003      	b.n	80033b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033aa:	887b      	ldrh	r3, [r7, #2]
 80033ac:	041a      	lsls	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	619a      	str	r2, [r3, #24]
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	460b      	mov	r3, r1
 80033c8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	887b      	ldrh	r3, [r7, #2]
 80033d0:	401a      	ands	r2, r3
 80033d2:	887b      	ldrh	r3, [r7, #2]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d104      	bne.n	80033e2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	041a      	lsls	r2, r3, #16
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80033e0:	e002      	b.n	80033e8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80033e2:	887a      	ldrh	r2, [r7, #2]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	619a      	str	r2, [r3, #24]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80033fc:	4a08      	ldr	r2, [pc, #32]	; (8003420 <HAL_HSEM_FastTake+0x2c>)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3320      	adds	r3, #32
 8003402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003406:	4a07      	ldr	r2, [pc, #28]	; (8003424 <HAL_HSEM_FastTake+0x30>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d101      	bne.n	8003410 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	e000      	b.n	8003412 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	58026400 	.word	0x58026400
 8003424:	80000300 	.word	0x80000300

08003428 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003432:	4906      	ldr	r1, [pc, #24]	; (800344c <HAL_HSEM_Release+0x24>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	58026400 	.word	0x58026400

08003450 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	b08f      	sub	sp, #60	; 0x3c
 8003454:	af0a      	add	r7, sp, #40	; 0x28
 8003456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e116      	b.n	8003690 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d106      	bne.n	8003482 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7fd fdcd 	bl	800101c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2203      	movs	r2, #3
 8003486:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f004 f95f 	bl	8007764 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	687e      	ldr	r6, [r7, #4]
 80034ae:	466d      	mov	r5, sp
 80034b0:	f106 0410 	add.w	r4, r6, #16
 80034b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80034c4:	1d33      	adds	r3, r6, #4
 80034c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c8:	6838      	ldr	r0, [r7, #0]
 80034ca:	f004 f8e9 	bl	80076a0 <USB_CoreInit>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0d7      	b.n	8003690 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f004 f94d 	bl	8007786 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	e04a      	b.n	8003588 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	333d      	adds	r3, #61	; 0x3d
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	333c      	adds	r3, #60	; 0x3c
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	b298      	uxth	r0, r3
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3342      	adds	r3, #66	; 0x42
 800352e:	4602      	mov	r2, r0
 8003530:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	333f      	adds	r3, #63	; 0x3f
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3344      	adds	r3, #68	; 0x44
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	3348      	adds	r3, #72	; 0x48
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	3350      	adds	r3, #80	; 0x50
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	3301      	adds	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	d3af      	bcc.n	80034f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
 8003596:	e044      	b.n	8003622 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035da:	7bfa      	ldrb	r2, [r7, #15]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003606:	7bfa      	ldrb	r2, [r7, #15]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	3301      	adds	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	d3b5      	bcc.n	8003598 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	687e      	ldr	r6, [r7, #4]
 8003634:	466d      	mov	r5, sp
 8003636:	f106 0410 	add.w	r4, r6, #16
 800363a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800363c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800363e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003642:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003646:	e885 0003 	stmia.w	r5, {r0, r1}
 800364a:	1d33      	adds	r3, r6, #4
 800364c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800364e:	6838      	ldr	r0, [r7, #0]
 8003650:	f004 f8c4 	bl	80077dc <USB_DevInit>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e014      	b.n	8003690 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2b01      	cmp	r3, #1
 800367c:	d102      	bne.n	8003684 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f80a 	bl	8003698 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f004 fa66 	bl	8007b5a <USB_DevDisconnect>

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003698 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_PCDEx_ActivateLPM+0x44>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	10000003 	.word	0x10000003

080036e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80036e8:	4b29      	ldr	r3, [pc, #164]	; (8003790 <HAL_PWREx_ConfigSupply+0xb0>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	2b06      	cmp	r3, #6
 80036f2:	d00a      	beq.n	800370a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036f4:	4b26      	ldr	r3, [pc, #152]	; (8003790 <HAL_PWREx_ConfigSupply+0xb0>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d001      	beq.n	8003706 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e040      	b.n	8003788 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	e03e      	b.n	8003788 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800370a:	4b21      	ldr	r3, [pc, #132]	; (8003790 <HAL_PWREx_ConfigSupply+0xb0>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003712:	491f      	ldr	r1, [pc, #124]	; (8003790 <HAL_PWREx_ConfigSupply+0xb0>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4313      	orrs	r3, r2
 8003718:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800371a:	f7fd fe47 	bl	80013ac <HAL_GetTick>
 800371e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003720:	e009      	b.n	8003736 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003722:	f7fd fe43 	bl	80013ac <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003730:	d901      	bls.n	8003736 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e028      	b.n	8003788 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003736:	4b16      	ldr	r3, [pc, #88]	; (8003790 <HAL_PWREx_ConfigSupply+0xb0>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800373e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003742:	d1ee      	bne.n	8003722 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b1e      	cmp	r3, #30
 8003748:	d008      	beq.n	800375c <HAL_PWREx_ConfigSupply+0x7c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b2e      	cmp	r3, #46	; 0x2e
 800374e:	d005      	beq.n	800375c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b1d      	cmp	r3, #29
 8003754:	d002      	beq.n	800375c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b2d      	cmp	r3, #45	; 0x2d
 800375a:	d114      	bne.n	8003786 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800375c:	f7fd fe26 	bl	80013ac <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003762:	e009      	b.n	8003778 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003764:	f7fd fe22 	bl	80013ac <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003772:	d901      	bls.n	8003778 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e007      	b.n	8003788 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_PWREx_ConfigSupply+0xb0>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d1ee      	bne.n	8003764 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	58024800 	.word	0x58024800

08003794 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800379e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a2:	60d3      	str	r3, [r2, #12]
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	58024800 	.word	0x58024800

080037b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08c      	sub	sp, #48	; 0x30
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e3ff      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8087 	beq.w	80038e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d4:	4b99      	ldr	r3, [pc, #612]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037de:	4b97      	ldr	r3, [pc, #604]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80037e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d007      	beq.n	80037fa <HAL_RCC_OscConfig+0x46>
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	2b18      	cmp	r3, #24
 80037ee:	d110      	bne.n	8003812 <HAL_RCC_OscConfig+0x5e>
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d10b      	bne.n	8003812 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fa:	4b90      	ldr	r3, [pc, #576]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d06c      	beq.n	80038e0 <HAL_RCC_OscConfig+0x12c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d168      	bne.n	80038e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e3d9      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x76>
 800381c:	4b87      	ldr	r3, [pc, #540]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a86      	ldr	r2, [pc, #536]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	e02e      	b.n	8003888 <HAL_RCC_OscConfig+0xd4>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0x98>
 8003832:	4b82      	ldr	r3, [pc, #520]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a81      	ldr	r2, [pc, #516]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	4b7f      	ldr	r3, [pc, #508]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a7e      	ldr	r2, [pc, #504]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e01d      	b.n	8003888 <HAL_RCC_OscConfig+0xd4>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003854:	d10c      	bne.n	8003870 <HAL_RCC_OscConfig+0xbc>
 8003856:	4b79      	ldr	r3, [pc, #484]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a78      	ldr	r2, [pc, #480]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 800385c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b76      	ldr	r3, [pc, #472]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a75      	ldr	r2, [pc, #468]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e00b      	b.n	8003888 <HAL_RCC_OscConfig+0xd4>
 8003870:	4b72      	ldr	r3, [pc, #456]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a71      	ldr	r2, [pc, #452]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b6f      	ldr	r3, [pc, #444]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a6e      	ldr	r2, [pc, #440]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fd fd8c 	bl	80013ac <HAL_GetTick>
 8003894:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003898:	f7fd fd88 	bl	80013ac <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	; 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e38d      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038aa:	4b64      	ldr	r3, [pc, #400]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0xe4>
 80038b6:	e014      	b.n	80038e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fd fd78 	bl	80013ac <HAL_GetTick>
 80038bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c0:	f7fd fd74 	bl	80013ac <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e379      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038d2:	4b5a      	ldr	r3, [pc, #360]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x10c>
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80ae 	beq.w	8003a4c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f0:	4b52      	ldr	r3, [pc, #328]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038fa:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_RCC_OscConfig+0x162>
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	2b18      	cmp	r3, #24
 800390a:	d13a      	bne.n	8003982 <HAL_RCC_OscConfig+0x1ce>
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d135      	bne.n	8003982 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003916:	4b49      	ldr	r3, [pc, #292]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_RCC_OscConfig+0x17a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e34b      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392e:	f7fd fd6b 	bl	8001408 <HAL_GetREVID>
 8003932:	4602      	mov	r2, r0
 8003934:	f241 0303 	movw	r3, #4099	; 0x1003
 8003938:	429a      	cmp	r2, r3
 800393a:	d817      	bhi.n	800396c <HAL_RCC_OscConfig+0x1b8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	d108      	bne.n	8003956 <HAL_RCC_OscConfig+0x1a2>
 8003944:	4b3d      	ldr	r3, [pc, #244]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800394c:	4a3b      	ldr	r2, [pc, #236]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 800394e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003952:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003954:	e07a      	b.n	8003a4c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	4b39      	ldr	r3, [pc, #228]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	031b      	lsls	r3, r3, #12
 8003964:	4935      	ldr	r1, [pc, #212]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800396a:	e06f      	b.n	8003a4c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396c:	4b33      	ldr	r3, [pc, #204]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	061b      	lsls	r3, r3, #24
 800397a:	4930      	ldr	r1, [pc, #192]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 800397c:	4313      	orrs	r3, r2
 800397e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003980:	e064      	b.n	8003a4c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d045      	beq.n	8003a16 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800398a:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 0219 	bic.w	r2, r3, #25
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	4929      	ldr	r1, [pc, #164]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fd fd06 	bl	80013ac <HAL_GetTick>
 80039a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039a4:	f7fd fd02 	bl	80013ac <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e307      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039b6:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c2:	f7fd fd21 	bl	8001408 <HAL_GetREVID>
 80039c6:	4602      	mov	r2, r0
 80039c8:	f241 0303 	movw	r3, #4099	; 0x1003
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d817      	bhi.n	8003a00 <HAL_RCC_OscConfig+0x24c>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d108      	bne.n	80039ea <HAL_RCC_OscConfig+0x236>
 80039d8:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80039e0:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 80039e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e6:	6053      	str	r3, [r2, #4]
 80039e8:	e030      	b.n	8003a4c <HAL_RCC_OscConfig+0x298>
 80039ea:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	031b      	lsls	r3, r3, #12
 80039f8:	4910      	ldr	r1, [pc, #64]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
 80039fe:	e025      	b.n	8003a4c <HAL_RCC_OscConfig+0x298>
 8003a00:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	061b      	lsls	r3, r3, #24
 8003a0e:	490b      	ldr	r1, [pc, #44]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
 8003a14:	e01a      	b.n	8003a4c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <HAL_RCC_OscConfig+0x288>)
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7fd fcc3 	bl	80013ac <HAL_GetTick>
 8003a26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a28:	e00a      	b.n	8003a40 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a2a:	f7fd fcbf 	bl	80013ac <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d903      	bls.n	8003a40 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e2c4      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
 8003a3c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a40:	4ba4      	ldr	r3, [pc, #656]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1ee      	bne.n	8003a2a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80a9 	beq.w	8003bac <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a5a:	4b9e      	ldr	r3, [pc, #632]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a64:	4b9b      	ldr	r3, [pc, #620]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d007      	beq.n	8003a80 <HAL_RCC_OscConfig+0x2cc>
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b18      	cmp	r3, #24
 8003a74:	d13a      	bne.n	8003aec <HAL_RCC_OscConfig+0x338>
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d135      	bne.n	8003aec <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a80:	4b94      	ldr	r3, [pc, #592]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_OscConfig+0x2e4>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	2b80      	cmp	r3, #128	; 0x80
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e296      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a98:	f7fd fcb6 	bl	8001408 <HAL_GetREVID>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d817      	bhi.n	8003ad6 <HAL_RCC_OscConfig+0x322>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d108      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x30c>
 8003aae:	4b89      	ldr	r3, [pc, #548]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ab6:	4a87      	ldr	r2, [pc, #540]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003ab8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003abc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003abe:	e075      	b.n	8003bac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ac0:	4b84      	ldr	r3, [pc, #528]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	069b      	lsls	r3, r3, #26
 8003ace:	4981      	ldr	r1, [pc, #516]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ad4:	e06a      	b.n	8003bac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ad6:	4b7f      	ldr	r3, [pc, #508]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	061b      	lsls	r3, r3, #24
 8003ae4:	497b      	ldr	r1, [pc, #492]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003aea:	e05f      	b.n	8003bac <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d042      	beq.n	8003b7a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003af4:	4b77      	ldr	r3, [pc, #476]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a76      	ldr	r2, [pc, #472]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fd fc54 	bl	80013ac <HAL_GetTick>
 8003b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b08:	f7fd fc50 	bl	80013ac <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e255      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b1a:	4b6e      	ldr	r3, [pc, #440]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b26:	f7fd fc6f 	bl	8001408 <HAL_GetREVID>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d817      	bhi.n	8003b64 <HAL_RCC_OscConfig+0x3b0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d108      	bne.n	8003b4e <HAL_RCC_OscConfig+0x39a>
 8003b3c:	4b65      	ldr	r3, [pc, #404]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b44:	4a63      	ldr	r2, [pc, #396]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003b46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b4a:	6053      	str	r3, [r2, #4]
 8003b4c:	e02e      	b.n	8003bac <HAL_RCC_OscConfig+0x3f8>
 8003b4e:	4b61      	ldr	r3, [pc, #388]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	069b      	lsls	r3, r3, #26
 8003b5c:	495d      	ldr	r1, [pc, #372]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
 8003b62:	e023      	b.n	8003bac <HAL_RCC_OscConfig+0x3f8>
 8003b64:	4b5b      	ldr	r3, [pc, #364]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	061b      	lsls	r3, r3, #24
 8003b72:	4958      	ldr	r1, [pc, #352]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60cb      	str	r3, [r1, #12]
 8003b78:	e018      	b.n	8003bac <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b7a:	4b56      	ldr	r3, [pc, #344]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a55      	ldr	r2, [pc, #340]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003b80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fd fc11 	bl	80013ac <HAL_GetTick>
 8003b8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b8e:	f7fd fc0d 	bl	80013ac <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e212      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ba0:	4b4c      	ldr	r3, [pc, #304]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f0      	bne.n	8003b8e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d036      	beq.n	8003c26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d019      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc0:	4b44      	ldr	r3, [pc, #272]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc4:	4a43      	ldr	r2, [pc, #268]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fd fbee 	bl	80013ac <HAL_GetTick>
 8003bd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd4:	f7fd fbea 	bl	80013ac <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e1ef      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003be6:	4b3b      	ldr	r3, [pc, #236]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x420>
 8003bf2:	e018      	b.n	8003c26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf4:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf8:	4a36      	ldr	r2, [pc, #216]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c00:	f7fd fbd4 	bl	80013ac <HAL_GetTick>
 8003c04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c08:	f7fd fbd0 	bl	80013ac <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e1d5      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c1a:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d036      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d019      	beq.n	8003c6e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c3a:	4b26      	ldr	r3, [pc, #152]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a25      	ldr	r2, [pc, #148]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c46:	f7fd fbb1 	bl	80013ac <HAL_GetTick>
 8003c4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c4e:	f7fd fbad 	bl	80013ac <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e1b2      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c60:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x49a>
 8003c6c:	e018      	b.n	8003ca0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c6e:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003c74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c7a:	f7fd fb97 	bl	80013ac <HAL_GetTick>
 8003c7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c82:	f7fd fb93 	bl	80013ac <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e198      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c94:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <HAL_RCC_OscConfig+0x520>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1f0      	bne.n	8003c82 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8085 	beq.w	8003db8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cae:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <HAL_RCC_OscConfig+0x524>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a09      	ldr	r2, [pc, #36]	; (8003cd8 <HAL_RCC_OscConfig+0x524>)
 8003cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cba:	f7fd fb77 	bl	80013ac <HAL_GetTick>
 8003cbe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cc0:	e00c      	b.n	8003cdc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003cc2:	f7fd fb73 	bl	80013ac <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b64      	cmp	r3, #100	; 0x64
 8003cce:	d905      	bls.n	8003cdc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e178      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cdc:	4b96      	ldr	r3, [pc, #600]	; (8003f38 <HAL_RCC_OscConfig+0x784>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ec      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d106      	bne.n	8003cfe <HAL_RCC_OscConfig+0x54a>
 8003cf0:	4b92      	ldr	r3, [pc, #584]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a91      	ldr	r2, [pc, #580]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfc:	e02d      	b.n	8003d5a <HAL_RCC_OscConfig+0x5a6>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x56c>
 8003d06:	4b8d      	ldr	r3, [pc, #564]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	4a8c      	ldr	r2, [pc, #560]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	6713      	str	r3, [r2, #112]	; 0x70
 8003d12:	4b8a      	ldr	r3, [pc, #552]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	4a89      	ldr	r2, [pc, #548]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003d18:	f023 0304 	bic.w	r3, r3, #4
 8003d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1e:	e01c      	b.n	8003d5a <HAL_RCC_OscConfig+0x5a6>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b05      	cmp	r3, #5
 8003d26:	d10c      	bne.n	8003d42 <HAL_RCC_OscConfig+0x58e>
 8003d28:	4b84      	ldr	r3, [pc, #528]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	4a83      	ldr	r2, [pc, #524]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003d2e:	f043 0304 	orr.w	r3, r3, #4
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
 8003d34:	4b81      	ldr	r3, [pc, #516]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	4a80      	ldr	r2, [pc, #512]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d40:	e00b      	b.n	8003d5a <HAL_RCC_OscConfig+0x5a6>
 8003d42:	4b7e      	ldr	r3, [pc, #504]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	4a7d      	ldr	r2, [pc, #500]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4e:	4b7b      	ldr	r3, [pc, #492]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	4a7a      	ldr	r2, [pc, #488]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003d54:	f023 0304 	bic.w	r3, r3, #4
 8003d58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d015      	beq.n	8003d8e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d62:	f7fd fb23 	bl	80013ac <HAL_GetTick>
 8003d66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d68:	e00a      	b.n	8003d80 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d6a:	f7fd fb1f 	bl	80013ac <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e122      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d80:	4b6e      	ldr	r3, [pc, #440]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0ee      	beq.n	8003d6a <HAL_RCC_OscConfig+0x5b6>
 8003d8c:	e014      	b.n	8003db8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8e:	f7fd fb0d 	bl	80013ac <HAL_GetTick>
 8003d92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d94:	e00a      	b.n	8003dac <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d96:	f7fd fb09 	bl	80013ac <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e10c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dac:	4b63      	ldr	r3, [pc, #396]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1ee      	bne.n	8003d96 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8101 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003dc2:	4b5e      	ldr	r3, [pc, #376]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dca:	2b18      	cmp	r3, #24
 8003dcc:	f000 80bc 	beq.w	8003f48 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	f040 8095 	bne.w	8003f04 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b58      	ldr	r3, [pc, #352]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a57      	ldr	r2, [pc, #348]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003de0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7fd fae1 	bl	80013ac <HAL_GetTick>
 8003dea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dee:	f7fd fadd 	bl	80013ac <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e0e2      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e00:	4b4e      	ldr	r3, [pc, #312]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f0      	bne.n	8003dee <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e0c:	4b4b      	ldr	r3, [pc, #300]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e10:	4b4b      	ldr	r3, [pc, #300]	; (8003f40 <HAL_RCC_OscConfig+0x78c>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e1c:	0112      	lsls	r2, r2, #4
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	4946      	ldr	r1, [pc, #280]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	628b      	str	r3, [r1, #40]	; 0x28
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e34:	3b01      	subs	r3, #1
 8003e36:	025b      	lsls	r3, r3, #9
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	3b01      	subs	r3, #1
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	061b      	lsls	r3, r3, #24
 8003e52:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e56:	4939      	ldr	r1, [pc, #228]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003e5c:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	4a36      	ldr	r2, [pc, #216]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e68:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e6c:	4b35      	ldr	r3, [pc, #212]	; (8003f44 <HAL_RCC_OscConfig+0x790>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e74:	00d2      	lsls	r2, r2, #3
 8003e76:	4931      	ldr	r1, [pc, #196]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e7c:	4b2f      	ldr	r3, [pc, #188]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	f023 020c 	bic.w	r2, r3, #12
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	492c      	ldr	r1, [pc, #176]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e8e:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	f023 0202 	bic.w	r2, r3, #2
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	4928      	ldr	r1, [pc, #160]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ea0:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eac:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003eb8:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003ec4:	4b1d      	ldr	r3, [pc, #116]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	4a1c      	ldr	r2, [pc, #112]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed0:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a19      	ldr	r2, [pc, #100]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fd fa66 	bl	80013ac <HAL_GetTick>
 8003ee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fd fa62 	bl	80013ac <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e067      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ef6:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x730>
 8003f02:	e05f      	b.n	8003fc4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f04:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fd fa4c 	bl	80013ac <HAL_GetTick>
 8003f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f18:	f7fd fa48 	bl	80013ac <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e04d      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f2a:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <HAL_RCC_OscConfig+0x788>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x764>
 8003f36:	e045      	b.n	8003fc4 <HAL_RCC_OscConfig+0x810>
 8003f38:	58024800 	.word	0x58024800
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	fffffc0c 	.word	0xfffffc0c
 8003f44:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f48:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <HAL_RCC_OscConfig+0x81c>)
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f4e:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_RCC_OscConfig+0x81c>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d031      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f003 0203 	and.w	r2, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d12a      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d122      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d11a      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	0a5b      	lsrs	r3, r3, #9
 8003f8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f96:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d111      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	0c1b      	lsrs	r3, r3, #16
 8003fa0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d108      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	0e1b      	lsrs	r3, r3, #24
 8003fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3730      	adds	r7, #48	; 0x30
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	58024400 	.word	0x58024400

08003fd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e19c      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b8a      	ldr	r3, [pc, #552]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d910      	bls.n	8004018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b87      	ldr	r3, [pc, #540]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 020f 	bic.w	r2, r3, #15
 8003ffe:	4985      	ldr	r1, [pc, #532]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b83      	ldr	r3, [pc, #524]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e184      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d010      	beq.n	8004046 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	4b7b      	ldr	r3, [pc, #492]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004030:	429a      	cmp	r2, r3
 8004032:	d908      	bls.n	8004046 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004034:	4b78      	ldr	r3, [pc, #480]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	4975      	ldr	r1, [pc, #468]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004042:	4313      	orrs	r3, r2
 8004044:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d010      	beq.n	8004074 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	4b70      	ldr	r3, [pc, #448]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800405e:	429a      	cmp	r2, r3
 8004060:	d908      	bls.n	8004074 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004062:	4b6d      	ldr	r3, [pc, #436]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	496a      	ldr	r1, [pc, #424]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004070:	4313      	orrs	r3, r2
 8004072:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	d010      	beq.n	80040a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699a      	ldr	r2, [r3, #24]
 8004084:	4b64      	ldr	r3, [pc, #400]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800408c:	429a      	cmp	r2, r3
 800408e:	d908      	bls.n	80040a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004090:	4b61      	ldr	r3, [pc, #388]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	495e      	ldr	r1, [pc, #376]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d010      	beq.n	80040d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69da      	ldr	r2, [r3, #28]
 80040b2:	4b59      	ldr	r3, [pc, #356]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d908      	bls.n	80040d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80040be:	4b56      	ldr	r3, [pc, #344]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	4953      	ldr	r1, [pc, #332]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d010      	beq.n	80040fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	4b4d      	ldr	r3, [pc, #308]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d908      	bls.n	80040fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ec:	4b4a      	ldr	r3, [pc, #296]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	f023 020f 	bic.w	r2, r3, #15
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4947      	ldr	r1, [pc, #284]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d055      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800410a:	4b43      	ldr	r3, [pc, #268]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	4940      	ldr	r1, [pc, #256]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004118:	4313      	orrs	r3, r2
 800411a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d107      	bne.n	8004134 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004124:	4b3c      	ldr	r3, [pc, #240]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d121      	bne.n	8004174 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0f6      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d107      	bne.n	800414c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800413c:	4b36      	ldr	r3, [pc, #216]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d115      	bne.n	8004174 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0ea      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d107      	bne.n	8004164 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004154:	4b30      	ldr	r3, [pc, #192]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d109      	bne.n	8004174 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0de      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004164:	4b2c      	ldr	r3, [pc, #176]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0d6      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004174:	4b28      	ldr	r3, [pc, #160]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f023 0207 	bic.w	r2, r3, #7
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4925      	ldr	r1, [pc, #148]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004182:	4313      	orrs	r3, r2
 8004184:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004186:	f7fd f911 	bl	80013ac <HAL_GetTick>
 800418a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418c:	e00a      	b.n	80041a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418e:	f7fd f90d 	bl	80013ac <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f241 3288 	movw	r2, #5000	; 0x1388
 800419c:	4293      	cmp	r3, r2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e0be      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a4:	4b1c      	ldr	r3, [pc, #112]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d1eb      	bne.n	800418e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d010      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	4b14      	ldr	r3, [pc, #80]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d208      	bcs.n	80041e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f023 020f 	bic.w	r2, r3, #15
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	490e      	ldr	r1, [pc, #56]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d214      	bcs.n	800421c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b08      	ldr	r3, [pc, #32]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 020f 	bic.w	r2, r3, #15
 80041fa:	4906      	ldr	r1, [pc, #24]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b04      	ldr	r3, [pc, #16]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d005      	beq.n	800421c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e086      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>
 8004214:	52002000 	.word	0x52002000
 8004218:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d010      	beq.n	800424a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	4b3f      	ldr	r3, [pc, #252]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004234:	429a      	cmp	r2, r3
 8004236:	d208      	bcs.n	800424a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004238:	4b3c      	ldr	r3, [pc, #240]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	4939      	ldr	r1, [pc, #228]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 8004246:	4313      	orrs	r3, r2
 8004248:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d010      	beq.n	8004278 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	4b34      	ldr	r3, [pc, #208]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004262:	429a      	cmp	r2, r3
 8004264:	d208      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004266:	4b31      	ldr	r3, [pc, #196]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	492e      	ldr	r1, [pc, #184]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 8004274:	4313      	orrs	r3, r2
 8004276:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b00      	cmp	r3, #0
 8004282:	d010      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699a      	ldr	r2, [r3, #24]
 8004288:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004290:	429a      	cmp	r2, r3
 8004292:	d208      	bcs.n	80042a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004294:	4b25      	ldr	r3, [pc, #148]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	4922      	ldr	r1, [pc, #136]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d010      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042be:	429a      	cmp	r2, r3
 80042c0:	d208      	bcs.n	80042d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80042c2:	4b1a      	ldr	r3, [pc, #104]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	4917      	ldr	r1, [pc, #92]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042d4:	f000 f834 	bl	8004340 <HAL_RCC_GetSysClockFreq>
 80042d8:	4601      	mov	r1, r0
 80042da:	4b14      	ldr	r3, [pc, #80]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	4a12      	ldr	r2, [pc, #72]	; (8004330 <HAL_RCC_ClockConfig+0x35c>)
 80042e6:	5cd3      	ldrb	r3, [r2, r3]
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	fa21 f303 	lsr.w	r3, r1, r3
 80042f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042f2:	4b0e      	ldr	r3, [pc, #56]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	4a0d      	ldr	r2, [pc, #52]	; (8004330 <HAL_RCC_ClockConfig+0x35c>)
 80042fc:	5cd3      	ldrb	r3, [r2, r3]
 80042fe:	f003 031f 	and.w	r3, r3, #31
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	fa22 f303 	lsr.w	r3, r2, r3
 8004308:	4a0a      	ldr	r2, [pc, #40]	; (8004334 <HAL_RCC_ClockConfig+0x360>)
 800430a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800430c:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <HAL_RCC_ClockConfig+0x364>)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004312:	4b0a      	ldr	r3, [pc, #40]	; (800433c <HAL_RCC_ClockConfig+0x368>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fc fffe 	bl	8001318 <HAL_InitTick>
 800431c:	4603      	mov	r3, r0
 800431e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004320:	7bfb      	ldrb	r3, [r7, #15]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	58024400 	.word	0x58024400
 8004330:	08008a5c 	.word	0x08008a5c
 8004334:	20000004 	.word	0x20000004
 8004338:	20000000 	.word	0x20000000
 800433c:	20000008 	.word	0x20000008

08004340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004340:	b480      	push	{r7}
 8004342:	b089      	sub	sp, #36	; 0x24
 8004344:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004346:	4baf      	ldr	r3, [pc, #700]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800434e:	2b18      	cmp	r3, #24
 8004350:	f200 814e 	bhi.w	80045f0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	080043c1 	.word	0x080043c1
 8004360:	080045f1 	.word	0x080045f1
 8004364:	080045f1 	.word	0x080045f1
 8004368:	080045f1 	.word	0x080045f1
 800436c:	080045f1 	.word	0x080045f1
 8004370:	080045f1 	.word	0x080045f1
 8004374:	080045f1 	.word	0x080045f1
 8004378:	080045f1 	.word	0x080045f1
 800437c:	080043e7 	.word	0x080043e7
 8004380:	080045f1 	.word	0x080045f1
 8004384:	080045f1 	.word	0x080045f1
 8004388:	080045f1 	.word	0x080045f1
 800438c:	080045f1 	.word	0x080045f1
 8004390:	080045f1 	.word	0x080045f1
 8004394:	080045f1 	.word	0x080045f1
 8004398:	080045f1 	.word	0x080045f1
 800439c:	080043ed 	.word	0x080043ed
 80043a0:	080045f1 	.word	0x080045f1
 80043a4:	080045f1 	.word	0x080045f1
 80043a8:	080045f1 	.word	0x080045f1
 80043ac:	080045f1 	.word	0x080045f1
 80043b0:	080045f1 	.word	0x080045f1
 80043b4:	080045f1 	.word	0x080045f1
 80043b8:	080045f1 	.word	0x080045f1
 80043bc:	080043f3 	.word	0x080043f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043c0:	4b90      	ldr	r3, [pc, #576]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d009      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043cc:	4b8d      	ldr	r3, [pc, #564]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	08db      	lsrs	r3, r3, #3
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	4a8c      	ldr	r2, [pc, #560]	; (8004608 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80043d8:	fa22 f303 	lsr.w	r3, r2, r3
 80043dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80043de:	e10a      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80043e0:	4b89      	ldr	r3, [pc, #548]	; (8004608 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80043e2:	61bb      	str	r3, [r7, #24]
    break;
 80043e4:	e107      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80043e6:	4b89      	ldr	r3, [pc, #548]	; (800460c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80043e8:	61bb      	str	r3, [r7, #24]
    break;
 80043ea:	e104      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80043ec:	4b88      	ldr	r3, [pc, #544]	; (8004610 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80043ee:	61bb      	str	r3, [r7, #24]
    break;
 80043f0:	e101      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043f2:	4b84      	ldr	r3, [pc, #528]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80043fc:	4b81      	ldr	r3, [pc, #516]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004406:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004408:	4b7e      	ldr	r3, [pc, #504]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004412:	4b7c      	ldr	r3, [pc, #496]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004416:	08db      	lsrs	r3, r3, #3
 8004418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80da 	beq.w	80045ea <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d05a      	beq.n	80044f2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800443c:	2b01      	cmp	r3, #1
 800443e:	d302      	bcc.n	8004446 <HAL_RCC_GetSysClockFreq+0x106>
 8004440:	2b02      	cmp	r3, #2
 8004442:	d078      	beq.n	8004536 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004444:	e099      	b.n	800457a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004446:	4b6f      	ldr	r3, [pc, #444]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d02d      	beq.n	80044ae <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004452:	4b6c      	ldr	r3, [pc, #432]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	08db      	lsrs	r3, r3, #3
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	4a6a      	ldr	r2, [pc, #424]	; (8004608 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800445e:	fa22 f303 	lsr.w	r3, r2, r3
 8004462:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	ee07 3a90 	vmov	s15, r3
 8004474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800447c:	4b61      	ldr	r3, [pc, #388]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004484:	ee07 3a90 	vmov	s15, r3
 8004488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800448c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004490:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004614 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004494:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80044ac:	e087      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004618 <HAL_RCC_GetSysClockFreq+0x2d8>
 80044bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c0:	4b50      	ldr	r3, [pc, #320]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c8:	ee07 3a90 	vmov	s15, r3
 80044cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80044d4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004614 <HAL_RCC_GetSysClockFreq+0x2d4>
 80044d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044f0:	e065      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fc:	eddf 6a47 	vldr	s13, [pc, #284]	; 800461c <HAL_RCC_GetSysClockFreq+0x2dc>
 8004500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004504:	4b3f      	ldr	r3, [pc, #252]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450c:	ee07 3a90 	vmov	s15, r3
 8004510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004514:	ed97 6a02 	vldr	s12, [r7, #8]
 8004518:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004614 <HAL_RCC_GetSysClockFreq+0x2d4>
 800451c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800452c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004530:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004534:	e043      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	ee07 3a90 	vmov	s15, r3
 800453c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004540:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004620 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004548:	4b2e      	ldr	r3, [pc, #184]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004550:	ee07 3a90 	vmov	s15, r3
 8004554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004558:	ed97 6a02 	vldr	s12, [r7, #8]
 800455c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004614 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800456c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004574:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004578:	e021      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	ee07 3a90 	vmov	s15, r3
 8004580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004584:	eddf 6a25 	vldr	s13, [pc, #148]	; 800461c <HAL_RCC_GetSysClockFreq+0x2dc>
 8004588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458c:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004594:	ee07 3a90 	vmov	s15, r3
 8004598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459c:	ed97 6a02 	vldr	s12, [r7, #8]
 80045a0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004614 <HAL_RCC_GetSysClockFreq+0x2d4>
 80045a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045bc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	0a5b      	lsrs	r3, r3, #9
 80045c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c8:	3301      	adds	r3, #1
 80045ca:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e2:	ee17 3a90 	vmov	r3, s15
 80045e6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80045e8:	e005      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	61bb      	str	r3, [r7, #24]
    break;
 80045ee:	e002      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80045f2:	61bb      	str	r3, [r7, #24]
    break;
 80045f4:	bf00      	nop
  }

  return sysclockfreq;
 80045f6:	69bb      	ldr	r3, [r7, #24]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3724      	adds	r7, #36	; 0x24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	58024400 	.word	0x58024400
 8004608:	03d09000 	.word	0x03d09000
 800460c:	003d0900 	.word	0x003d0900
 8004610:	007a1200 	.word	0x007a1200
 8004614:	46000000 	.word	0x46000000
 8004618:	4c742400 	.word	0x4c742400
 800461c:	4a742400 	.word	0x4a742400
 8004620:	4af42400 	.word	0x4af42400

08004624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800462a:	f7ff fe89 	bl	8004340 <HAL_RCC_GetSysClockFreq>
 800462e:	4601      	mov	r1, r0
 8004630:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_RCC_GetHCLKFreq+0x50>)
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	0a1b      	lsrs	r3, r3, #8
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	4a0f      	ldr	r2, [pc, #60]	; (8004678 <HAL_RCC_GetHCLKFreq+0x54>)
 800463c:	5cd3      	ldrb	r3, [r2, r3]
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	fa21 f303 	lsr.w	r3, r1, r3
 8004646:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <HAL_RCC_GetHCLKFreq+0x50>)
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	4a09      	ldr	r2, [pc, #36]	; (8004678 <HAL_RCC_GetHCLKFreq+0x54>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	fa22 f303 	lsr.w	r3, r2, r3
 800465e:	4a07      	ldr	r2, [pc, #28]	; (800467c <HAL_RCC_GetHCLKFreq+0x58>)
 8004660:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004662:	4a07      	ldr	r2, [pc, #28]	; (8004680 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <HAL_RCC_GetHCLKFreq+0x58>)
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	58024400 	.word	0x58024400
 8004678:	08008a5c 	.word	0x08008a5c
 800467c:	20000004 	.word	0x20000004
 8004680:	20000000 	.word	0x20000000

08004684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004688:	f7ff ffcc 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 800468c:	4601      	mov	r1, r0
 800468e:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	091b      	lsrs	r3, r3, #4
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	4a04      	ldr	r2, [pc, #16]	; (80046ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800469a:	5cd3      	ldrb	r3, [r2, r3]
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	58024400 	.word	0x58024400
 80046ac:	08008a5c 	.word	0x08008a5c

080046b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80046b4:	f7ff ffb6 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 80046b8:	4601      	mov	r1, r0
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	0a1b      	lsrs	r3, r3, #8
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	4a04      	ldr	r2, [pc, #16]	; (80046d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046c6:	5cd3      	ldrb	r3, [r2, r3]
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	58024400 	.word	0x58024400
 80046d8:	08008a5c 	.word	0x08008a5c

080046dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046e4:	2300      	movs	r3, #0
 80046e6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046e8:	2300      	movs	r3, #0
 80046ea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d03d      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004700:	d013      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004706:	d802      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800470c:	e01f      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800470e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004712:	d013      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004714:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004718:	d01c      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800471a:	e018      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800471c:	4baf      	ldr	r3, [pc, #700]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	4aae      	ldr	r2, [pc, #696]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004726:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004728:	e015      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3304      	adds	r3, #4
 800472e:	2102      	movs	r1, #2
 8004730:	4618      	mov	r0, r3
 8004732:	f001 fd33 	bl	800619c <RCCEx_PLL2_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800473a:	e00c      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3324      	adds	r3, #36	; 0x24
 8004740:	2102      	movs	r1, #2
 8004742:	4618      	mov	r0, r3
 8004744:	f001 fddc 	bl	8006300 <RCCEx_PLL3_Config>
 8004748:	4603      	mov	r3, r0
 800474a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800474c:	e003      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	75fb      	strb	r3, [r7, #23]
      break;
 8004752:	e000      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004756:	7dfb      	ldrb	r3, [r7, #23]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800475c:	4b9f      	ldr	r3, [pc, #636]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800475e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004768:	499c      	ldr	r1, [pc, #624]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800476a:	4313      	orrs	r3, r2
 800476c:	650b      	str	r3, [r1, #80]	; 0x50
 800476e:	e001      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004770:	7dfb      	ldrb	r3, [r7, #23]
 8004772:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d03d      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	2b04      	cmp	r3, #4
 8004786:	d826      	bhi.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004788:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800478a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478e:	bf00      	nop
 8004790:	080047a5 	.word	0x080047a5
 8004794:	080047b3 	.word	0x080047b3
 8004798:	080047c5 	.word	0x080047c5
 800479c:	080047dd 	.word	0x080047dd
 80047a0:	080047dd 	.word	0x080047dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a4:	4b8d      	ldr	r3, [pc, #564]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	4a8c      	ldr	r2, [pc, #560]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047b0:	e015      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3304      	adds	r3, #4
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 fcef 	bl	800619c <RCCEx_PLL2_Config>
 80047be:	4603      	mov	r3, r0
 80047c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047c2:	e00c      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3324      	adds	r3, #36	; 0x24
 80047c8:	2100      	movs	r1, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 fd98 	bl	8006300 <RCCEx_PLL3_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047d4:	e003      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	75fb      	strb	r3, [r7, #23]
      break;
 80047da:	e000      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80047dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047de:	7dfb      	ldrb	r3, [r7, #23]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047e4:	4b7d      	ldr	r3, [pc, #500]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e8:	f023 0207 	bic.w	r2, r3, #7
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f0:	497a      	ldr	r1, [pc, #488]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	650b      	str	r3, [r1, #80]	; 0x50
 80047f6:	e001      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
 80047fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004804:	2b00      	cmp	r3, #0
 8004806:	d03e      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480c:	2b80      	cmp	r3, #128	; 0x80
 800480e:	d01c      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004810:	2b80      	cmp	r3, #128	; 0x80
 8004812:	d804      	bhi.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004818:	2b40      	cmp	r3, #64	; 0x40
 800481a:	d00d      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800481c:	e01e      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800481e:	2bc0      	cmp	r3, #192	; 0xc0
 8004820:	d01f      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004826:	d01e      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004828:	e018      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800482a:	4b6c      	ldr	r3, [pc, #432]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	4a6b      	ldr	r2, [pc, #428]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004836:	e017      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3304      	adds	r3, #4
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f001 fcac 	bl	800619c <RCCEx_PLL2_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004848:	e00e      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3324      	adds	r3, #36	; 0x24
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f001 fd55 	bl	8006300 <RCCEx_PLL3_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800485a:	e005      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	75fb      	strb	r3, [r7, #23]
      break;
 8004860:	e002      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004862:	bf00      	nop
 8004864:	e000      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004866:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004868:	7dfb      	ldrb	r3, [r7, #23]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800486e:	4b5b      	ldr	r3, [pc, #364]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004872:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487a:	4958      	ldr	r1, [pc, #352]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800487c:	4313      	orrs	r3, r2
 800487e:	650b      	str	r3, [r1, #80]	; 0x50
 8004880:	e001      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004882:	7dfb      	ldrb	r3, [r7, #23]
 8004884:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488e:	2b00      	cmp	r3, #0
 8004890:	d044      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800489c:	d01f      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x202>
 800489e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a2:	d805      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048ac:	d00e      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80048ae:	e01f      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80048b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048b4:	d01f      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80048b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048ba:	d01e      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80048bc:	e018      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048be:	4b47      	ldr	r3, [pc, #284]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	4a46      	ldr	r2, [pc, #280]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048ca:	e017      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3304      	adds	r3, #4
 80048d0:	2100      	movs	r1, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 fc62 	bl	800619c <RCCEx_PLL2_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80048dc:	e00e      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3324      	adds	r3, #36	; 0x24
 80048e2:	2100      	movs	r1, #0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f001 fd0b 	bl	8006300 <RCCEx_PLL3_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048ee:	e005      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	75fb      	strb	r3, [r7, #23]
      break;
 80048f4:	e002      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80048f6:	bf00      	nop
 80048f8:	e000      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80048fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10a      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004902:	4b36      	ldr	r3, [pc, #216]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004906:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004910:	4932      	ldr	r1, [pc, #200]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004912:	4313      	orrs	r3, r2
 8004914:	658b      	str	r3, [r1, #88]	; 0x58
 8004916:	e001      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004918:	7dfb      	ldrb	r3, [r7, #23]
 800491a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004924:	2b00      	cmp	r3, #0
 8004926:	d044      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800492e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004932:	d01f      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004934:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004938:	d805      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800493e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004942:	d00e      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004944:	e01f      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004946:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800494a:	d01f      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800494c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004950:	d01e      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004952:	e018      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004954:	4b21      	ldr	r3, [pc, #132]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	4a20      	ldr	r2, [pc, #128]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800495a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800495e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004960:	e017      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3304      	adds	r3, #4
 8004966:	2100      	movs	r1, #0
 8004968:	4618      	mov	r0, r3
 800496a:	f001 fc17 	bl	800619c <RCCEx_PLL2_Config>
 800496e:	4603      	mov	r3, r0
 8004970:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004972:	e00e      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3324      	adds	r3, #36	; 0x24
 8004978:	2100      	movs	r1, #0
 800497a:	4618      	mov	r0, r3
 800497c:	f001 fcc0 	bl	8006300 <RCCEx_PLL3_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004984:	e005      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	75fb      	strb	r3, [r7, #23]
      break;
 800498a:	e002      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800498c:	bf00      	nop
 800498e:	e000      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004992:	7dfb      	ldrb	r3, [r7, #23]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004998:	4b10      	ldr	r3, [pc, #64]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049a6:	490d      	ldr	r1, [pc, #52]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	658b      	str	r3, [r1, #88]	; 0x58
 80049ac:	e001      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d035      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d00c      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d802      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01b      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80049ce:	e017      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d00c      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x312>
 80049d4:	2b30      	cmp	r3, #48	; 0x30
 80049d6:	d018      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80049d8:	e012      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80049da:	bf00      	nop
 80049dc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e0:	4baf      	ldr	r3, [pc, #700]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	4aae      	ldr	r2, [pc, #696]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80049ec:	e00e      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2102      	movs	r1, #2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 fbd1 	bl	800619c <RCCEx_PLL2_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80049fe:	e005      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	75fb      	strb	r3, [r7, #23]
      break;
 8004a04:	e002      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004a06:	bf00      	nop
 8004a08:	e000      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a12:	4ba3      	ldr	r3, [pc, #652]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1e:	49a0      	ldr	r1, [pc, #640]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a24:	e001      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d042      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a3e:	d01f      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a44:	d805      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4e:	d00e      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004a50:	e01f      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004a52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a56:	d01f      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a5c:	d01e      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004a5e:	e018      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a60:	4b8f      	ldr	r3, [pc, #572]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	4a8e      	ldr	r2, [pc, #568]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a6c:	e017      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3304      	adds	r3, #4
 8004a72:	2100      	movs	r1, #0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 fb91 	bl	800619c <RCCEx_PLL2_Config>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a7e:	e00e      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3324      	adds	r3, #36	; 0x24
 8004a84:	2100      	movs	r1, #0
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 fc3a 	bl	8006300 <RCCEx_PLL3_Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a90:	e005      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	75fb      	strb	r3, [r7, #23]
      break;
 8004a96:	e002      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004a98:	bf00      	nop
 8004a9a:	e000      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004aa4:	4b7e      	ldr	r3, [pc, #504]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab0:	497b      	ldr	r1, [pc, #492]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	650b      	str	r3, [r1, #80]	; 0x50
 8004ab6:	e001      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
 8004aba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d042      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ad0:	d01b      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ad6:	d805      	bhi.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d022      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004ae2:	e01b      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004ae4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ae8:	d01d      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004aea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aee:	d01c      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004af0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004af4:	d01b      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004af6:	e011      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	2101      	movs	r1, #1
 8004afe:	4618      	mov	r0, r3
 8004b00:	f001 fb4c 	bl	800619c <RCCEx_PLL2_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004b08:	e012      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3324      	adds	r3, #36	; 0x24
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 fbf5 	bl	8006300 <RCCEx_PLL3_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004b1a:	e009      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b20:	e006      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004b22:	bf00      	nop
 8004b24:	e004      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004b36:	4b5a      	ldr	r3, [pc, #360]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b42:	4957      	ldr	r1, [pc, #348]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	650b      	str	r3, [r1, #80]	; 0x50
 8004b48:	e001      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
 8004b4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d044      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b64:	d01b      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6a:	d805      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d022      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004b76:	e01b      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7c:	d01d      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b82:	d01c      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004b84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b88:	d01b      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b8a:	e011      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	2101      	movs	r1, #1
 8004b92:	4618      	mov	r0, r3
 8004b94:	f001 fb02 	bl	800619c <RCCEx_PLL2_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b9c:	e012      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3324      	adds	r3, #36	; 0x24
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 fbab 	bl	8006300 <RCCEx_PLL3_Config>
 8004baa:	4603      	mov	r3, r0
 8004bac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004bae:	e009      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb4:	e006      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004bb6:	bf00      	nop
 8004bb8:	e004      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004bba:	bf00      	nop
 8004bbc:	e002      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004bbe:	bf00      	nop
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004bca:	4b35      	ldr	r3, [pc, #212]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bd8:	4931      	ldr	r1, [pc, #196]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	658b      	str	r3, [r1, #88]	; 0x58
 8004bde:	e001      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
 8004be2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d02d      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bf8:	d005      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bfe:	d009      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d013      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004c04:	e00f      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c06:	4b26      	ldr	r3, [pc, #152]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	4a25      	ldr	r2, [pc, #148]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004c12:	e00c      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	2101      	movs	r1, #1
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f001 fabe 	bl	800619c <RCCEx_PLL2_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004c24:	e003      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	75fb      	strb	r3, [r7, #23]
      break;
 8004c2a:	e000      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d109      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c34:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c40:	4917      	ldr	r1, [pc, #92]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	650b      	str	r3, [r1, #80]	; 0x50
 8004c46:	e001      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d035      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d81b      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004ca5 	.word	0x08004ca5
 8004c6c:	08004c79 	.word	0x08004c79
 8004c70:	08004c87 	.word	0x08004c87
 8004c74:	08004ca5 	.word	0x08004ca5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c78:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c84:	e00f      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fa85 	bl	800619c <RCCEx_PLL2_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c96:	e006      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9c:	e003      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004c9e:	bf00      	nop
 8004ca0:	58024400 	.word	0x58024400
      break;
 8004ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d109      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004cac:	4bba      	ldr	r3, [pc, #744]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb0:	f023 0203 	bic.w	r2, r3, #3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb8:	49b7      	ldr	r1, [pc, #732]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004cbe:	e001      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
 8004cc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8086 	beq.w	8004dde <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cd2:	4bb2      	ldr	r3, [pc, #712]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4ab1      	ldr	r2, [pc, #708]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cde:	f7fc fb65 	bl	80013ac <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ce4:	e009      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce6:	f7fc fb61 	bl	80013ac <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b64      	cmp	r3, #100	; 0x64
 8004cf2:	d902      	bls.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	75fb      	strb	r3, [r7, #23]
        break;
 8004cf8:	e005      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cfa:	4ba8      	ldr	r3, [pc, #672]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0ef      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d166      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d0c:	4ba2      	ldr	r3, [pc, #648]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d16:	4053      	eors	r3, r2
 8004d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d013      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d20:	4b9d      	ldr	r3, [pc, #628]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d28:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d2a:	4b9b      	ldr	r3, [pc, #620]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	4a9a      	ldr	r2, [pc, #616]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d34:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d36:	4b98      	ldr	r3, [pc, #608]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	4a97      	ldr	r2, [pc, #604]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d40:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d42:	4a95      	ldr	r2, [pc, #596]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d52:	d115      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fc fb2a 	bl	80013ac <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5c:	f7fc fb26 	bl	80013ac <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d902      	bls.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	75fb      	strb	r3, [r7, #23]
            break;
 8004d72:	e005      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d74:	4b88      	ldr	r3, [pc, #544]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0ed      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d126      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d94:	d10d      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004d96:	4b80      	ldr	r3, [pc, #512]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004da4:	0919      	lsrs	r1, r3, #4
 8004da6:	4b7e      	ldr	r3, [pc, #504]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004da8:	400b      	ands	r3, r1
 8004daa:	497b      	ldr	r1, [pc, #492]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	610b      	str	r3, [r1, #16]
 8004db0:	e005      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004db2:	4b79      	ldr	r3, [pc, #484]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	4a78      	ldr	r2, [pc, #480]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004db8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004dbc:	6113      	str	r3, [r2, #16]
 8004dbe:	4b76      	ldr	r3, [pc, #472]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004dc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dcc:	4972      	ldr	r1, [pc, #456]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	670b      	str	r3, [r1, #112]	; 0x70
 8004dd2:	e004      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
 8004dd6:	75bb      	strb	r3, [r7, #22]
 8004dd8:	e001      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
 8004ddc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d07d      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dee:	2b28      	cmp	r3, #40	; 0x28
 8004df0:	d866      	bhi.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004df2:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df8:	08004ec7 	.word	0x08004ec7
 8004dfc:	08004ec1 	.word	0x08004ec1
 8004e00:	08004ec1 	.word	0x08004ec1
 8004e04:	08004ec1 	.word	0x08004ec1
 8004e08:	08004ec1 	.word	0x08004ec1
 8004e0c:	08004ec1 	.word	0x08004ec1
 8004e10:	08004ec1 	.word	0x08004ec1
 8004e14:	08004ec1 	.word	0x08004ec1
 8004e18:	08004e9d 	.word	0x08004e9d
 8004e1c:	08004ec1 	.word	0x08004ec1
 8004e20:	08004ec1 	.word	0x08004ec1
 8004e24:	08004ec1 	.word	0x08004ec1
 8004e28:	08004ec1 	.word	0x08004ec1
 8004e2c:	08004ec1 	.word	0x08004ec1
 8004e30:	08004ec1 	.word	0x08004ec1
 8004e34:	08004ec1 	.word	0x08004ec1
 8004e38:	08004eaf 	.word	0x08004eaf
 8004e3c:	08004ec1 	.word	0x08004ec1
 8004e40:	08004ec1 	.word	0x08004ec1
 8004e44:	08004ec1 	.word	0x08004ec1
 8004e48:	08004ec1 	.word	0x08004ec1
 8004e4c:	08004ec1 	.word	0x08004ec1
 8004e50:	08004ec1 	.word	0x08004ec1
 8004e54:	08004ec1 	.word	0x08004ec1
 8004e58:	08004ec7 	.word	0x08004ec7
 8004e5c:	08004ec1 	.word	0x08004ec1
 8004e60:	08004ec1 	.word	0x08004ec1
 8004e64:	08004ec1 	.word	0x08004ec1
 8004e68:	08004ec1 	.word	0x08004ec1
 8004e6c:	08004ec1 	.word	0x08004ec1
 8004e70:	08004ec1 	.word	0x08004ec1
 8004e74:	08004ec1 	.word	0x08004ec1
 8004e78:	08004ec7 	.word	0x08004ec7
 8004e7c:	08004ec1 	.word	0x08004ec1
 8004e80:	08004ec1 	.word	0x08004ec1
 8004e84:	08004ec1 	.word	0x08004ec1
 8004e88:	08004ec1 	.word	0x08004ec1
 8004e8c:	08004ec1 	.word	0x08004ec1
 8004e90:	08004ec1 	.word	0x08004ec1
 8004e94:	08004ec1 	.word	0x08004ec1
 8004e98:	08004ec7 	.word	0x08004ec7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 f97a 	bl	800619c <RCCEx_PLL2_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004eac:	e00c      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3324      	adds	r3, #36	; 0x24
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 fa23 	bl	8006300 <RCCEx_PLL3_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004ebe:	e003      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec4:	e000      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004ece:	4b32      	ldr	r3, [pc, #200]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eda:	492f      	ldr	r1, [pc, #188]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	654b      	str	r3, [r1, #84]	; 0x54
 8004ee0:	e001      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d037      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d820      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f43 	.word	0x08004f43
 8004f04:	08004f19 	.word	0x08004f19
 8004f08:	08004f2b 	.word	0x08004f2b
 8004f0c:	08004f43 	.word	0x08004f43
 8004f10:	08004f43 	.word	0x08004f43
 8004f14:	08004f43 	.word	0x08004f43
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f001 f93c 	bl	800619c <RCCEx_PLL2_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004f28:	e00c      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3324      	adds	r3, #36	; 0x24
 8004f2e:	2101      	movs	r1, #1
 8004f30:	4618      	mov	r0, r3
 8004f32:	f001 f9e5 	bl	8006300 <RCCEx_PLL3_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004f3a:	e003      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f40:	e000      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f44:	7dfb      	ldrb	r3, [r7, #23]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f4a:	4b13      	ldr	r3, [pc, #76]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4e:	f023 0207 	bic.w	r2, r3, #7
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f56:	4910      	ldr	r1, [pc, #64]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	654b      	str	r3, [r1, #84]	; 0x54
 8004f5c:	e001      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d040      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f74:	2b05      	cmp	r3, #5
 8004f76:	d827      	bhi.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fcf 	.word	0x08004fcf
 8004f84:	08004fa5 	.word	0x08004fa5
 8004f88:	08004fb7 	.word	0x08004fb7
 8004f8c:	08004fcf 	.word	0x08004fcf
 8004f90:	08004fcf 	.word	0x08004fcf
 8004f94:	08004fcf 	.word	0x08004fcf
 8004f98:	58024400 	.word	0x58024400
 8004f9c:	58024800 	.word	0x58024800
 8004fa0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	2101      	movs	r1, #1
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 f8f6 	bl	800619c <RCCEx_PLL2_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004fb4:	e00c      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3324      	adds	r3, #36	; 0x24
 8004fba:	2101      	movs	r1, #1
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 f99f 	bl	8006300 <RCCEx_PLL3_Config>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004fc6:	e003      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	75fb      	strb	r3, [r7, #23]
      break;
 8004fcc:	e000      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fd6:	4bb2      	ldr	r3, [pc, #712]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fda:	f023 0207 	bic.w	r2, r3, #7
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe4:	49ae      	ldr	r1, [pc, #696]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	658b      	str	r3, [r1, #88]	; 0x58
 8004fea:	e001      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
 8004fee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d044      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005006:	d01b      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800500c:	d805      	bhi.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d022      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005018:	e01b      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800501a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501e:	d01d      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005024:	d01c      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005026:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800502a:	d01b      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800502c:	e011      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3304      	adds	r3, #4
 8005032:	2100      	movs	r1, #0
 8005034:	4618      	mov	r0, r3
 8005036:	f001 f8b1 	bl	800619c <RCCEx_PLL2_Config>
 800503a:	4603      	mov	r3, r0
 800503c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800503e:	e012      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3324      	adds	r3, #36	; 0x24
 8005044:	2102      	movs	r1, #2
 8005046:	4618      	mov	r0, r3
 8005048:	f001 f95a 	bl	8006300 <RCCEx_PLL3_Config>
 800504c:	4603      	mov	r3, r0
 800504e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005050:	e009      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	75fb      	strb	r3, [r7, #23]
      break;
 8005056:	e006      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005058:	bf00      	nop
 800505a:	e004      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800505c:	bf00      	nop
 800505e:	e002      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005060:	bf00      	nop
 8005062:	e000      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005066:	7dfb      	ldrb	r3, [r7, #23]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800506c:	4b8c      	ldr	r3, [pc, #560]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800506e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005070:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800507a:	4989      	ldr	r1, [pc, #548]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800507c:	4313      	orrs	r3, r2
 800507e:	654b      	str	r3, [r1, #84]	; 0x54
 8005080:	e001      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005082:	7dfb      	ldrb	r3, [r7, #23]
 8005084:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d044      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509c:	d01b      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800509e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a2:	d805      	bhi.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d022      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80050a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ac:	d00a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80050ae:	e01b      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80050b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b4:	d01d      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80050b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80050ba:	d01c      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80050bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050c0:	d01b      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80050c2:	e011      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3304      	adds	r3, #4
 80050c8:	2100      	movs	r1, #0
 80050ca:	4618      	mov	r0, r3
 80050cc:	f001 f866 	bl	800619c <RCCEx_PLL2_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80050d4:	e012      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3324      	adds	r3, #36	; 0x24
 80050da:	2102      	movs	r1, #2
 80050dc:	4618      	mov	r0, r3
 80050de:	f001 f90f 	bl	8006300 <RCCEx_PLL3_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80050e6:	e009      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	75fb      	strb	r3, [r7, #23]
      break;
 80050ec:	e006      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80050ee:	bf00      	nop
 80050f0:	e004      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80050f2:	bf00      	nop
 80050f4:	e002      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80050f6:	bf00      	nop
 80050f8:	e000      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80050fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005102:	4b67      	ldr	r3, [pc, #412]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005106:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005110:	4963      	ldr	r1, [pc, #396]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005112:	4313      	orrs	r3, r2
 8005114:	658b      	str	r3, [r1, #88]	; 0x58
 8005116:	e001      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005118:	7dfb      	ldrb	r3, [r7, #23]
 800511a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005124:	2b00      	cmp	r3, #0
 8005126:	d044      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800512e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005132:	d01b      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005134:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005138:	d805      	bhi.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d022      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800513e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005142:	d00a      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005144:	e01b      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800514a:	d01d      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800514c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005150:	d01c      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005152:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005156:	d01b      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005158:	e011      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3304      	adds	r3, #4
 800515e:	2100      	movs	r1, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f001 f81b 	bl	800619c <RCCEx_PLL2_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800516a:	e012      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3324      	adds	r3, #36	; 0x24
 8005170:	2102      	movs	r1, #2
 8005172:	4618      	mov	r0, r3
 8005174:	f001 f8c4 	bl	8006300 <RCCEx_PLL3_Config>
 8005178:	4603      	mov	r3, r0
 800517a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800517c:	e009      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	75fb      	strb	r3, [r7, #23]
      break;
 8005182:	e006      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005184:	bf00      	nop
 8005186:	e004      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005188:	bf00      	nop
 800518a:	e002      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800518c:	bf00      	nop
 800518e:	e000      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005192:	7dfb      	ldrb	r3, [r7, #23]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005198:	4b41      	ldr	r3, [pc, #260]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800519a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051a6:	493e      	ldr	r1, [pc, #248]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	658b      	str	r3, [r1, #88]	; 0x58
 80051ac:	e001      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01a      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c8:	d10a      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3324      	adds	r3, #36	; 0x24
 80051ce:	2102      	movs	r1, #2
 80051d0:	4618      	mov	r0, r3
 80051d2:	f001 f895 	bl	8006300 <RCCEx_PLL3_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80051e0:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80051e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ee:	492c      	ldr	r1, [pc, #176]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520a:	d10a      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3324      	adds	r3, #36	; 0x24
 8005210:	2102      	movs	r1, #2
 8005212:	4618      	mov	r0, r3
 8005214:	f001 f874 	bl	8006300 <RCCEx_PLL3_Config>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005222:	4b1f      	ldr	r3, [pc, #124]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005226:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005230:	491b      	ldr	r1, [pc, #108]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005232:	4313      	orrs	r3, r2
 8005234:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d032      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524c:	d00d      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800524e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005252:	d016      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005254:	2b00      	cmp	r3, #0
 8005256:	d111      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	2100      	movs	r1, #0
 800525e:	4618      	mov	r0, r3
 8005260:	f000 ff9c 	bl	800619c <RCCEx_PLL2_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005268:	e00c      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3324      	adds	r3, #36	; 0x24
 800526e:	2102      	movs	r1, #2
 8005270:	4618      	mov	r0, r3
 8005272:	f001 f845 	bl	8006300 <RCCEx_PLL3_Config>
 8005276:	4603      	mov	r3, r0
 8005278:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800527a:	e003      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	75fb      	strb	r3, [r7, #23]
      break;
 8005280:	e000      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005284:	7dfb      	ldrb	r3, [r7, #23]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10c      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005298:	4901      	ldr	r1, [pc, #4]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800529a:	4313      	orrs	r3, r2
 800529c:	658b      	str	r3, [r1, #88]	; 0x58
 800529e:	e003      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80052a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
 80052a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d02f      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052be:	d00c      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80052c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052c4:	d015      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80052c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ca:	d10f      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052cc:	4b79      	ldr	r3, [pc, #484]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	4a78      	ldr	r2, [pc, #480]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80052d8:	e00c      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3324      	adds	r3, #36	; 0x24
 80052de:	2101      	movs	r1, #1
 80052e0:	4618      	mov	r0, r3
 80052e2:	f001 f80d 	bl	8006300 <RCCEx_PLL3_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80052ea:	e003      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	75fb      	strb	r3, [r7, #23]
      break;
 80052f0:	e000      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80052f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052f4:	7dfb      	ldrb	r3, [r7, #23]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10a      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052fa:	4b6e      	ldr	r3, [pc, #440]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005308:	496a      	ldr	r1, [pc, #424]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800530a:	4313      	orrs	r3, r2
 800530c:	654b      	str	r3, [r1, #84]	; 0x54
 800530e:	e001      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005310:	7dfb      	ldrb	r3, [r7, #23]
 8005312:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d029      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532c:	d007      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800532e:	e00f      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005330:	4b60      	ldr	r3, [pc, #384]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	4a5f      	ldr	r2, [pc, #380]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800533a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800533c:	e00b      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3304      	adds	r3, #4
 8005342:	2102      	movs	r1, #2
 8005344:	4618      	mov	r0, r3
 8005346:	f000 ff29 	bl	800619c <RCCEx_PLL2_Config>
 800534a:	4603      	mov	r3, r0
 800534c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800534e:	e002      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	75fb      	strb	r3, [r7, #23]
      break;
 8005354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005356:	7dfb      	ldrb	r3, [r7, #23]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d109      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800535c:	4b55      	ldr	r3, [pc, #340]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800535e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005360:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005368:	4952      	ldr	r1, [pc, #328]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800536a:	4313      	orrs	r3, r2
 800536c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800536e:	e001      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	7dfb      	ldrb	r3, [r7, #23]
 8005372:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3324      	adds	r3, #36	; 0x24
 8005384:	2102      	movs	r1, #2
 8005386:	4618      	mov	r0, r3
 8005388:	f000 ffba 	bl	8006300 <RCCEx_PLL3_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d02f      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053aa:	d00c      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80053ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b0:	d802      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d011      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80053b6:	e00d      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80053b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053bc:	d00f      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80053be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053c2:	d00e      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80053c4:	e006      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053c6:	4b3b      	ldr	r3, [pc, #236]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	4a3a      	ldr	r2, [pc, #232]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80053d2:	e007      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	75fb      	strb	r3, [r7, #23]
      break;
 80053d8:	e004      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80053da:	bf00      	nop
 80053dc:	e002      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80053de:	bf00      	nop
 80053e0:	e000      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80053e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d109      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053ea:	4b32      	ldr	r3, [pc, #200]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053f6:	492f      	ldr	r1, [pc, #188]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	654b      	str	r3, [r1, #84]	; 0x54
 80053fc:	e001      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fe:	7dfb      	ldrb	r3, [r7, #23]
 8005400:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800540e:	4b29      	ldr	r3, [pc, #164]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005412:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	4926      	ldr	r1, [pc, #152]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800541c:	4313      	orrs	r3, r2
 800541e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d009      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800542c:	4b21      	ldr	r3, [pc, #132]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800543a:	491e      	ldr	r1, [pc, #120]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800543c:	4313      	orrs	r3, r2
 800543e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800544c:	4b19      	ldr	r3, [pc, #100]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800544e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005450:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005458:	4916      	ldr	r1, [pc, #88]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800545a:	4313      	orrs	r3, r2
 800545c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00d      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800546a:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	4a11      	ldr	r2, [pc, #68]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005470:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005474:	6113      	str	r3, [r2, #16]
 8005476:	4b0f      	ldr	r3, [pc, #60]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005480:	490c      	ldr	r1, [pc, #48]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005482:	4313      	orrs	r3, r2
 8005484:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	da08      	bge.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800548e:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005492:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800549a:	4906      	ldr	r1, [pc, #24]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800549c:	4313      	orrs	r3, r2
 800549e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80054a0:	7dbb      	ldrb	r3, [r7, #22]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	e000      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	58024400 	.word	0x58024400

080054b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b090      	sub	sp, #64	; 0x40
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c6:	d150      	bne.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80054c8:	4ba1      	ldr	r3, [pc, #644]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80054ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d844      	bhi.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80054d8:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	080054f5 	.word	0x080054f5
 80054e4:	08005505 	.word	0x08005505
 80054e8:	08005515 	.word	0x08005515
 80054ec:	0800555d 	.word	0x0800555d
 80054f0:	08005525 	.word	0x08005525
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fd03 	bl	8005f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005502:	e241      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005504:	f107 0318 	add.w	r3, r7, #24
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fa63 	bl	80059d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005512:	e239      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005514:	f107 030c 	add.w	r3, r7, #12
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fba7 	bl	8005c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005522:	e231      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005524:	4b8a      	ldr	r3, [pc, #552]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005528:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800552c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005534:	4b87      	ldr	r3, [pc, #540]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005538:	e226      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800553a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005540:	d102      	bne.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8005542:	4b85      	ldr	r3, [pc, #532]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005546:	e21f      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800554e:	d102      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8005550:	4b82      	ldr	r3, [pc, #520]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005554:	e218      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800555a:	e215      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800555c:	4b80      	ldr	r3, [pc, #512]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005560:	e212      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005566:	bf00      	nop
 8005568:	e20e      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005570:	d14f      	bne.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005572:	4b77      	ldr	r3, [pc, #476]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005576:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800557a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	2b80      	cmp	r3, #128	; 0x80
 8005580:	d01c      	beq.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005582:	2b80      	cmp	r3, #128	; 0x80
 8005584:	d804      	bhi.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d008      	beq.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d00e      	beq.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800558e:	e03c      	b.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8005590:	2bc0      	cmp	r3, #192	; 0xc0
 8005592:	d037      	beq.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005598:	d018      	beq.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800559a:	e036      	b.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800559c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fcaf 	bl	8005f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055aa:	e1ed      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055ac:	f107 0318 	add.w	r3, r7, #24
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fa0f 	bl	80059d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ba:	e1e5      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055bc:	f107 030c 	add.w	r3, r7, #12
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fb53 	bl	8005c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ca:	e1dd      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80055cc:	4b60      	ldr	r3, [pc, #384]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80055ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80055d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80055dc:	4b5d      	ldr	r3, [pc, #372]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80055e0:	e1d2      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80055e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055e8:	d102      	bne.n	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80055ea:	4b5b      	ldr	r3, [pc, #364]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80055ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ee:	e1cb      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80055f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055f6:	d102      	bne.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80055f8:	4b58      	ldr	r3, [pc, #352]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80055fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055fc:	e1c4      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005602:	e1c1      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005604:	4b56      	ldr	r3, [pc, #344]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005608:	e1be      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800560e:	bf00      	nop
 8005610:	e1ba      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005618:	d153      	bne.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800561a:	4b4d      	ldr	r3, [pc, #308]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005622:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800562a:	d01f      	beq.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800562c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005630:	d805      	bhi.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005636:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800563a:	d00f      	beq.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800563c:	e03d      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800563e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005642:	d037      	beq.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005644:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005648:	d018      	beq.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800564a:	e036      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800564c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fc57 	bl	8005f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800565a:	e195      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800565c:	f107 0318 	add.w	r3, r7, #24
 8005660:	4618      	mov	r0, r3
 8005662:	f000 f9b7 	bl	80059d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800566a:	e18d      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800566c:	f107 030c 	add.w	r3, r7, #12
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fafb 	bl	8005c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800567a:	e185      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800567c:	4b34      	ldr	r3, [pc, #208]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800567e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005680:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005684:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800568c:	4b31      	ldr	r3, [pc, #196]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005690:	e17a      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005698:	d102      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800569a:	4b2f      	ldr	r3, [pc, #188]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800569e:	e173      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80056a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056a6:	d102      	bne.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80056a8:	4b2c      	ldr	r3, [pc, #176]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056ac:	e16c      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056b2:	e169      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80056b4:	4b2a      	ldr	r3, [pc, #168]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056b8:	e166      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056be:	bf00      	nop
 80056c0:	e162      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c8:	d15d      	bne.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80056ca:	4b21      	ldr	r3, [pc, #132]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80056cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80056d2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056da:	d01f      	beq.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80056dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056e0:	d805      	bhi.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80056e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056ea:	d00f      	beq.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80056ec:	e047      	b.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80056ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056f2:	d041      	beq.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80056f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056f8:	d018      	beq.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80056fa:	e040      	b.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fbff 	bl	8005f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800570a:	e13d      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800570c:	f107 0318 	add.w	r3, r7, #24
 8005710:	4618      	mov	r0, r3
 8005712:	f000 f95f 	bl	80059d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800571a:	e135      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800571c:	f107 030c 	add.w	r3, r7, #12
 8005720:	4618      	mov	r0, r3
 8005722:	f000 faa3 	bl	8005c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800572a:	e12d      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800572c:	4b08      	ldr	r3, [pc, #32]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800572e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005734:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800573c:	4b05      	ldr	r3, [pc, #20]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005740:	e122      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005748:	d10c      	bne.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800574a:	4b03      	ldr	r3, [pc, #12]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800574c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800574e:	e11b      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005750:	58024400 	.word	0x58024400
 8005754:	03d09000 	.word	0x03d09000
 8005758:	003d0900 	.word	0x003d0900
 800575c:	007a1200 	.word	0x007a1200
 8005760:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800576a:	d102      	bne.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800576c:	4b89      	ldr	r3, [pc, #548]	; (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005770:	e10a      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005776:	e107      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005778:	4b87      	ldr	r3, [pc, #540]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800577a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800577c:	e104      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800577e:	2300      	movs	r3, #0
 8005780:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005782:	bf00      	nop
 8005784:	e100      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578c:	d153      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800578e:	4b83      	ldr	r3, [pc, #524]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005792:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005796:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579e:	d01f      	beq.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80057a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a4:	d805      	bhi.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	d00f      	beq.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80057b0:	e03d      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80057b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057b6:	d037      	beq.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80057b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057bc:	d018      	beq.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80057be:	e036      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fb9d 	bl	8005f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057ce:	e0db      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057d0:	f107 0318 	add.w	r3, r7, #24
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 f8fd 	bl	80059d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057de:	e0d3      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057e0:	f107 030c 	add.w	r3, r7, #12
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fa41 	bl	8005c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057ee:	e0cb      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80057f0:	4b6a      	ldr	r3, [pc, #424]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80057f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80057fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005800:	4b67      	ldr	r3, [pc, #412]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005804:	e0c0      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800580c:	d102      	bne.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800580e:	4b65      	ldr	r3, [pc, #404]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005810:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005812:	e0b9      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800581a:	d102      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800581c:	4b5d      	ldr	r3, [pc, #372]	; (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800581e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005820:	e0b2      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005826:	e0af      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005828:	4b5b      	ldr	r3, [pc, #364]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800582c:	e0ac      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005832:	bf00      	nop
 8005834:	e0a8      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800583c:	d13d      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800583e:	4b57      	ldr	r3, [pc, #348]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005842:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005846:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584e:	d00c      	beq.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005854:	d011      	beq.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005856:	2b00      	cmp	r3, #0
 8005858:	d12b      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800585a:	f107 0318 	add.w	r3, r7, #24
 800585e:	4618      	mov	r0, r3
 8005860:	f000 f8b8 	bl	80059d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005868:	e08e      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800586a:	f107 030c 	add.w	r3, r7, #12
 800586e:	4618      	mov	r0, r3
 8005870:	f000 f9fc 	bl	8005c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005878:	e086      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800587a:	4b48      	ldr	r3, [pc, #288]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800587c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005882:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	2b00      	cmp	r3, #0
 8005888:	d102      	bne.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800588a:	4b45      	ldr	r3, [pc, #276]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800588c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800588e:	e07b      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005896:	d102      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8005898:	4b42      	ldr	r3, [pc, #264]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800589c:	e074      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800589e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a4:	d102      	bne.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80058a6:	4b3b      	ldr	r3, [pc, #236]	; (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80058a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058aa:	e06d      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058b0:	e06a      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058b6:	bf00      	nop
 80058b8:	e066      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c0:	d11f      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80058c2:	4b36      	ldr	r3, [pc, #216]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80058c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80058d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d6:	d008      	beq.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80058d8:	e00f      	b.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fb10 	bl	8005f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058e8:	e04e      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ea:	f107 0318 	add.w	r3, r7, #24
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f870 	bl	80059d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058f8:	e046      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80058fa:	2300      	movs	r3, #0
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058fe:	bf00      	nop
 8005900:	e042      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005908:	d13c      	bne.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800590a:	4b24      	ldr	r3, [pc, #144]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800590c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005912:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800591a:	d01e      	beq.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800591c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005920:	d805      	bhi.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00d      	beq.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800592a:	d00e      	beq.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800592c:	e026      	b.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800592e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005932:	d01d      	beq.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005938:	d01d      	beq.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800593a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800593e:	d014      	beq.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8005940:	e01c      	b.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005942:	f000 f831 	bl	80059a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005946:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005948:	e01e      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800594a:	f107 0318 	add.w	r3, r7, #24
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f840 	bl	80059d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005958:	e016      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800595a:	f107 030c 	add.w	r3, r7, #12
 800595e:	4618      	mov	r0, r3
 8005960:	f000 f984 	bl	8005c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005968:	e00e      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800596a:	4b0d      	ldr	r3, [pc, #52]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800596e:	e00b      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8005970:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005974:	e008      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8005976:	4b07      	ldr	r3, [pc, #28]	; (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800597a:	e005      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005980:	bf00      	nop
 8005982:	e001      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8005984:	2300      	movs	r3, #0
 8005986:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800598a:	4618      	mov	r0, r3
 800598c:	3740      	adds	r7, #64	; 0x40
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	007a1200 	.word	0x007a1200
 8005998:	00bb8000 	.word	0x00bb8000
 800599c:	58024400 	.word	0x58024400
 80059a0:	03d09000 	.word	0x03d09000
 80059a4:	003d0900 	.word	0x003d0900

080059a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80059ac:	f7fe fe3a 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 80059b0:	4601      	mov	r1, r0
 80059b2:	4b06      	ldr	r3, [pc, #24]	; (80059cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	091b      	lsrs	r3, r3, #4
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	4a04      	ldr	r2, [pc, #16]	; (80059d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80059be:	5cd3      	ldrb	r3, [r2, r3]
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	58024400 	.word	0x58024400
 80059d0:	08008a5c 	.word	0x08008a5c

080059d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b089      	sub	sp, #36	; 0x24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059dc:	4b9d      	ldr	r3, [pc, #628]	; (8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80059e6:	4b9b      	ldr	r3, [pc, #620]	; (8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	0b1b      	lsrs	r3, r3, #12
 80059ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80059f2:	4b98      	ldr	r3, [pc, #608]	; (8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	091b      	lsrs	r3, r3, #4
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80059fe:	4b95      	ldr	r3, [pc, #596]	; (8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	08db      	lsrs	r3, r3, #3
 8005a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 810a 	beq.w	8005c36 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d05a      	beq.n	8005ade <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d302      	bcc.n	8005a32 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d078      	beq.n	8005b22 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005a30:	e099      	b.n	8005b66 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a32:	4b88      	ldr	r3, [pc, #544]	; (8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02d      	beq.n	8005a9a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a3e:	4b85      	ldr	r3, [pc, #532]	; (8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	08db      	lsrs	r3, r3, #3
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	4a83      	ldr	r2, [pc, #524]	; (8005c58 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	ee07 3a90 	vmov	s15, r3
 8005a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a68:	4b7a      	ldr	r3, [pc, #488]	; (8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a70:	ee07 3a90 	vmov	s15, r3
 8005a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a78:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a7c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005c5c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a94:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a98:	e087      	b.n	8005baa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	ee07 3a90 	vmov	s15, r3
 8005aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aac:	4b69      	ldr	r3, [pc, #420]	; (8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab4:	ee07 3a90 	vmov	s15, r3
 8005ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005abc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ac0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005c5c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005acc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005adc:	e065      	b.n	8005baa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	ee07 3a90 	vmov	s15, r3
 8005ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af0:	4b58      	ldr	r3, [pc, #352]	; (8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af8:	ee07 3a90 	vmov	s15, r3
 8005afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b00:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b04:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005c5c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b20:	e043      	b.n	8005baa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	ee07 3a90 	vmov	s15, r3
 8005b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b34:	4b47      	ldr	r3, [pc, #284]	; (8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3c:	ee07 3a90 	vmov	s15, r3
 8005b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b44:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b48:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005c5c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b64:	e021      	b.n	8005baa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	ee07 3a90 	vmov	s15, r3
 8005b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b70:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b78:	4b36      	ldr	r3, [pc, #216]	; (8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b80:	ee07 3a90 	vmov	s15, r3
 8005b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b88:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b8c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005c5c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ba8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005baa:	4b2a      	ldr	r3, [pc, #168]	; (8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	0a5b      	lsrs	r3, r3, #9
 8005bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb4:	ee07 3a90 	vmov	s15, r3
 8005bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bd0:	ee17 2a90 	vmov	r2, s15
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005bd8:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	0c1b      	lsrs	r3, r3, #16
 8005bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bfe:	ee17 2a90 	vmov	r2, s15
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005c06:	4b13      	ldr	r3, [pc, #76]	; (8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	0e1b      	lsrs	r3, r3, #24
 8005c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c10:	ee07 3a90 	vmov	s15, r3
 8005c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c2c:	ee17 2a90 	vmov	r2, s15
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005c34:	e008      	b.n	8005c48 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	609a      	str	r2, [r3, #8]
}
 8005c48:	bf00      	nop
 8005c4a:	3724      	adds	r7, #36	; 0x24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	58024400 	.word	0x58024400
 8005c58:	03d09000 	.word	0x03d09000
 8005c5c:	46000000 	.word	0x46000000
 8005c60:	4c742400 	.word	0x4c742400
 8005c64:	4a742400 	.word	0x4a742400
 8005c68:	4af42400 	.word	0x4af42400

08005c6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b089      	sub	sp, #36	; 0x24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c74:	4b9d      	ldr	r3, [pc, #628]	; (8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005c7e:	4b9b      	ldr	r3, [pc, #620]	; (8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	0d1b      	lsrs	r3, r3, #20
 8005c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c8a:	4b98      	ldr	r3, [pc, #608]	; (8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8e:	0a1b      	lsrs	r3, r3, #8
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005c96:	4b95      	ldr	r3, [pc, #596]	; (8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9a:	08db      	lsrs	r3, r3, #3
 8005c9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 810a 	beq.w	8005ece <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d05a      	beq.n	8005d76 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d302      	bcc.n	8005cca <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d078      	beq.n	8005dba <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005cc8:	e099      	b.n	8005dfe <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cca:	4b88      	ldr	r3, [pc, #544]	; (8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d02d      	beq.n	8005d32 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cd6:	4b85      	ldr	r3, [pc, #532]	; (8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	08db      	lsrs	r3, r3, #3
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	4a83      	ldr	r2, [pc, #524]	; (8005ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	ee07 3a90 	vmov	s15, r3
 8005cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d00:	4b7a      	ldr	r3, [pc, #488]	; (8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d08:	ee07 3a90 	vmov	s15, r3
 8005d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d10:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d14:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d30:	e087      	b.n	8005e42 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	ee07 3a90 	vmov	s15, r3
 8005d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d44:	4b69      	ldr	r3, [pc, #420]	; (8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4c:	ee07 3a90 	vmov	s15, r3
 8005d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d54:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d58:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005d5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d74:	e065      	b.n	8005e42 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	ee07 3a90 	vmov	s15, r3
 8005d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d80:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d88:	4b58      	ldr	r3, [pc, #352]	; (8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d90:	ee07 3a90 	vmov	s15, r3
 8005d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d98:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d9c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005da0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005da4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005db8:	e043      	b.n	8005e42 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	ee07 3a90 	vmov	s15, r3
 8005dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005f00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005dc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dcc:	4b47      	ldr	r3, [pc, #284]	; (8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd4:	ee07 3a90 	vmov	s15, r3
 8005dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ddc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005de0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005de4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dfc:	e021      	b.n	8005e42 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	ee07 3a90 	vmov	s15, r3
 8005e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e08:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005e0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e10:	4b36      	ldr	r3, [pc, #216]	; (8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e18:	ee07 3a90 	vmov	s15, r3
 8005e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e20:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e24:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005e28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e40:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005e42:	4b2a      	ldr	r3, [pc, #168]	; (8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	0a5b      	lsrs	r3, r3, #9
 8005e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e4c:	ee07 3a90 	vmov	s15, r3
 8005e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e68:	ee17 2a90 	vmov	r2, s15
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005e70:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	0c1b      	lsrs	r3, r3, #16
 8005e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e96:	ee17 2a90 	vmov	r2, s15
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005e9e:	4b13      	ldr	r3, [pc, #76]	; (8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	0e1b      	lsrs	r3, r3, #24
 8005ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea8:	ee07 3a90 	vmov	s15, r3
 8005eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ec4:	ee17 2a90 	vmov	r2, s15
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	609a      	str	r2, [r3, #8]
}
 8005ee0:	bf00      	nop
 8005ee2:	3724      	adds	r7, #36	; 0x24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	58024400 	.word	0x58024400
 8005ef0:	03d09000 	.word	0x03d09000
 8005ef4:	46000000 	.word	0x46000000
 8005ef8:	4c742400 	.word	0x4c742400
 8005efc:	4a742400 	.word	0x4a742400
 8005f00:	4af42400 	.word	0x4af42400

08005f04 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b089      	sub	sp, #36	; 0x24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f0c:	4b9d      	ldr	r3, [pc, #628]	; (8006184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005f16:	4b9b      	ldr	r3, [pc, #620]	; (8006184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1a:	091b      	lsrs	r3, r3, #4
 8005f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f20:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005f22:	4b98      	ldr	r3, [pc, #608]	; (8006184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f2c:	4b95      	ldr	r3, [pc, #596]	; (8006184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f30:	08db      	lsrs	r3, r3, #3
 8005f32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	fb02 f303 	mul.w	r3, r2, r3
 8005f3c:	ee07 3a90 	vmov	s15, r3
 8005f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f44:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 810a 	beq.w	8006164 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d05a      	beq.n	800600c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d302      	bcc.n	8005f60 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d078      	beq.n	8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8005f5e:	e099      	b.n	8006094 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f60:	4b88      	ldr	r3, [pc, #544]	; (8006184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d02d      	beq.n	8005fc8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f6c:	4b85      	ldr	r3, [pc, #532]	; (8006184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	08db      	lsrs	r3, r3, #3
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	4a84      	ldr	r2, [pc, #528]	; (8006188 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	ee07 3a90 	vmov	s15, r3
 8005f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f96:	4b7b      	ldr	r3, [pc, #492]	; (8006184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005faa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800618c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005fc6:	e087      	b.n	80060d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8005fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fda:	4b6a      	ldr	r3, [pc, #424]	; (8006184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800618c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006006:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800600a:	e065      	b.n	80060d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006016:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800601a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601e:	4b59      	ldr	r3, [pc, #356]	; (8006184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006032:	eddf 5a56 	vldr	s11, [pc, #344]	; 800618c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800604e:	e043      	b.n	80060d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	ee07 3a90 	vmov	s15, r3
 8006056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800605e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006062:	4b48      	ldr	r3, [pc, #288]	; (8006184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606a:	ee07 3a90 	vmov	s15, r3
 800606e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006072:	ed97 6a03 	vldr	s12, [r7, #12]
 8006076:	eddf 5a45 	vldr	s11, [pc, #276]	; 800618c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800607a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800608a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006092:	e021      	b.n	80060d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	ee07 3a90 	vmov	s15, r3
 800609a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80060a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a6:	4b37      	ldr	r3, [pc, #220]	; (8006184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800618c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80060be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060d6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80060d8:	4b2a      	ldr	r3, [pc, #168]	; (8006184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80060da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060dc:	0a5b      	lsrs	r3, r3, #9
 80060de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060fe:	ee17 2a90 	vmov	r2, s15
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006106:	4b1f      	ldr	r3, [pc, #124]	; (8006184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	0c1b      	lsrs	r3, r3, #16
 800610c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800611c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006120:	edd7 6a07 	vldr	s13, [r7, #28]
 8006124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800612c:	ee17 2a90 	vmov	r2, s15
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006134:	4b13      	ldr	r3, [pc, #76]	; (8006184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006138:	0e1b      	lsrs	r3, r3, #24
 800613a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800614a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800614e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800615a:	ee17 2a90 	vmov	r2, s15
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006162:	e008      	b.n	8006176 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	609a      	str	r2, [r3, #8]
}
 8006176:	bf00      	nop
 8006178:	3724      	adds	r7, #36	; 0x24
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	58024400 	.word	0x58024400
 8006188:	03d09000 	.word	0x03d09000
 800618c:	46000000 	.word	0x46000000
 8006190:	4c742400 	.word	0x4c742400
 8006194:	4a742400 	.word	0x4a742400
 8006198:	4af42400 	.word	0x4af42400

0800619c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061aa:	4b53      	ldr	r3, [pc, #332]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d101      	bne.n	80061ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e099      	b.n	80062ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061ba:	4b4f      	ldr	r3, [pc, #316]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a4e      	ldr	r2, [pc, #312]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80061c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c6:	f7fb f8f1 	bl	80013ac <HAL_GetTick>
 80061ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061cc:	e008      	b.n	80061e0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80061ce:	f7fb f8ed 	bl	80013ac <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e086      	b.n	80062ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061e0:	4b45      	ldr	r3, [pc, #276]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f0      	bne.n	80061ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061ec:	4b42      	ldr	r3, [pc, #264]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80061ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	031b      	lsls	r3, r3, #12
 80061fa:	493f      	ldr	r1, [pc, #252]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	628b      	str	r3, [r1, #40]	; 0x28
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	3b01      	subs	r3, #1
 8006206:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	3b01      	subs	r3, #1
 8006210:	025b      	lsls	r3, r3, #9
 8006212:	b29b      	uxth	r3, r3
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	3b01      	subs	r3, #1
 800621c:	041b      	lsls	r3, r3, #16
 800621e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	3b01      	subs	r3, #1
 800622a:	061b      	lsls	r3, r3, #24
 800622c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006230:	4931      	ldr	r1, [pc, #196]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006232:	4313      	orrs	r3, r2
 8006234:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006236:	4b30      	ldr	r3, [pc, #192]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	492d      	ldr	r1, [pc, #180]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006244:	4313      	orrs	r3, r2
 8006246:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006248:	4b2b      	ldr	r3, [pc, #172]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	f023 0220 	bic.w	r2, r3, #32
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	4928      	ldr	r1, [pc, #160]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006256:	4313      	orrs	r3, r2
 8006258:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800625a:	4b27      	ldr	r3, [pc, #156]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	4a26      	ldr	r2, [pc, #152]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006260:	f023 0310 	bic.w	r3, r3, #16
 8006264:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006266:	4b24      	ldr	r3, [pc, #144]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800626a:	4b24      	ldr	r3, [pc, #144]	; (80062fc <RCCEx_PLL2_Config+0x160>)
 800626c:	4013      	ands	r3, r2
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	69d2      	ldr	r2, [r2, #28]
 8006272:	00d2      	lsls	r2, r2, #3
 8006274:	4920      	ldr	r1, [pc, #128]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006276:	4313      	orrs	r3, r2
 8006278:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800627a:	4b1f      	ldr	r3, [pc, #124]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 800627c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627e:	4a1e      	ldr	r2, [pc, #120]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006280:	f043 0310 	orr.w	r3, r3, #16
 8006284:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800628c:	4b1a      	ldr	r3, [pc, #104]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	4a19      	ldr	r2, [pc, #100]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 8006292:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006296:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006298:	e00f      	b.n	80062ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d106      	bne.n	80062ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062a0:	4b15      	ldr	r3, [pc, #84]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	4a14      	ldr	r2, [pc, #80]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80062a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062ac:	e005      	b.n	80062ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062ae:	4b12      	ldr	r3, [pc, #72]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	4a11      	ldr	r2, [pc, #68]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80062b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062ba:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a0e      	ldr	r2, [pc, #56]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80062c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c6:	f7fb f871 	bl	80013ac <HAL_GetTick>
 80062ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062cc:	e008      	b.n	80062e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80062ce:	f7fb f86d 	bl	80013ac <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d901      	bls.n	80062e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e006      	b.n	80062ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062e0:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <RCCEx_PLL2_Config+0x15c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0f0      	beq.n	80062ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	58024400 	.word	0x58024400
 80062fc:	ffff0007 	.word	0xffff0007

08006300 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800630e:	4b53      	ldr	r3, [pc, #332]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	2b03      	cmp	r3, #3
 8006318:	d101      	bne.n	800631e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e099      	b.n	8006452 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800631e:	4b4f      	ldr	r3, [pc, #316]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a4e      	ldr	r2, [pc, #312]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800632a:	f7fb f83f 	bl	80013ac <HAL_GetTick>
 800632e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006330:	e008      	b.n	8006344 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006332:	f7fb f83b 	bl	80013ac <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e086      	b.n	8006452 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006344:	4b45      	ldr	r3, [pc, #276]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1f0      	bne.n	8006332 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006350:	4b42      	ldr	r3, [pc, #264]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006354:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	051b      	lsls	r3, r3, #20
 800635e:	493f      	ldr	r1, [pc, #252]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006360:	4313      	orrs	r3, r2
 8006362:	628b      	str	r3, [r1, #40]	; 0x28
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	3b01      	subs	r3, #1
 800636a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	3b01      	subs	r3, #1
 8006374:	025b      	lsls	r3, r3, #9
 8006376:	b29b      	uxth	r3, r3
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	3b01      	subs	r3, #1
 8006380:	041b      	lsls	r3, r3, #16
 8006382:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	3b01      	subs	r3, #1
 800638e:	061b      	lsls	r3, r3, #24
 8006390:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006394:	4931      	ldr	r1, [pc, #196]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006396:	4313      	orrs	r3, r2
 8006398:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800639a:	4b30      	ldr	r3, [pc, #192]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	492d      	ldr	r1, [pc, #180]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063ac:	4b2b      	ldr	r3, [pc, #172]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	4928      	ldr	r1, [pc, #160]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063be:	4b27      	ldr	r3, [pc, #156]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	4a26      	ldr	r2, [pc, #152]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063ca:	4b24      	ldr	r3, [pc, #144]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ce:	4b24      	ldr	r3, [pc, #144]	; (8006460 <RCCEx_PLL3_Config+0x160>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	69d2      	ldr	r2, [r2, #28]
 80063d6:	00d2      	lsls	r2, r2, #3
 80063d8:	4920      	ldr	r1, [pc, #128]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063de:	4b1f      	ldr	r3, [pc, #124]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e2:	4a1e      	ldr	r2, [pc, #120]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d106      	bne.n	80063fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063f0:	4b1a      	ldr	r3, [pc, #104]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	4a19      	ldr	r2, [pc, #100]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 80063f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063fc:	e00f      	b.n	800641e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d106      	bne.n	8006412 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006404:	4b15      	ldr	r3, [pc, #84]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	4a14      	ldr	r2, [pc, #80]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 800640a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800640e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006410:	e005      	b.n	800641e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	4a11      	ldr	r2, [pc, #68]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006418:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800641c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800641e:	4b0f      	ldr	r3, [pc, #60]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a0e      	ldr	r2, [pc, #56]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800642a:	f7fa ffbf 	bl	80013ac <HAL_GetTick>
 800642e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006430:	e008      	b.n	8006444 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006432:	f7fa ffbb 	bl	80013ac <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e006      	b.n	8006452 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006444:	4b05      	ldr	r3, [pc, #20]	; (800645c <RCCEx_PLL3_Config+0x15c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f0      	beq.n	8006432 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	58024400 	.word	0x58024400
 8006460:	ffff0007 	.word	0xffff0007

08006464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e042      	b.n	80064fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800647c:	2b00      	cmp	r3, #0
 800647e:	d106      	bne.n	800648e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7fa fd7d 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2224      	movs	r2, #36	; 0x24
 8006492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0201 	bic.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f8c2 	bl	8006630 <UART_SetConfig>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e022      	b.n	80064fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fe66 	bl	8007190 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0201 	orr.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 feed 	bl	80072d4 <UART_CheckIdleState>
 80064fa:	4603      	mov	r3, r0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08a      	sub	sp, #40	; 0x28
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	4613      	mov	r3, r2
 8006512:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800651a:	2b20      	cmp	r3, #32
 800651c:	f040 8083 	bne.w	8006626 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_UART_Transmit+0x28>
 8006526:	88fb      	ldrh	r3, [r7, #6]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e07b      	b.n	8006628 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006536:	2b01      	cmp	r3, #1
 8006538:	d101      	bne.n	800653e <HAL_UART_Transmit+0x3a>
 800653a:	2302      	movs	r3, #2
 800653c:	e074      	b.n	8006628 <HAL_UART_Transmit+0x124>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2221      	movs	r2, #33	; 0x21
 8006552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006556:	f7fa ff29 	bl	80013ac <HAL_GetTick>
 800655a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	88fa      	ldrh	r2, [r7, #6]
 8006560:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	88fa      	ldrh	r2, [r7, #6]
 8006568:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006574:	d108      	bne.n	8006588 <HAL_UART_Transmit+0x84>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	61bb      	str	r3, [r7, #24]
 8006586:	e003      	b.n	8006590 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800658c:	2300      	movs	r3, #0
 800658e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8006598:	e02c      	b.n	80065f4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2200      	movs	r2, #0
 80065a2:	2180      	movs	r1, #128	; 0x80
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 fedd 	bl	8007364 <UART_WaitOnFlagUntilTimeout>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e039      	b.n	8006628 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10b      	bne.n	80065d2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	3302      	adds	r3, #2
 80065ce:	61bb      	str	r3, [r7, #24]
 80065d0:	e007      	b.n	80065e2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	781a      	ldrb	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	3301      	adds	r3, #1
 80065e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1cc      	bne.n	800659a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2200      	movs	r2, #0
 8006608:	2140      	movs	r1, #64	; 0x40
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 feaa 	bl	8007364 <UART_WaitOnFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e006      	b.n	8006628 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2220      	movs	r2, #32
 800661e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	e000      	b.n	8006628 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006626:	2302      	movs	r3, #2
  }
}
 8006628:	4618      	mov	r0, r3
 800662a:	3720      	adds	r7, #32
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006630:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006634:	b08e      	sub	sp, #56	; 0x38
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	431a      	orrs	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	4313      	orrs	r3, r2
 8006656:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800665c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800665e:	4313      	orrs	r3, r2
 8006660:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	4bc1      	ldr	r3, [pc, #772]	; (8006970 <UART_SetConfig+0x340>)
 800666a:	4013      	ands	r3, r2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006672:	430b      	orrs	r3, r1
 8006674:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4ab7      	ldr	r2, [pc, #732]	; (8006974 <UART_SetConfig+0x344>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d004      	beq.n	80066a6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066a2:	4313      	orrs	r3, r2
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	4bb2      	ldr	r3, [pc, #712]	; (8006978 <UART_SetConfig+0x348>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6812      	ldr	r2, [r2, #0]
 80066b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066b6:	430b      	orrs	r3, r1
 80066b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	f023 010f 	bic.w	r1, r3, #15
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4aa9      	ldr	r2, [pc, #676]	; (800697c <UART_SetConfig+0x34c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d177      	bne.n	80067ca <UART_SetConfig+0x19a>
 80066da:	4ba9      	ldr	r3, [pc, #676]	; (8006980 <UART_SetConfig+0x350>)
 80066dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066e2:	2b28      	cmp	r3, #40	; 0x28
 80066e4:	d86c      	bhi.n	80067c0 <UART_SetConfig+0x190>
 80066e6:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <UART_SetConfig+0xbc>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	08006791 	.word	0x08006791
 80066f0:	080067c1 	.word	0x080067c1
 80066f4:	080067c1 	.word	0x080067c1
 80066f8:	080067c1 	.word	0x080067c1
 80066fc:	080067c1 	.word	0x080067c1
 8006700:	080067c1 	.word	0x080067c1
 8006704:	080067c1 	.word	0x080067c1
 8006708:	080067c1 	.word	0x080067c1
 800670c:	08006799 	.word	0x08006799
 8006710:	080067c1 	.word	0x080067c1
 8006714:	080067c1 	.word	0x080067c1
 8006718:	080067c1 	.word	0x080067c1
 800671c:	080067c1 	.word	0x080067c1
 8006720:	080067c1 	.word	0x080067c1
 8006724:	080067c1 	.word	0x080067c1
 8006728:	080067c1 	.word	0x080067c1
 800672c:	080067a1 	.word	0x080067a1
 8006730:	080067c1 	.word	0x080067c1
 8006734:	080067c1 	.word	0x080067c1
 8006738:	080067c1 	.word	0x080067c1
 800673c:	080067c1 	.word	0x080067c1
 8006740:	080067c1 	.word	0x080067c1
 8006744:	080067c1 	.word	0x080067c1
 8006748:	080067c1 	.word	0x080067c1
 800674c:	080067a9 	.word	0x080067a9
 8006750:	080067c1 	.word	0x080067c1
 8006754:	080067c1 	.word	0x080067c1
 8006758:	080067c1 	.word	0x080067c1
 800675c:	080067c1 	.word	0x080067c1
 8006760:	080067c1 	.word	0x080067c1
 8006764:	080067c1 	.word	0x080067c1
 8006768:	080067c1 	.word	0x080067c1
 800676c:	080067b1 	.word	0x080067b1
 8006770:	080067c1 	.word	0x080067c1
 8006774:	080067c1 	.word	0x080067c1
 8006778:	080067c1 	.word	0x080067c1
 800677c:	080067c1 	.word	0x080067c1
 8006780:	080067c1 	.word	0x080067c1
 8006784:	080067c1 	.word	0x080067c1
 8006788:	080067c1 	.word	0x080067c1
 800678c:	080067b9 	.word	0x080067b9
 8006790:	2301      	movs	r3, #1
 8006792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006796:	e233      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006798:	2304      	movs	r3, #4
 800679a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800679e:	e22f      	b.n	8006c00 <UART_SetConfig+0x5d0>
 80067a0:	2308      	movs	r3, #8
 80067a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067a6:	e22b      	b.n	8006c00 <UART_SetConfig+0x5d0>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ae:	e227      	b.n	8006c00 <UART_SetConfig+0x5d0>
 80067b0:	2320      	movs	r3, #32
 80067b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067b6:	e223      	b.n	8006c00 <UART_SetConfig+0x5d0>
 80067b8:	2340      	movs	r3, #64	; 0x40
 80067ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067be:	e21f      	b.n	8006c00 <UART_SetConfig+0x5d0>
 80067c0:	2380      	movs	r3, #128	; 0x80
 80067c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067c6:	bf00      	nop
 80067c8:	e21a      	b.n	8006c00 <UART_SetConfig+0x5d0>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a6d      	ldr	r2, [pc, #436]	; (8006984 <UART_SetConfig+0x354>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d132      	bne.n	800683a <UART_SetConfig+0x20a>
 80067d4:	4b6a      	ldr	r3, [pc, #424]	; (8006980 <UART_SetConfig+0x350>)
 80067d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	2b05      	cmp	r3, #5
 80067de:	d827      	bhi.n	8006830 <UART_SetConfig+0x200>
 80067e0:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <UART_SetConfig+0x1b8>)
 80067e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e6:	bf00      	nop
 80067e8:	08006801 	.word	0x08006801
 80067ec:	08006809 	.word	0x08006809
 80067f0:	08006811 	.word	0x08006811
 80067f4:	08006819 	.word	0x08006819
 80067f8:	08006821 	.word	0x08006821
 80067fc:	08006829 	.word	0x08006829
 8006800:	2300      	movs	r3, #0
 8006802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006806:	e1fb      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006808:	2304      	movs	r3, #4
 800680a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800680e:	e1f7      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006810:	2308      	movs	r3, #8
 8006812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006816:	e1f3      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006818:	2310      	movs	r3, #16
 800681a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800681e:	e1ef      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006820:	2320      	movs	r3, #32
 8006822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006826:	e1eb      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006828:	2340      	movs	r3, #64	; 0x40
 800682a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800682e:	e1e7      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006830:	2380      	movs	r3, #128	; 0x80
 8006832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006836:	bf00      	nop
 8006838:	e1e2      	b.n	8006c00 <UART_SetConfig+0x5d0>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a52      	ldr	r2, [pc, #328]	; (8006988 <UART_SetConfig+0x358>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d132      	bne.n	80068aa <UART_SetConfig+0x27a>
 8006844:	4b4e      	ldr	r3, [pc, #312]	; (8006980 <UART_SetConfig+0x350>)
 8006846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	2b05      	cmp	r3, #5
 800684e:	d827      	bhi.n	80068a0 <UART_SetConfig+0x270>
 8006850:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <UART_SetConfig+0x228>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	08006871 	.word	0x08006871
 800685c:	08006879 	.word	0x08006879
 8006860:	08006881 	.word	0x08006881
 8006864:	08006889 	.word	0x08006889
 8006868:	08006891 	.word	0x08006891
 800686c:	08006899 	.word	0x08006899
 8006870:	2300      	movs	r3, #0
 8006872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006876:	e1c3      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006878:	2304      	movs	r3, #4
 800687a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800687e:	e1bf      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006880:	2308      	movs	r3, #8
 8006882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006886:	e1bb      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006888:	2310      	movs	r3, #16
 800688a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800688e:	e1b7      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006890:	2320      	movs	r3, #32
 8006892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006896:	e1b3      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006898:	2340      	movs	r3, #64	; 0x40
 800689a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800689e:	e1af      	b.n	8006c00 <UART_SetConfig+0x5d0>
 80068a0:	2380      	movs	r3, #128	; 0x80
 80068a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a6:	bf00      	nop
 80068a8:	e1aa      	b.n	8006c00 <UART_SetConfig+0x5d0>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a37      	ldr	r2, [pc, #220]	; (800698c <UART_SetConfig+0x35c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d132      	bne.n	800691a <UART_SetConfig+0x2ea>
 80068b4:	4b32      	ldr	r3, [pc, #200]	; (8006980 <UART_SetConfig+0x350>)
 80068b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b8:	f003 0307 	and.w	r3, r3, #7
 80068bc:	2b05      	cmp	r3, #5
 80068be:	d827      	bhi.n	8006910 <UART_SetConfig+0x2e0>
 80068c0:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <UART_SetConfig+0x298>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	080068e1 	.word	0x080068e1
 80068cc:	080068e9 	.word	0x080068e9
 80068d0:	080068f1 	.word	0x080068f1
 80068d4:	080068f9 	.word	0x080068f9
 80068d8:	08006901 	.word	0x08006901
 80068dc:	08006909 	.word	0x08006909
 80068e0:	2300      	movs	r3, #0
 80068e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068e6:	e18b      	b.n	8006c00 <UART_SetConfig+0x5d0>
 80068e8:	2304      	movs	r3, #4
 80068ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ee:	e187      	b.n	8006c00 <UART_SetConfig+0x5d0>
 80068f0:	2308      	movs	r3, #8
 80068f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068f6:	e183      	b.n	8006c00 <UART_SetConfig+0x5d0>
 80068f8:	2310      	movs	r3, #16
 80068fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068fe:	e17f      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006900:	2320      	movs	r3, #32
 8006902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006906:	e17b      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006908:	2340      	movs	r3, #64	; 0x40
 800690a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800690e:	e177      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006910:	2380      	movs	r3, #128	; 0x80
 8006912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006916:	bf00      	nop
 8006918:	e172      	b.n	8006c00 <UART_SetConfig+0x5d0>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a1c      	ldr	r2, [pc, #112]	; (8006990 <UART_SetConfig+0x360>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d144      	bne.n	80069ae <UART_SetConfig+0x37e>
 8006924:	4b16      	ldr	r3, [pc, #88]	; (8006980 <UART_SetConfig+0x350>)
 8006926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	2b05      	cmp	r3, #5
 800692e:	d839      	bhi.n	80069a4 <UART_SetConfig+0x374>
 8006930:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <UART_SetConfig+0x308>)
 8006932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006936:	bf00      	nop
 8006938:	08006951 	.word	0x08006951
 800693c:	08006959 	.word	0x08006959
 8006940:	08006961 	.word	0x08006961
 8006944:	08006969 	.word	0x08006969
 8006948:	08006995 	.word	0x08006995
 800694c:	0800699d 	.word	0x0800699d
 8006950:	2300      	movs	r3, #0
 8006952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006956:	e153      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006958:	2304      	movs	r3, #4
 800695a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800695e:	e14f      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006960:	2308      	movs	r3, #8
 8006962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006966:	e14b      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006968:	2310      	movs	r3, #16
 800696a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800696e:	e147      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006970:	cfff69f3 	.word	0xcfff69f3
 8006974:	58000c00 	.word	0x58000c00
 8006978:	11fff4ff 	.word	0x11fff4ff
 800697c:	40011000 	.word	0x40011000
 8006980:	58024400 	.word	0x58024400
 8006984:	40004400 	.word	0x40004400
 8006988:	40004800 	.word	0x40004800
 800698c:	40004c00 	.word	0x40004c00
 8006990:	40005000 	.word	0x40005000
 8006994:	2320      	movs	r3, #32
 8006996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800699a:	e131      	b.n	8006c00 <UART_SetConfig+0x5d0>
 800699c:	2340      	movs	r3, #64	; 0x40
 800699e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069a2:	e12d      	b.n	8006c00 <UART_SetConfig+0x5d0>
 80069a4:	2380      	movs	r3, #128	; 0x80
 80069a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069aa:	bf00      	nop
 80069ac:	e128      	b.n	8006c00 <UART_SetConfig+0x5d0>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4ab6      	ldr	r2, [pc, #728]	; (8006c8c <UART_SetConfig+0x65c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d178      	bne.n	8006aaa <UART_SetConfig+0x47a>
 80069b8:	4bb5      	ldr	r3, [pc, #724]	; (8006c90 <UART_SetConfig+0x660>)
 80069ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069c0:	2b28      	cmp	r3, #40	; 0x28
 80069c2:	d86d      	bhi.n	8006aa0 <UART_SetConfig+0x470>
 80069c4:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <UART_SetConfig+0x39c>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	08006a71 	.word	0x08006a71
 80069d0:	08006aa1 	.word	0x08006aa1
 80069d4:	08006aa1 	.word	0x08006aa1
 80069d8:	08006aa1 	.word	0x08006aa1
 80069dc:	08006aa1 	.word	0x08006aa1
 80069e0:	08006aa1 	.word	0x08006aa1
 80069e4:	08006aa1 	.word	0x08006aa1
 80069e8:	08006aa1 	.word	0x08006aa1
 80069ec:	08006a79 	.word	0x08006a79
 80069f0:	08006aa1 	.word	0x08006aa1
 80069f4:	08006aa1 	.word	0x08006aa1
 80069f8:	08006aa1 	.word	0x08006aa1
 80069fc:	08006aa1 	.word	0x08006aa1
 8006a00:	08006aa1 	.word	0x08006aa1
 8006a04:	08006aa1 	.word	0x08006aa1
 8006a08:	08006aa1 	.word	0x08006aa1
 8006a0c:	08006a81 	.word	0x08006a81
 8006a10:	08006aa1 	.word	0x08006aa1
 8006a14:	08006aa1 	.word	0x08006aa1
 8006a18:	08006aa1 	.word	0x08006aa1
 8006a1c:	08006aa1 	.word	0x08006aa1
 8006a20:	08006aa1 	.word	0x08006aa1
 8006a24:	08006aa1 	.word	0x08006aa1
 8006a28:	08006aa1 	.word	0x08006aa1
 8006a2c:	08006a89 	.word	0x08006a89
 8006a30:	08006aa1 	.word	0x08006aa1
 8006a34:	08006aa1 	.word	0x08006aa1
 8006a38:	08006aa1 	.word	0x08006aa1
 8006a3c:	08006aa1 	.word	0x08006aa1
 8006a40:	08006aa1 	.word	0x08006aa1
 8006a44:	08006aa1 	.word	0x08006aa1
 8006a48:	08006aa1 	.word	0x08006aa1
 8006a4c:	08006a91 	.word	0x08006a91
 8006a50:	08006aa1 	.word	0x08006aa1
 8006a54:	08006aa1 	.word	0x08006aa1
 8006a58:	08006aa1 	.word	0x08006aa1
 8006a5c:	08006aa1 	.word	0x08006aa1
 8006a60:	08006aa1 	.word	0x08006aa1
 8006a64:	08006aa1 	.word	0x08006aa1
 8006a68:	08006aa1 	.word	0x08006aa1
 8006a6c:	08006a99 	.word	0x08006a99
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a76:	e0c3      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006a78:	2304      	movs	r3, #4
 8006a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a7e:	e0bf      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006a80:	2308      	movs	r3, #8
 8006a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a86:	e0bb      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006a88:	2310      	movs	r3, #16
 8006a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a8e:	e0b7      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006a90:	2320      	movs	r3, #32
 8006a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a96:	e0b3      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006a98:	2340      	movs	r3, #64	; 0x40
 8006a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a9e:	e0af      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006aa0:	2380      	movs	r3, #128	; 0x80
 8006aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aa6:	bf00      	nop
 8006aa8:	e0aa      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a79      	ldr	r2, [pc, #484]	; (8006c94 <UART_SetConfig+0x664>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d132      	bne.n	8006b1a <UART_SetConfig+0x4ea>
 8006ab4:	4b76      	ldr	r3, [pc, #472]	; (8006c90 <UART_SetConfig+0x660>)
 8006ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	2b05      	cmp	r3, #5
 8006abe:	d827      	bhi.n	8006b10 <UART_SetConfig+0x4e0>
 8006ac0:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <UART_SetConfig+0x498>)
 8006ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac6:	bf00      	nop
 8006ac8:	08006ae1 	.word	0x08006ae1
 8006acc:	08006ae9 	.word	0x08006ae9
 8006ad0:	08006af1 	.word	0x08006af1
 8006ad4:	08006af9 	.word	0x08006af9
 8006ad8:	08006b01 	.word	0x08006b01
 8006adc:	08006b09 	.word	0x08006b09
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ae6:	e08b      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006ae8:	2304      	movs	r3, #4
 8006aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aee:	e087      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006af0:	2308      	movs	r3, #8
 8006af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006af6:	e083      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006af8:	2310      	movs	r3, #16
 8006afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006afe:	e07f      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006b00:	2320      	movs	r3, #32
 8006b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b06:	e07b      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006b08:	2340      	movs	r3, #64	; 0x40
 8006b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b0e:	e077      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006b10:	2380      	movs	r3, #128	; 0x80
 8006b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b16:	bf00      	nop
 8006b18:	e072      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a5e      	ldr	r2, [pc, #376]	; (8006c98 <UART_SetConfig+0x668>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d132      	bne.n	8006b8a <UART_SetConfig+0x55a>
 8006b24:	4b5a      	ldr	r3, [pc, #360]	; (8006c90 <UART_SetConfig+0x660>)
 8006b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	2b05      	cmp	r3, #5
 8006b2e:	d827      	bhi.n	8006b80 <UART_SetConfig+0x550>
 8006b30:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <UART_SetConfig+0x508>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b51 	.word	0x08006b51
 8006b3c:	08006b59 	.word	0x08006b59
 8006b40:	08006b61 	.word	0x08006b61
 8006b44:	08006b69 	.word	0x08006b69
 8006b48:	08006b71 	.word	0x08006b71
 8006b4c:	08006b79 	.word	0x08006b79
 8006b50:	2300      	movs	r3, #0
 8006b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b56:	e053      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b5e:	e04f      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006b60:	2308      	movs	r3, #8
 8006b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b66:	e04b      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006b68:	2310      	movs	r3, #16
 8006b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b6e:	e047      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006b70:	2320      	movs	r3, #32
 8006b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b76:	e043      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006b78:	2340      	movs	r3, #64	; 0x40
 8006b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b7e:	e03f      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006b80:	2380      	movs	r3, #128	; 0x80
 8006b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b86:	bf00      	nop
 8006b88:	e03a      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a43      	ldr	r2, [pc, #268]	; (8006c9c <UART_SetConfig+0x66c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d132      	bne.n	8006bfa <UART_SetConfig+0x5ca>
 8006b94:	4b3e      	ldr	r3, [pc, #248]	; (8006c90 <UART_SetConfig+0x660>)
 8006b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	2b05      	cmp	r3, #5
 8006b9e:	d827      	bhi.n	8006bf0 <UART_SetConfig+0x5c0>
 8006ba0:	a201      	add	r2, pc, #4	; (adr r2, 8006ba8 <UART_SetConfig+0x578>)
 8006ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba6:	bf00      	nop
 8006ba8:	08006bc1 	.word	0x08006bc1
 8006bac:	08006bc9 	.word	0x08006bc9
 8006bb0:	08006bd1 	.word	0x08006bd1
 8006bb4:	08006bd9 	.word	0x08006bd9
 8006bb8:	08006be1 	.word	0x08006be1
 8006bbc:	08006be9 	.word	0x08006be9
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bc6:	e01b      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006bc8:	2304      	movs	r3, #4
 8006bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bce:	e017      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006bd0:	2308      	movs	r3, #8
 8006bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bd6:	e013      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006bd8:	2310      	movs	r3, #16
 8006bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bde:	e00f      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006be0:	2320      	movs	r3, #32
 8006be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006be6:	e00b      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006be8:	2340      	movs	r3, #64	; 0x40
 8006bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bee:	e007      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006bf0:	2380      	movs	r3, #128	; 0x80
 8006bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bf6:	bf00      	nop
 8006bf8:	e002      	b.n	8006c00 <UART_SetConfig+0x5d0>
 8006bfa:	2380      	movs	r3, #128	; 0x80
 8006bfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a25      	ldr	r2, [pc, #148]	; (8006c9c <UART_SetConfig+0x66c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	f040 80b8 	bne.w	8006d7c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d019      	beq.n	8006c48 <UART_SetConfig+0x618>
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	dc04      	bgt.n	8006c22 <UART_SetConfig+0x5f2>
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d009      	beq.n	8006c30 <UART_SetConfig+0x600>
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d00b      	beq.n	8006c38 <UART_SetConfig+0x608>
 8006c20:	e042      	b.n	8006ca8 <UART_SetConfig+0x678>
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d02b      	beq.n	8006c7e <UART_SetConfig+0x64e>
 8006c26:	2b40      	cmp	r3, #64	; 0x40
 8006c28:	d02c      	beq.n	8006c84 <UART_SetConfig+0x654>
 8006c2a:	2b10      	cmp	r3, #16
 8006c2c:	d014      	beq.n	8006c58 <UART_SetConfig+0x628>
 8006c2e:	e03b      	b.n	8006ca8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006c30:	f7fe feba 	bl	80059a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006c34:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006c36:	e03d      	b.n	8006cb4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c38:	f107 0314 	add.w	r3, r7, #20
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe fec9 	bl	80059d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c46:	e035      	b.n	8006cb4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c48:	f107 0308 	add.w	r3, r7, #8
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff f80d 	bl	8005c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c56:	e02d      	b.n	8006cb4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c58:	4b0d      	ldr	r3, [pc, #52]	; (8006c90 <UART_SetConfig+0x660>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0320 	and.w	r3, r3, #32
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d009      	beq.n	8006c78 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c64:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <UART_SetConfig+0x660>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	08db      	lsrs	r3, r3, #3
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	4a0c      	ldr	r2, [pc, #48]	; (8006ca0 <UART_SetConfig+0x670>)
 8006c70:	fa22 f303 	lsr.w	r3, r2, r3
 8006c74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c76:	e01d      	b.n	8006cb4 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8006c78:	4b09      	ldr	r3, [pc, #36]	; (8006ca0 <UART_SetConfig+0x670>)
 8006c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c7c:	e01a      	b.n	8006cb4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c7e:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <UART_SetConfig+0x674>)
 8006c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c82:	e017      	b.n	8006cb4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c8a:	e013      	b.n	8006cb4 <UART_SetConfig+0x684>
 8006c8c:	40011400 	.word	0x40011400
 8006c90:	58024400 	.word	0x58024400
 8006c94:	40007800 	.word	0x40007800
 8006c98:	40007c00 	.word	0x40007c00
 8006c9c:	58000c00 	.word	0x58000c00
 8006ca0:	03d09000 	.word	0x03d09000
 8006ca4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006cb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 824d 	beq.w	8007156 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	4aad      	ldr	r2, [pc, #692]	; (8006f78 <UART_SetConfig+0x948>)
 8006cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cce:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	4413      	add	r3, r2
 8006cda:	6a3a      	ldr	r2, [r7, #32]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d305      	bcc.n	8006cec <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ce6:	6a3a      	ldr	r2, [r7, #32]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d903      	bls.n	8006cf4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006cf2:	e230      	b.n	8007156 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f04f 0100 	mov.w	r1, #0
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	4a9d      	ldr	r2, [pc, #628]	; (8006f78 <UART_SetConfig+0x948>)
 8006d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f04f 0400 	mov.w	r4, #0
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	4623      	mov	r3, r4
 8006d10:	f7f9 fb36 	bl	8000380 <__aeabi_uldivmod>
 8006d14:	4603      	mov	r3, r0
 8006d16:	460c      	mov	r4, r1
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4622      	mov	r2, r4
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	f04f 0400 	mov.w	r4, #0
 8006d24:	0214      	lsls	r4, r2, #8
 8006d26:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006d2a:	020b      	lsls	r3, r1, #8
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6852      	ldr	r2, [r2, #4]
 8006d30:	0852      	lsrs	r2, r2, #1
 8006d32:	4611      	mov	r1, r2
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	eb13 0b01 	adds.w	fp, r3, r1
 8006d3c:	eb44 0c02 	adc.w	ip, r4, r2
 8006d40:	4658      	mov	r0, fp
 8006d42:	4661      	mov	r1, ip
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f04f 0400 	mov.w	r4, #0
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	4623      	mov	r3, r4
 8006d50:	f7f9 fb16 	bl	8000380 <__aeabi_uldivmod>
 8006d54:	4603      	mov	r3, r0
 8006d56:	460c      	mov	r4, r1
 8006d58:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d60:	d308      	bcc.n	8006d74 <UART_SetConfig+0x744>
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d68:	d204      	bcs.n	8006d74 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d70:	60da      	str	r2, [r3, #12]
 8006d72:	e1f0      	b.n	8007156 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006d7a:	e1ec      	b.n	8007156 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d84:	f040 8100 	bne.w	8006f88 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8006d88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d8c:	2b40      	cmp	r3, #64	; 0x40
 8006d8e:	f200 80b7 	bhi.w	8006f00 <UART_SetConfig+0x8d0>
 8006d92:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <UART_SetConfig+0x768>)
 8006d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d98:	08006e9d 	.word	0x08006e9d
 8006d9c:	08006ea5 	.word	0x08006ea5
 8006da0:	08006f01 	.word	0x08006f01
 8006da4:	08006f01 	.word	0x08006f01
 8006da8:	08006ead 	.word	0x08006ead
 8006dac:	08006f01 	.word	0x08006f01
 8006db0:	08006f01 	.word	0x08006f01
 8006db4:	08006f01 	.word	0x08006f01
 8006db8:	08006ebd 	.word	0x08006ebd
 8006dbc:	08006f01 	.word	0x08006f01
 8006dc0:	08006f01 	.word	0x08006f01
 8006dc4:	08006f01 	.word	0x08006f01
 8006dc8:	08006f01 	.word	0x08006f01
 8006dcc:	08006f01 	.word	0x08006f01
 8006dd0:	08006f01 	.word	0x08006f01
 8006dd4:	08006f01 	.word	0x08006f01
 8006dd8:	08006ecd 	.word	0x08006ecd
 8006ddc:	08006f01 	.word	0x08006f01
 8006de0:	08006f01 	.word	0x08006f01
 8006de4:	08006f01 	.word	0x08006f01
 8006de8:	08006f01 	.word	0x08006f01
 8006dec:	08006f01 	.word	0x08006f01
 8006df0:	08006f01 	.word	0x08006f01
 8006df4:	08006f01 	.word	0x08006f01
 8006df8:	08006f01 	.word	0x08006f01
 8006dfc:	08006f01 	.word	0x08006f01
 8006e00:	08006f01 	.word	0x08006f01
 8006e04:	08006f01 	.word	0x08006f01
 8006e08:	08006f01 	.word	0x08006f01
 8006e0c:	08006f01 	.word	0x08006f01
 8006e10:	08006f01 	.word	0x08006f01
 8006e14:	08006f01 	.word	0x08006f01
 8006e18:	08006ef3 	.word	0x08006ef3
 8006e1c:	08006f01 	.word	0x08006f01
 8006e20:	08006f01 	.word	0x08006f01
 8006e24:	08006f01 	.word	0x08006f01
 8006e28:	08006f01 	.word	0x08006f01
 8006e2c:	08006f01 	.word	0x08006f01
 8006e30:	08006f01 	.word	0x08006f01
 8006e34:	08006f01 	.word	0x08006f01
 8006e38:	08006f01 	.word	0x08006f01
 8006e3c:	08006f01 	.word	0x08006f01
 8006e40:	08006f01 	.word	0x08006f01
 8006e44:	08006f01 	.word	0x08006f01
 8006e48:	08006f01 	.word	0x08006f01
 8006e4c:	08006f01 	.word	0x08006f01
 8006e50:	08006f01 	.word	0x08006f01
 8006e54:	08006f01 	.word	0x08006f01
 8006e58:	08006f01 	.word	0x08006f01
 8006e5c:	08006f01 	.word	0x08006f01
 8006e60:	08006f01 	.word	0x08006f01
 8006e64:	08006f01 	.word	0x08006f01
 8006e68:	08006f01 	.word	0x08006f01
 8006e6c:	08006f01 	.word	0x08006f01
 8006e70:	08006f01 	.word	0x08006f01
 8006e74:	08006f01 	.word	0x08006f01
 8006e78:	08006f01 	.word	0x08006f01
 8006e7c:	08006f01 	.word	0x08006f01
 8006e80:	08006f01 	.word	0x08006f01
 8006e84:	08006f01 	.word	0x08006f01
 8006e88:	08006f01 	.word	0x08006f01
 8006e8c:	08006f01 	.word	0x08006f01
 8006e90:	08006f01 	.word	0x08006f01
 8006e94:	08006f01 	.word	0x08006f01
 8006e98:	08006ef9 	.word	0x08006ef9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e9c:	f7fd fbf2 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8006ea0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006ea2:	e033      	b.n	8006f0c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea4:	f7fd fc04 	bl	80046b0 <HAL_RCC_GetPCLK2Freq>
 8006ea8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006eaa:	e02f      	b.n	8006f0c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eac:	f107 0314 	add.w	r3, r7, #20
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fe fd8f 	bl	80059d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006eba:	e027      	b.n	8006f0c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ebc:	f107 0308 	add.w	r3, r7, #8
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fe fed3 	bl	8005c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006eca:	e01f      	b.n	8006f0c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ecc:	4b2b      	ldr	r3, [pc, #172]	; (8006f7c <UART_SetConfig+0x94c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0320 	and.w	r3, r3, #32
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d009      	beq.n	8006eec <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ed8:	4b28      	ldr	r3, [pc, #160]	; (8006f7c <UART_SetConfig+0x94c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	08db      	lsrs	r3, r3, #3
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	4a27      	ldr	r2, [pc, #156]	; (8006f80 <UART_SetConfig+0x950>)
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006eea:	e00f      	b.n	8006f0c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8006eec:	4b24      	ldr	r3, [pc, #144]	; (8006f80 <UART_SetConfig+0x950>)
 8006eee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ef0:	e00c      	b.n	8006f0c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ef2:	4b24      	ldr	r3, [pc, #144]	; (8006f84 <UART_SetConfig+0x954>)
 8006ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ef6:	e009      	b.n	8006f0c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006efe:	e005      	b.n	8006f0c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006f0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 8121 	beq.w	8007156 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	4a17      	ldr	r2, [pc, #92]	; (8006f78 <UART_SetConfig+0x948>)
 8006f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f22:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f26:	005a      	lsls	r2, r3, #1
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	085b      	lsrs	r3, r3, #1
 8006f2e:	441a      	add	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3e:	2b0f      	cmp	r3, #15
 8006f40:	d916      	bls.n	8006f70 <UART_SetConfig+0x940>
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f48:	d212      	bcs.n	8006f70 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f023 030f 	bic.w	r3, r3, #15
 8006f52:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	085b      	lsrs	r3, r3, #1
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f62:	4313      	orrs	r3, r2
 8006f64:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006f6c:	60da      	str	r2, [r3, #12]
 8006f6e:	e0f2      	b.n	8007156 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006f76:	e0ee      	b.n	8007156 <UART_SetConfig+0xb26>
 8006f78:	08008a6c 	.word	0x08008a6c
 8006f7c:	58024400 	.word	0x58024400
 8006f80:	03d09000 	.word	0x03d09000
 8006f84:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f8c:	2b40      	cmp	r3, #64	; 0x40
 8006f8e:	f200 80b7 	bhi.w	8007100 <UART_SetConfig+0xad0>
 8006f92:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <UART_SetConfig+0x968>)
 8006f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f98:	0800709d 	.word	0x0800709d
 8006f9c:	080070a5 	.word	0x080070a5
 8006fa0:	08007101 	.word	0x08007101
 8006fa4:	08007101 	.word	0x08007101
 8006fa8:	080070ad 	.word	0x080070ad
 8006fac:	08007101 	.word	0x08007101
 8006fb0:	08007101 	.word	0x08007101
 8006fb4:	08007101 	.word	0x08007101
 8006fb8:	080070bd 	.word	0x080070bd
 8006fbc:	08007101 	.word	0x08007101
 8006fc0:	08007101 	.word	0x08007101
 8006fc4:	08007101 	.word	0x08007101
 8006fc8:	08007101 	.word	0x08007101
 8006fcc:	08007101 	.word	0x08007101
 8006fd0:	08007101 	.word	0x08007101
 8006fd4:	08007101 	.word	0x08007101
 8006fd8:	080070cd 	.word	0x080070cd
 8006fdc:	08007101 	.word	0x08007101
 8006fe0:	08007101 	.word	0x08007101
 8006fe4:	08007101 	.word	0x08007101
 8006fe8:	08007101 	.word	0x08007101
 8006fec:	08007101 	.word	0x08007101
 8006ff0:	08007101 	.word	0x08007101
 8006ff4:	08007101 	.word	0x08007101
 8006ff8:	08007101 	.word	0x08007101
 8006ffc:	08007101 	.word	0x08007101
 8007000:	08007101 	.word	0x08007101
 8007004:	08007101 	.word	0x08007101
 8007008:	08007101 	.word	0x08007101
 800700c:	08007101 	.word	0x08007101
 8007010:	08007101 	.word	0x08007101
 8007014:	08007101 	.word	0x08007101
 8007018:	080070f3 	.word	0x080070f3
 800701c:	08007101 	.word	0x08007101
 8007020:	08007101 	.word	0x08007101
 8007024:	08007101 	.word	0x08007101
 8007028:	08007101 	.word	0x08007101
 800702c:	08007101 	.word	0x08007101
 8007030:	08007101 	.word	0x08007101
 8007034:	08007101 	.word	0x08007101
 8007038:	08007101 	.word	0x08007101
 800703c:	08007101 	.word	0x08007101
 8007040:	08007101 	.word	0x08007101
 8007044:	08007101 	.word	0x08007101
 8007048:	08007101 	.word	0x08007101
 800704c:	08007101 	.word	0x08007101
 8007050:	08007101 	.word	0x08007101
 8007054:	08007101 	.word	0x08007101
 8007058:	08007101 	.word	0x08007101
 800705c:	08007101 	.word	0x08007101
 8007060:	08007101 	.word	0x08007101
 8007064:	08007101 	.word	0x08007101
 8007068:	08007101 	.word	0x08007101
 800706c:	08007101 	.word	0x08007101
 8007070:	08007101 	.word	0x08007101
 8007074:	08007101 	.word	0x08007101
 8007078:	08007101 	.word	0x08007101
 800707c:	08007101 	.word	0x08007101
 8007080:	08007101 	.word	0x08007101
 8007084:	08007101 	.word	0x08007101
 8007088:	08007101 	.word	0x08007101
 800708c:	08007101 	.word	0x08007101
 8007090:	08007101 	.word	0x08007101
 8007094:	08007101 	.word	0x08007101
 8007098:	080070f9 	.word	0x080070f9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800709c:	f7fd faf2 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 80070a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80070a2:	e033      	b.n	800710c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070a4:	f7fd fb04 	bl	80046b0 <HAL_RCC_GetPCLK2Freq>
 80070a8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80070aa:	e02f      	b.n	800710c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ac:	f107 0314 	add.w	r3, r7, #20
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe fc8f 	bl	80059d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070ba:	e027      	b.n	800710c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070bc:	f107 0308 	add.w	r3, r7, #8
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe fdd3 	bl	8005c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070ca:	e01f      	b.n	800710c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070cc:	4b2c      	ldr	r3, [pc, #176]	; (8007180 <UART_SetConfig+0xb50>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d009      	beq.n	80070ec <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070d8:	4b29      	ldr	r3, [pc, #164]	; (8007180 <UART_SetConfig+0xb50>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	08db      	lsrs	r3, r3, #3
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	4a28      	ldr	r2, [pc, #160]	; (8007184 <UART_SetConfig+0xb54>)
 80070e4:	fa22 f303 	lsr.w	r3, r2, r3
 80070e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070ea:	e00f      	b.n	800710c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80070ec:	4b25      	ldr	r3, [pc, #148]	; (8007184 <UART_SetConfig+0xb54>)
 80070ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070f0:	e00c      	b.n	800710c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070f2:	4b25      	ldr	r3, [pc, #148]	; (8007188 <UART_SetConfig+0xb58>)
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070f6:	e009      	b.n	800710c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070fe:	e005      	b.n	800710c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800710a:	bf00      	nop
    }

    if (pclk != 0U)
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d021      	beq.n	8007156 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	4a1d      	ldr	r2, [pc, #116]	; (800718c <UART_SetConfig+0xb5c>)
 8007118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800711c:	461a      	mov	r2, r3
 800711e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007120:	fbb3 f2f2 	udiv	r2, r3, r2
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	085b      	lsrs	r3, r3, #1
 800712a:	441a      	add	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	fbb2 f3f3 	udiv	r3, r2, r3
 8007134:	b29b      	uxth	r3, r3
 8007136:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	2b0f      	cmp	r3, #15
 800713c:	d908      	bls.n	8007150 <UART_SetConfig+0xb20>
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007144:	d204      	bcs.n	8007150 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800714c:	60da      	str	r2, [r3, #12]
 800714e:	e002      	b.n	8007156 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007172:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007176:	4618      	mov	r0, r3
 8007178:	3738      	adds	r7, #56	; 0x38
 800717a:	46bd      	mov	sp, r7
 800717c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007180:	58024400 	.word	0x58024400
 8007184:	03d09000 	.word	0x03d09000
 8007188:	003d0900 	.word	0x003d0900
 800718c:	08008a6c 	.word	0x08008a6c

08007190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00a      	beq.n	80071ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00a      	beq.n	80071dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00a      	beq.n	80071fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01a      	beq.n	80072a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800728e:	d10a      	bne.n	80072a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	605a      	str	r2, [r3, #4]
  }
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af02      	add	r7, sp, #8
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80072e4:	f7fa f862 	bl	80013ac <HAL_GetTick>
 80072e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0308 	and.w	r3, r3, #8
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d10e      	bne.n	8007316 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f82c 	bl	8007364 <UART_WaitOnFlagUntilTimeout>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e022      	b.n	800735c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0304 	and.w	r3, r3, #4
 8007320:	2b04      	cmp	r3, #4
 8007322:	d10e      	bne.n	8007342 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007324:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f816 	bl	8007364 <UART_WaitOnFlagUntilTimeout>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e00c      	b.n	800735c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2220      	movs	r2, #32
 800734e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	4613      	mov	r3, r2
 8007372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007374:	e062      	b.n	800743c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d05e      	beq.n	800743c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800737e:	f7fa f815 	bl	80013ac <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	429a      	cmp	r2, r3
 800738c:	d302      	bcc.n	8007394 <UART_WaitOnFlagUntilTimeout+0x30>
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d11d      	bne.n	80073d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073a2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0201 	bic.w	r2, r2, #1
 80073b2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2220      	movs	r2, #32
 80073c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e045      	b.n	800745c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d02e      	beq.n	800743c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ec:	d126      	bne.n	800743c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073f6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007406:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 0201 	bic.w	r2, r2, #1
 8007416:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2220      	movs	r2, #32
 800741c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2220      	movs	r2, #32
 8007424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2220      	movs	r2, #32
 800742c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e00f      	b.n	800745c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69da      	ldr	r2, [r3, #28]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	4013      	ands	r3, r2
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	429a      	cmp	r2, r3
 800744a:	bf0c      	ite	eq
 800744c:	2301      	moveq	r3, #1
 800744e:	2300      	movne	r3, #0
 8007450:	b2db      	uxtb	r3, r3
 8007452:	461a      	mov	r2, r3
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	429a      	cmp	r2, r3
 8007458:	d08d      	beq.n	8007376 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_UARTEx_DisableFifoMode+0x16>
 8007476:	2302      	movs	r3, #2
 8007478:	e027      	b.n	80074ca <HAL_UARTEx_DisableFifoMode+0x66>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2224      	movs	r2, #36	; 0x24
 8007486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0201 	bic.w	r2, r2, #1
 80074a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e02d      	b.n	800754a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2224      	movs	r2, #36	; 0x24
 80074fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0201 	bic.w	r2, r2, #1
 8007514:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f850 	bl	80075d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007562:	2b01      	cmp	r3, #1
 8007564:	d101      	bne.n	800756a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007566:	2302      	movs	r3, #2
 8007568:	e02d      	b.n	80075c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2224      	movs	r2, #36	; 0x24
 8007576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0201 	bic.w	r2, r2, #1
 8007590:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f812 	bl	80075d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b089      	sub	sp, #36	; 0x24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80075d8:	4a2f      	ldr	r2, [pc, #188]	; (8007698 <UARTEx_SetNbDataToProcess+0xc8>)
 80075da:	f107 0314 	add.w	r3, r7, #20
 80075de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075e2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80075e6:	4a2d      	ldr	r2, [pc, #180]	; (800769c <UARTEx_SetNbDataToProcess+0xcc>)
 80075e8:	f107 030c 	add.w	r3, r7, #12
 80075ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075f0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d108      	bne.n	800760e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800760c:	e03d      	b.n	800768a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800760e:	2310      	movs	r3, #16
 8007610:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007612:	2310      	movs	r3, #16
 8007614:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	0e5b      	lsrs	r3, r3, #25
 800761e:	b2db      	uxtb	r3, r3
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	0f5b      	lsrs	r3, r3, #29
 800762e:	b2db      	uxtb	r3, r3
 8007630:	f003 0307 	and.w	r3, r3, #7
 8007634:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007636:	7fbb      	ldrb	r3, [r7, #30]
 8007638:	7f3a      	ldrb	r2, [r7, #28]
 800763a:	f107 0120 	add.w	r1, r7, #32
 800763e:	440a      	add	r2, r1
 8007640:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007644:	fb02 f303 	mul.w	r3, r2, r3
 8007648:	7f3a      	ldrb	r2, [r7, #28]
 800764a:	f107 0120 	add.w	r1, r7, #32
 800764e:	440a      	add	r2, r1
 8007650:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007654:	fb93 f3f2 	sdiv	r3, r3, r2
 8007658:	b29a      	uxth	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007660:	7ffb      	ldrb	r3, [r7, #31]
 8007662:	7f7a      	ldrb	r2, [r7, #29]
 8007664:	f107 0120 	add.w	r1, r7, #32
 8007668:	440a      	add	r2, r1
 800766a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800766e:	fb02 f303 	mul.w	r3, r2, r3
 8007672:	7f7a      	ldrb	r2, [r7, #29]
 8007674:	f107 0120 	add.w	r1, r7, #32
 8007678:	440a      	add	r2, r1
 800767a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800767e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007682:	b29a      	uxth	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800768a:	bf00      	nop
 800768c:	3724      	adds	r7, #36	; 0x24
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	08008a4c 	.word	0x08008a4c
 800769c:	08008a54 	.word	0x08008a54

080076a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076a0:	b084      	sub	sp, #16
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	f107 001c 	add.w	r0, r7, #28
 80076ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d120      	bne.n	80076fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	4b25      	ldr	r3, [pc, #148]	; (8007760 <USB_CoreInit+0xc0>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d105      	bne.n	80076ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fa4c 	bl	8007b8c <USB_CoreReset>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73fb      	strb	r3, [r7, #15]
 80076f8:	e01a      	b.n	8007730 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fa40 	bl	8007b8c <USB_CoreReset>
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	639a      	str	r2, [r3, #56]	; 0x38
 8007722:	e005      	b.n	8007730 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007728:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	2b01      	cmp	r3, #1
 8007734:	d10b      	bne.n	800774e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f043 0206 	orr.w	r2, r3, #6
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f043 0220 	orr.w	r2, r3, #32
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800775a:	b004      	add	sp, #16
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	ffbdffbf 	.word	0xffbdffbf

08007764 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f023 0201 	bic.w	r2, r3, #1
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800779e:	78fb      	ldrb	r3, [r7, #3]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d106      	bne.n	80077b2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60da      	str	r2, [r3, #12]
 80077b0:	e00b      	b.n	80077ca <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80077b2:	78fb      	ldrb	r3, [r7, #3]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d106      	bne.n	80077c6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	60da      	str	r2, [r3, #12]
 80077c4:	e001      	b.n	80077ca <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e003      	b.n	80077d2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80077ca:	2032      	movs	r0, #50	; 0x32
 80077cc:	f7f9 fdfa 	bl	80013c4 <HAL_Delay>

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077dc:	b084      	sub	sp, #16
 80077de:	b580      	push	{r7, lr}
 80077e0:	b086      	sub	sp, #24
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80077ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077f6:	2300      	movs	r3, #0
 80077f8:	613b      	str	r3, [r7, #16]
 80077fa:	e009      	b.n	8007810 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3340      	adds	r3, #64	; 0x40
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	2200      	movs	r2, #0
 8007808:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	3301      	adds	r3, #1
 800780e:	613b      	str	r3, [r7, #16]
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	2b0e      	cmp	r3, #14
 8007814:	d9f2      	bls.n	80077fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007818:	2b00      	cmp	r3, #0
 800781a:	d11c      	bne.n	8007856 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800782a:	f043 0302 	orr.w	r3, r3, #2
 800782e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e005      	b.n	8007862 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007868:	461a      	mov	r2, r3
 800786a:	2300      	movs	r3, #0
 800786c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007874:	4619      	mov	r1, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787c:	461a      	mov	r2, r3
 800787e:	680b      	ldr	r3, [r1, #0]
 8007880:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	2b01      	cmp	r3, #1
 8007886:	d10c      	bne.n	80078a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	2b00      	cmp	r3, #0
 800788c:	d104      	bne.n	8007898 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800788e:	2100      	movs	r1, #0
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f949 	bl	8007b28 <USB_SetDevSpeed>
 8007896:	e008      	b.n	80078aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007898:	2101      	movs	r1, #1
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f944 	bl	8007b28 <USB_SetDevSpeed>
 80078a0:	e003      	b.n	80078aa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078a2:	2103      	movs	r1, #3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f93f 	bl	8007b28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078aa:	2110      	movs	r1, #16
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f8f3 	bl	8007a98 <USB_FlushTxFifo>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f911 	bl	8007ae4 <USB_FlushRxFifo>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d2:	461a      	mov	r2, r3
 80078d4:	2300      	movs	r3, #0
 80078d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078de:	461a      	mov	r2, r3
 80078e0:	2300      	movs	r3, #0
 80078e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ea:	461a      	mov	r2, r3
 80078ec:	2300      	movs	r3, #0
 80078ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078f0:	2300      	movs	r3, #0
 80078f2:	613b      	str	r3, [r7, #16]
 80078f4:	e043      	b.n	800797e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800790c:	d118      	bne.n	8007940 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007920:	461a      	mov	r2, r3
 8007922:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	e013      	b.n	8007952 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007936:	461a      	mov	r2, r3
 8007938:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	e008      	b.n	8007952 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794c:	461a      	mov	r2, r3
 800794e:	2300      	movs	r3, #0
 8007950:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795e:	461a      	mov	r2, r3
 8007960:	2300      	movs	r3, #0
 8007962:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007970:	461a      	mov	r2, r3
 8007972:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007976:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	3301      	adds	r3, #1
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	429a      	cmp	r2, r3
 8007984:	d3b7      	bcc.n	80078f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007986:	2300      	movs	r3, #0
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	e043      	b.n	8007a14 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800799e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079a2:	d118      	bne.n	80079d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10a      	bne.n	80079c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b6:	461a      	mov	r2, r3
 80079b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	e013      	b.n	80079e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079cc:	461a      	mov	r2, r3
 80079ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	e008      	b.n	80079e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e2:	461a      	mov	r2, r3
 80079e4:	2300      	movs	r3, #0
 80079e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f4:	461a      	mov	r2, r3
 80079f6:	2300      	movs	r3, #0
 80079f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a06:	461a      	mov	r2, r3
 8007a08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	3301      	adds	r3, #1
 8007a12:	613b      	str	r3, [r7, #16]
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d3b7      	bcc.n	800798c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d105      	bne.n	8007a50 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	f043 0210 	orr.w	r2, r3, #16
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699a      	ldr	r2, [r3, #24]
 8007a54:	4b0e      	ldr	r3, [pc, #56]	; (8007a90 <USB_DevInit+0x2b4>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	f043 0208 	orr.w	r2, r3, #8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d105      	bne.n	8007a80 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	699a      	ldr	r2, [r3, #24]
 8007a78:	4b06      	ldr	r3, [pc, #24]	; (8007a94 <USB_DevInit+0x2b8>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3718      	adds	r7, #24
 8007a86:	46bd      	mov	sp, r7
 8007a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a8c:	b004      	add	sp, #16
 8007a8e:	4770      	bx	lr
 8007a90:	803c3800 	.word	0x803c3800
 8007a94:	40000004 	.word	0x40000004

08007a98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	019b      	lsls	r3, r3, #6
 8007aaa:	f043 0220 	orr.w	r2, r3, #32
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4a09      	ldr	r2, [pc, #36]	; (8007ae0 <USB_FlushTxFifo+0x48>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d901      	bls.n	8007ac4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e006      	b.n	8007ad2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	d0f0      	beq.n	8007ab2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	00030d40 	.word	0x00030d40

08007ae4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2210      	movs	r2, #16
 8007af4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3301      	adds	r3, #1
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <USB_FlushRxFifo+0x40>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d901      	bls.n	8007b08 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e006      	b.n	8007b16 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	f003 0310 	and.w	r3, r3, #16
 8007b10:	2b10      	cmp	r3, #16
 8007b12:	d0f0      	beq.n	8007af6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	00030d40 	.word	0x00030d40

08007b28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	68f9      	ldr	r1, [r7, #12]
 8007b44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b74:	f043 0302 	orr.w	r3, r3, #2
 8007b78:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007b7a:	2003      	movs	r0, #3
 8007b7c:	f7f9 fc22 	bl	80013c4 <HAL_Delay>

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
	...

08007b8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4a13      	ldr	r2, [pc, #76]	; (8007bf0 <USB_CoreReset+0x64>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d901      	bls.n	8007baa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e01b      	b.n	8007be2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	daf2      	bge.n	8007b98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	f043 0201 	orr.w	r2, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4a09      	ldr	r2, [pc, #36]	; (8007bf0 <USB_CoreReset+0x64>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d901      	bls.n	8007bd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e006      	b.n	8007be2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d0f0      	beq.n	8007bc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	00030d40 	.word	0x00030d40

08007bf4 <__errno>:
 8007bf4:	4b01      	ldr	r3, [pc, #4]	; (8007bfc <__errno+0x8>)
 8007bf6:	6818      	ldr	r0, [r3, #0]
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	20000010 	.word	0x20000010

08007c00 <__libc_init_array>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	4e0d      	ldr	r6, [pc, #52]	; (8007c38 <__libc_init_array+0x38>)
 8007c04:	4c0d      	ldr	r4, [pc, #52]	; (8007c3c <__libc_init_array+0x3c>)
 8007c06:	1ba4      	subs	r4, r4, r6
 8007c08:	10a4      	asrs	r4, r4, #2
 8007c0a:	2500      	movs	r5, #0
 8007c0c:	42a5      	cmp	r5, r4
 8007c0e:	d109      	bne.n	8007c24 <__libc_init_array+0x24>
 8007c10:	4e0b      	ldr	r6, [pc, #44]	; (8007c40 <__libc_init_array+0x40>)
 8007c12:	4c0c      	ldr	r4, [pc, #48]	; (8007c44 <__libc_init_array+0x44>)
 8007c14:	f000 ff04 	bl	8008a20 <_init>
 8007c18:	1ba4      	subs	r4, r4, r6
 8007c1a:	10a4      	asrs	r4, r4, #2
 8007c1c:	2500      	movs	r5, #0
 8007c1e:	42a5      	cmp	r5, r4
 8007c20:	d105      	bne.n	8007c2e <__libc_init_array+0x2e>
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c28:	4798      	blx	r3
 8007c2a:	3501      	adds	r5, #1
 8007c2c:	e7ee      	b.n	8007c0c <__libc_init_array+0xc>
 8007c2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c32:	4798      	blx	r3
 8007c34:	3501      	adds	r5, #1
 8007c36:	e7f2      	b.n	8007c1e <__libc_init_array+0x1e>
 8007c38:	08008b24 	.word	0x08008b24
 8007c3c:	08008b24 	.word	0x08008b24
 8007c40:	08008b24 	.word	0x08008b24
 8007c44:	08008b28 	.word	0x08008b28

08007c48 <memset>:
 8007c48:	4402      	add	r2, r0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d100      	bne.n	8007c52 <memset+0xa>
 8007c50:	4770      	bx	lr
 8007c52:	f803 1b01 	strb.w	r1, [r3], #1
 8007c56:	e7f9      	b.n	8007c4c <memset+0x4>

08007c58 <iprintf>:
 8007c58:	b40f      	push	{r0, r1, r2, r3}
 8007c5a:	4b0a      	ldr	r3, [pc, #40]	; (8007c84 <iprintf+0x2c>)
 8007c5c:	b513      	push	{r0, r1, r4, lr}
 8007c5e:	681c      	ldr	r4, [r3, #0]
 8007c60:	b124      	cbz	r4, 8007c6c <iprintf+0x14>
 8007c62:	69a3      	ldr	r3, [r4, #24]
 8007c64:	b913      	cbnz	r3, 8007c6c <iprintf+0x14>
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 f84e 	bl	8007d08 <__sinit>
 8007c6c:	ab05      	add	r3, sp, #20
 8007c6e:	9a04      	ldr	r2, [sp, #16]
 8007c70:	68a1      	ldr	r1, [r4, #8]
 8007c72:	9301      	str	r3, [sp, #4]
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 f955 	bl	8007f24 <_vfiprintf_r>
 8007c7a:	b002      	add	sp, #8
 8007c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c80:	b004      	add	sp, #16
 8007c82:	4770      	bx	lr
 8007c84:	20000010 	.word	0x20000010

08007c88 <std>:
 8007c88:	2300      	movs	r3, #0
 8007c8a:	b510      	push	{r4, lr}
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c92:	6083      	str	r3, [r0, #8]
 8007c94:	8181      	strh	r1, [r0, #12]
 8007c96:	6643      	str	r3, [r0, #100]	; 0x64
 8007c98:	81c2      	strh	r2, [r0, #14]
 8007c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c9e:	6183      	str	r3, [r0, #24]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	2208      	movs	r2, #8
 8007ca4:	305c      	adds	r0, #92	; 0x5c
 8007ca6:	f7ff ffcf 	bl	8007c48 <memset>
 8007caa:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <std+0x38>)
 8007cac:	6263      	str	r3, [r4, #36]	; 0x24
 8007cae:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <std+0x3c>)
 8007cb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cb2:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <std+0x40>)
 8007cb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cb6:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <std+0x44>)
 8007cb8:	6224      	str	r4, [r4, #32]
 8007cba:	6323      	str	r3, [r4, #48]	; 0x30
 8007cbc:	bd10      	pop	{r4, pc}
 8007cbe:	bf00      	nop
 8007cc0:	08008481 	.word	0x08008481
 8007cc4:	080084a3 	.word	0x080084a3
 8007cc8:	080084db 	.word	0x080084db
 8007ccc:	080084ff 	.word	0x080084ff

08007cd0 <_cleanup_r>:
 8007cd0:	4901      	ldr	r1, [pc, #4]	; (8007cd8 <_cleanup_r+0x8>)
 8007cd2:	f000 b885 	b.w	8007de0 <_fwalk_reent>
 8007cd6:	bf00      	nop
 8007cd8:	080087d9 	.word	0x080087d9

08007cdc <__sfmoreglue>:
 8007cdc:	b570      	push	{r4, r5, r6, lr}
 8007cde:	1e4a      	subs	r2, r1, #1
 8007ce0:	2568      	movs	r5, #104	; 0x68
 8007ce2:	4355      	muls	r5, r2
 8007ce4:	460e      	mov	r6, r1
 8007ce6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cea:	f000 f897 	bl	8007e1c <_malloc_r>
 8007cee:	4604      	mov	r4, r0
 8007cf0:	b140      	cbz	r0, 8007d04 <__sfmoreglue+0x28>
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	e9c0 1600 	strd	r1, r6, [r0]
 8007cf8:	300c      	adds	r0, #12
 8007cfa:	60a0      	str	r0, [r4, #8]
 8007cfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d00:	f7ff ffa2 	bl	8007c48 <memset>
 8007d04:	4620      	mov	r0, r4
 8007d06:	bd70      	pop	{r4, r5, r6, pc}

08007d08 <__sinit>:
 8007d08:	6983      	ldr	r3, [r0, #24]
 8007d0a:	b510      	push	{r4, lr}
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	bb33      	cbnz	r3, 8007d5e <__sinit+0x56>
 8007d10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007d14:	6503      	str	r3, [r0, #80]	; 0x50
 8007d16:	4b12      	ldr	r3, [pc, #72]	; (8007d60 <__sinit+0x58>)
 8007d18:	4a12      	ldr	r2, [pc, #72]	; (8007d64 <__sinit+0x5c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6282      	str	r2, [r0, #40]	; 0x28
 8007d1e:	4298      	cmp	r0, r3
 8007d20:	bf04      	itt	eq
 8007d22:	2301      	moveq	r3, #1
 8007d24:	6183      	streq	r3, [r0, #24]
 8007d26:	f000 f81f 	bl	8007d68 <__sfp>
 8007d2a:	6060      	str	r0, [r4, #4]
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 f81b 	bl	8007d68 <__sfp>
 8007d32:	60a0      	str	r0, [r4, #8]
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 f817 	bl	8007d68 <__sfp>
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	60e0      	str	r0, [r4, #12]
 8007d3e:	2104      	movs	r1, #4
 8007d40:	6860      	ldr	r0, [r4, #4]
 8007d42:	f7ff ffa1 	bl	8007c88 <std>
 8007d46:	2201      	movs	r2, #1
 8007d48:	2109      	movs	r1, #9
 8007d4a:	68a0      	ldr	r0, [r4, #8]
 8007d4c:	f7ff ff9c 	bl	8007c88 <std>
 8007d50:	2202      	movs	r2, #2
 8007d52:	2112      	movs	r1, #18
 8007d54:	68e0      	ldr	r0, [r4, #12]
 8007d56:	f7ff ff97 	bl	8007c88 <std>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	61a3      	str	r3, [r4, #24]
 8007d5e:	bd10      	pop	{r4, pc}
 8007d60:	08008a84 	.word	0x08008a84
 8007d64:	08007cd1 	.word	0x08007cd1

08007d68 <__sfp>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	4b1b      	ldr	r3, [pc, #108]	; (8007dd8 <__sfp+0x70>)
 8007d6c:	681e      	ldr	r6, [r3, #0]
 8007d6e:	69b3      	ldr	r3, [r6, #24]
 8007d70:	4607      	mov	r7, r0
 8007d72:	b913      	cbnz	r3, 8007d7a <__sfp+0x12>
 8007d74:	4630      	mov	r0, r6
 8007d76:	f7ff ffc7 	bl	8007d08 <__sinit>
 8007d7a:	3648      	adds	r6, #72	; 0x48
 8007d7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	d503      	bpl.n	8007d8c <__sfp+0x24>
 8007d84:	6833      	ldr	r3, [r6, #0]
 8007d86:	b133      	cbz	r3, 8007d96 <__sfp+0x2e>
 8007d88:	6836      	ldr	r6, [r6, #0]
 8007d8a:	e7f7      	b.n	8007d7c <__sfp+0x14>
 8007d8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d90:	b16d      	cbz	r5, 8007dae <__sfp+0x46>
 8007d92:	3468      	adds	r4, #104	; 0x68
 8007d94:	e7f4      	b.n	8007d80 <__sfp+0x18>
 8007d96:	2104      	movs	r1, #4
 8007d98:	4638      	mov	r0, r7
 8007d9a:	f7ff ff9f 	bl	8007cdc <__sfmoreglue>
 8007d9e:	6030      	str	r0, [r6, #0]
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d1f1      	bne.n	8007d88 <__sfp+0x20>
 8007da4:	230c      	movs	r3, #12
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4604      	mov	r4, r0
 8007daa:	4620      	mov	r0, r4
 8007dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dae:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <__sfp+0x74>)
 8007db0:	6665      	str	r5, [r4, #100]	; 0x64
 8007db2:	e9c4 5500 	strd	r5, r5, [r4]
 8007db6:	60a5      	str	r5, [r4, #8]
 8007db8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007dbc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dc8:	f7ff ff3e 	bl	8007c48 <memset>
 8007dcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007dd4:	e7e9      	b.n	8007daa <__sfp+0x42>
 8007dd6:	bf00      	nop
 8007dd8:	08008a84 	.word	0x08008a84
 8007ddc:	ffff0001 	.word	0xffff0001

08007de0 <_fwalk_reent>:
 8007de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de4:	4680      	mov	r8, r0
 8007de6:	4689      	mov	r9, r1
 8007de8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007dec:	2600      	movs	r6, #0
 8007dee:	b914      	cbnz	r4, 8007df6 <_fwalk_reent+0x16>
 8007df0:	4630      	mov	r0, r6
 8007df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007df6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007dfa:	3f01      	subs	r7, #1
 8007dfc:	d501      	bpl.n	8007e02 <_fwalk_reent+0x22>
 8007dfe:	6824      	ldr	r4, [r4, #0]
 8007e00:	e7f5      	b.n	8007dee <_fwalk_reent+0xe>
 8007e02:	89ab      	ldrh	r3, [r5, #12]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d907      	bls.n	8007e18 <_fwalk_reent+0x38>
 8007e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	d003      	beq.n	8007e18 <_fwalk_reent+0x38>
 8007e10:	4629      	mov	r1, r5
 8007e12:	4640      	mov	r0, r8
 8007e14:	47c8      	blx	r9
 8007e16:	4306      	orrs	r6, r0
 8007e18:	3568      	adds	r5, #104	; 0x68
 8007e1a:	e7ee      	b.n	8007dfa <_fwalk_reent+0x1a>

08007e1c <_malloc_r>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	1ccd      	adds	r5, r1, #3
 8007e20:	f025 0503 	bic.w	r5, r5, #3
 8007e24:	3508      	adds	r5, #8
 8007e26:	2d0c      	cmp	r5, #12
 8007e28:	bf38      	it	cc
 8007e2a:	250c      	movcc	r5, #12
 8007e2c:	2d00      	cmp	r5, #0
 8007e2e:	4606      	mov	r6, r0
 8007e30:	db01      	blt.n	8007e36 <_malloc_r+0x1a>
 8007e32:	42a9      	cmp	r1, r5
 8007e34:	d903      	bls.n	8007e3e <_malloc_r+0x22>
 8007e36:	230c      	movs	r3, #12
 8007e38:	6033      	str	r3, [r6, #0]
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	bd70      	pop	{r4, r5, r6, pc}
 8007e3e:	f000 fd6b 	bl	8008918 <__malloc_lock>
 8007e42:	4a21      	ldr	r2, [pc, #132]	; (8007ec8 <_malloc_r+0xac>)
 8007e44:	6814      	ldr	r4, [r2, #0]
 8007e46:	4621      	mov	r1, r4
 8007e48:	b991      	cbnz	r1, 8007e70 <_malloc_r+0x54>
 8007e4a:	4c20      	ldr	r4, [pc, #128]	; (8007ecc <_malloc_r+0xb0>)
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	b91b      	cbnz	r3, 8007e58 <_malloc_r+0x3c>
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 fb05 	bl	8008460 <_sbrk_r>
 8007e56:	6020      	str	r0, [r4, #0]
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f000 fb00 	bl	8008460 <_sbrk_r>
 8007e60:	1c43      	adds	r3, r0, #1
 8007e62:	d124      	bne.n	8007eae <_malloc_r+0x92>
 8007e64:	230c      	movs	r3, #12
 8007e66:	6033      	str	r3, [r6, #0]
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f000 fd56 	bl	800891a <__malloc_unlock>
 8007e6e:	e7e4      	b.n	8007e3a <_malloc_r+0x1e>
 8007e70:	680b      	ldr	r3, [r1, #0]
 8007e72:	1b5b      	subs	r3, r3, r5
 8007e74:	d418      	bmi.n	8007ea8 <_malloc_r+0x8c>
 8007e76:	2b0b      	cmp	r3, #11
 8007e78:	d90f      	bls.n	8007e9a <_malloc_r+0x7e>
 8007e7a:	600b      	str	r3, [r1, #0]
 8007e7c:	50cd      	str	r5, [r1, r3]
 8007e7e:	18cc      	adds	r4, r1, r3
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 fd4a 	bl	800891a <__malloc_unlock>
 8007e86:	f104 000b 	add.w	r0, r4, #11
 8007e8a:	1d23      	adds	r3, r4, #4
 8007e8c:	f020 0007 	bic.w	r0, r0, #7
 8007e90:	1ac3      	subs	r3, r0, r3
 8007e92:	d0d3      	beq.n	8007e3c <_malloc_r+0x20>
 8007e94:	425a      	negs	r2, r3
 8007e96:	50e2      	str	r2, [r4, r3]
 8007e98:	e7d0      	b.n	8007e3c <_malloc_r+0x20>
 8007e9a:	428c      	cmp	r4, r1
 8007e9c:	684b      	ldr	r3, [r1, #4]
 8007e9e:	bf16      	itet	ne
 8007ea0:	6063      	strne	r3, [r4, #4]
 8007ea2:	6013      	streq	r3, [r2, #0]
 8007ea4:	460c      	movne	r4, r1
 8007ea6:	e7eb      	b.n	8007e80 <_malloc_r+0x64>
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	6849      	ldr	r1, [r1, #4]
 8007eac:	e7cc      	b.n	8007e48 <_malloc_r+0x2c>
 8007eae:	1cc4      	adds	r4, r0, #3
 8007eb0:	f024 0403 	bic.w	r4, r4, #3
 8007eb4:	42a0      	cmp	r0, r4
 8007eb6:	d005      	beq.n	8007ec4 <_malloc_r+0xa8>
 8007eb8:	1a21      	subs	r1, r4, r0
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f000 fad0 	bl	8008460 <_sbrk_r>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d0cf      	beq.n	8007e64 <_malloc_r+0x48>
 8007ec4:	6025      	str	r5, [r4, #0]
 8007ec6:	e7db      	b.n	8007e80 <_malloc_r+0x64>
 8007ec8:	2000009c 	.word	0x2000009c
 8007ecc:	200000a0 	.word	0x200000a0

08007ed0 <__sfputc_r>:
 8007ed0:	6893      	ldr	r3, [r2, #8]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	b410      	push	{r4}
 8007ed8:	6093      	str	r3, [r2, #8]
 8007eda:	da08      	bge.n	8007eee <__sfputc_r+0x1e>
 8007edc:	6994      	ldr	r4, [r2, #24]
 8007ede:	42a3      	cmp	r3, r4
 8007ee0:	db01      	blt.n	8007ee6 <__sfputc_r+0x16>
 8007ee2:	290a      	cmp	r1, #10
 8007ee4:	d103      	bne.n	8007eee <__sfputc_r+0x1e>
 8007ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eea:	f000 bb0d 	b.w	8008508 <__swbuf_r>
 8007eee:	6813      	ldr	r3, [r2, #0]
 8007ef0:	1c58      	adds	r0, r3, #1
 8007ef2:	6010      	str	r0, [r2, #0]
 8007ef4:	7019      	strb	r1, [r3, #0]
 8007ef6:	4608      	mov	r0, r1
 8007ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <__sfputs_r>:
 8007efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f00:	4606      	mov	r6, r0
 8007f02:	460f      	mov	r7, r1
 8007f04:	4614      	mov	r4, r2
 8007f06:	18d5      	adds	r5, r2, r3
 8007f08:	42ac      	cmp	r4, r5
 8007f0a:	d101      	bne.n	8007f10 <__sfputs_r+0x12>
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	e007      	b.n	8007f20 <__sfputs_r+0x22>
 8007f10:	463a      	mov	r2, r7
 8007f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f16:	4630      	mov	r0, r6
 8007f18:	f7ff ffda 	bl	8007ed0 <__sfputc_r>
 8007f1c:	1c43      	adds	r3, r0, #1
 8007f1e:	d1f3      	bne.n	8007f08 <__sfputs_r+0xa>
 8007f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f24 <_vfiprintf_r>:
 8007f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f28:	460c      	mov	r4, r1
 8007f2a:	b09d      	sub	sp, #116	; 0x74
 8007f2c:	4617      	mov	r7, r2
 8007f2e:	461d      	mov	r5, r3
 8007f30:	4606      	mov	r6, r0
 8007f32:	b118      	cbz	r0, 8007f3c <_vfiprintf_r+0x18>
 8007f34:	6983      	ldr	r3, [r0, #24]
 8007f36:	b90b      	cbnz	r3, 8007f3c <_vfiprintf_r+0x18>
 8007f38:	f7ff fee6 	bl	8007d08 <__sinit>
 8007f3c:	4b7c      	ldr	r3, [pc, #496]	; (8008130 <_vfiprintf_r+0x20c>)
 8007f3e:	429c      	cmp	r4, r3
 8007f40:	d158      	bne.n	8007ff4 <_vfiprintf_r+0xd0>
 8007f42:	6874      	ldr	r4, [r6, #4]
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	0718      	lsls	r0, r3, #28
 8007f48:	d55e      	bpl.n	8008008 <_vfiprintf_r+0xe4>
 8007f4a:	6923      	ldr	r3, [r4, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d05b      	beq.n	8008008 <_vfiprintf_r+0xe4>
 8007f50:	2300      	movs	r3, #0
 8007f52:	9309      	str	r3, [sp, #36]	; 0x24
 8007f54:	2320      	movs	r3, #32
 8007f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f5a:	2330      	movs	r3, #48	; 0x30
 8007f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f60:	9503      	str	r5, [sp, #12]
 8007f62:	f04f 0b01 	mov.w	fp, #1
 8007f66:	46b8      	mov	r8, r7
 8007f68:	4645      	mov	r5, r8
 8007f6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007f6e:	b10b      	cbz	r3, 8007f74 <_vfiprintf_r+0x50>
 8007f70:	2b25      	cmp	r3, #37	; 0x25
 8007f72:	d154      	bne.n	800801e <_vfiprintf_r+0xfa>
 8007f74:	ebb8 0a07 	subs.w	sl, r8, r7
 8007f78:	d00b      	beq.n	8007f92 <_vfiprintf_r+0x6e>
 8007f7a:	4653      	mov	r3, sl
 8007f7c:	463a      	mov	r2, r7
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7ff ffbc 	bl	8007efe <__sfputs_r>
 8007f86:	3001      	adds	r0, #1
 8007f88:	f000 80c2 	beq.w	8008110 <_vfiprintf_r+0x1ec>
 8007f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8e:	4453      	add	r3, sl
 8007f90:	9309      	str	r3, [sp, #36]	; 0x24
 8007f92:	f898 3000 	ldrb.w	r3, [r8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 80ba 	beq.w	8008110 <_vfiprintf_r+0x1ec>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fa6:	9304      	str	r3, [sp, #16]
 8007fa8:	9307      	str	r3, [sp, #28]
 8007faa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fae:	931a      	str	r3, [sp, #104]	; 0x68
 8007fb0:	46a8      	mov	r8, r5
 8007fb2:	2205      	movs	r2, #5
 8007fb4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007fb8:	485e      	ldr	r0, [pc, #376]	; (8008134 <_vfiprintf_r+0x210>)
 8007fba:	f7f8 f991 	bl	80002e0 <memchr>
 8007fbe:	9b04      	ldr	r3, [sp, #16]
 8007fc0:	bb78      	cbnz	r0, 8008022 <_vfiprintf_r+0xfe>
 8007fc2:	06d9      	lsls	r1, r3, #27
 8007fc4:	bf44      	itt	mi
 8007fc6:	2220      	movmi	r2, #32
 8007fc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007fcc:	071a      	lsls	r2, r3, #28
 8007fce:	bf44      	itt	mi
 8007fd0:	222b      	movmi	r2, #43	; 0x2b
 8007fd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007fd6:	782a      	ldrb	r2, [r5, #0]
 8007fd8:	2a2a      	cmp	r2, #42	; 0x2a
 8007fda:	d02a      	beq.n	8008032 <_vfiprintf_r+0x10e>
 8007fdc:	9a07      	ldr	r2, [sp, #28]
 8007fde:	46a8      	mov	r8, r5
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	250a      	movs	r5, #10
 8007fe4:	4641      	mov	r1, r8
 8007fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fea:	3b30      	subs	r3, #48	; 0x30
 8007fec:	2b09      	cmp	r3, #9
 8007fee:	d969      	bls.n	80080c4 <_vfiprintf_r+0x1a0>
 8007ff0:	b360      	cbz	r0, 800804c <_vfiprintf_r+0x128>
 8007ff2:	e024      	b.n	800803e <_vfiprintf_r+0x11a>
 8007ff4:	4b50      	ldr	r3, [pc, #320]	; (8008138 <_vfiprintf_r+0x214>)
 8007ff6:	429c      	cmp	r4, r3
 8007ff8:	d101      	bne.n	8007ffe <_vfiprintf_r+0xda>
 8007ffa:	68b4      	ldr	r4, [r6, #8]
 8007ffc:	e7a2      	b.n	8007f44 <_vfiprintf_r+0x20>
 8007ffe:	4b4f      	ldr	r3, [pc, #316]	; (800813c <_vfiprintf_r+0x218>)
 8008000:	429c      	cmp	r4, r3
 8008002:	bf08      	it	eq
 8008004:	68f4      	ldreq	r4, [r6, #12]
 8008006:	e79d      	b.n	8007f44 <_vfiprintf_r+0x20>
 8008008:	4621      	mov	r1, r4
 800800a:	4630      	mov	r0, r6
 800800c:	f000 fae0 	bl	80085d0 <__swsetup_r>
 8008010:	2800      	cmp	r0, #0
 8008012:	d09d      	beq.n	8007f50 <_vfiprintf_r+0x2c>
 8008014:	f04f 30ff 	mov.w	r0, #4294967295
 8008018:	b01d      	add	sp, #116	; 0x74
 800801a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801e:	46a8      	mov	r8, r5
 8008020:	e7a2      	b.n	8007f68 <_vfiprintf_r+0x44>
 8008022:	4a44      	ldr	r2, [pc, #272]	; (8008134 <_vfiprintf_r+0x210>)
 8008024:	1a80      	subs	r0, r0, r2
 8008026:	fa0b f000 	lsl.w	r0, fp, r0
 800802a:	4318      	orrs	r0, r3
 800802c:	9004      	str	r0, [sp, #16]
 800802e:	4645      	mov	r5, r8
 8008030:	e7be      	b.n	8007fb0 <_vfiprintf_r+0x8c>
 8008032:	9a03      	ldr	r2, [sp, #12]
 8008034:	1d11      	adds	r1, r2, #4
 8008036:	6812      	ldr	r2, [r2, #0]
 8008038:	9103      	str	r1, [sp, #12]
 800803a:	2a00      	cmp	r2, #0
 800803c:	db01      	blt.n	8008042 <_vfiprintf_r+0x11e>
 800803e:	9207      	str	r2, [sp, #28]
 8008040:	e004      	b.n	800804c <_vfiprintf_r+0x128>
 8008042:	4252      	negs	r2, r2
 8008044:	f043 0302 	orr.w	r3, r3, #2
 8008048:	9207      	str	r2, [sp, #28]
 800804a:	9304      	str	r3, [sp, #16]
 800804c:	f898 3000 	ldrb.w	r3, [r8]
 8008050:	2b2e      	cmp	r3, #46	; 0x2e
 8008052:	d10e      	bne.n	8008072 <_vfiprintf_r+0x14e>
 8008054:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008058:	2b2a      	cmp	r3, #42	; 0x2a
 800805a:	d138      	bne.n	80080ce <_vfiprintf_r+0x1aa>
 800805c:	9b03      	ldr	r3, [sp, #12]
 800805e:	1d1a      	adds	r2, r3, #4
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	9203      	str	r2, [sp, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	bfb8      	it	lt
 8008068:	f04f 33ff 	movlt.w	r3, #4294967295
 800806c:	f108 0802 	add.w	r8, r8, #2
 8008070:	9305      	str	r3, [sp, #20]
 8008072:	4d33      	ldr	r5, [pc, #204]	; (8008140 <_vfiprintf_r+0x21c>)
 8008074:	f898 1000 	ldrb.w	r1, [r8]
 8008078:	2203      	movs	r2, #3
 800807a:	4628      	mov	r0, r5
 800807c:	f7f8 f930 	bl	80002e0 <memchr>
 8008080:	b140      	cbz	r0, 8008094 <_vfiprintf_r+0x170>
 8008082:	2340      	movs	r3, #64	; 0x40
 8008084:	1b40      	subs	r0, r0, r5
 8008086:	fa03 f000 	lsl.w	r0, r3, r0
 800808a:	9b04      	ldr	r3, [sp, #16]
 800808c:	4303      	orrs	r3, r0
 800808e:	f108 0801 	add.w	r8, r8, #1
 8008092:	9304      	str	r3, [sp, #16]
 8008094:	f898 1000 	ldrb.w	r1, [r8]
 8008098:	482a      	ldr	r0, [pc, #168]	; (8008144 <_vfiprintf_r+0x220>)
 800809a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800809e:	2206      	movs	r2, #6
 80080a0:	f108 0701 	add.w	r7, r8, #1
 80080a4:	f7f8 f91c 	bl	80002e0 <memchr>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d037      	beq.n	800811c <_vfiprintf_r+0x1f8>
 80080ac:	4b26      	ldr	r3, [pc, #152]	; (8008148 <_vfiprintf_r+0x224>)
 80080ae:	bb1b      	cbnz	r3, 80080f8 <_vfiprintf_r+0x1d4>
 80080b0:	9b03      	ldr	r3, [sp, #12]
 80080b2:	3307      	adds	r3, #7
 80080b4:	f023 0307 	bic.w	r3, r3, #7
 80080b8:	3308      	adds	r3, #8
 80080ba:	9303      	str	r3, [sp, #12]
 80080bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080be:	444b      	add	r3, r9
 80080c0:	9309      	str	r3, [sp, #36]	; 0x24
 80080c2:	e750      	b.n	8007f66 <_vfiprintf_r+0x42>
 80080c4:	fb05 3202 	mla	r2, r5, r2, r3
 80080c8:	2001      	movs	r0, #1
 80080ca:	4688      	mov	r8, r1
 80080cc:	e78a      	b.n	8007fe4 <_vfiprintf_r+0xc0>
 80080ce:	2300      	movs	r3, #0
 80080d0:	f108 0801 	add.w	r8, r8, #1
 80080d4:	9305      	str	r3, [sp, #20]
 80080d6:	4619      	mov	r1, r3
 80080d8:	250a      	movs	r5, #10
 80080da:	4640      	mov	r0, r8
 80080dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080e0:	3a30      	subs	r2, #48	; 0x30
 80080e2:	2a09      	cmp	r2, #9
 80080e4:	d903      	bls.n	80080ee <_vfiprintf_r+0x1ca>
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0c3      	beq.n	8008072 <_vfiprintf_r+0x14e>
 80080ea:	9105      	str	r1, [sp, #20]
 80080ec:	e7c1      	b.n	8008072 <_vfiprintf_r+0x14e>
 80080ee:	fb05 2101 	mla	r1, r5, r1, r2
 80080f2:	2301      	movs	r3, #1
 80080f4:	4680      	mov	r8, r0
 80080f6:	e7f0      	b.n	80080da <_vfiprintf_r+0x1b6>
 80080f8:	ab03      	add	r3, sp, #12
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	4622      	mov	r2, r4
 80080fe:	4b13      	ldr	r3, [pc, #76]	; (800814c <_vfiprintf_r+0x228>)
 8008100:	a904      	add	r1, sp, #16
 8008102:	4630      	mov	r0, r6
 8008104:	f3af 8000 	nop.w
 8008108:	f1b0 3fff 	cmp.w	r0, #4294967295
 800810c:	4681      	mov	r9, r0
 800810e:	d1d5      	bne.n	80080bc <_vfiprintf_r+0x198>
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	065b      	lsls	r3, r3, #25
 8008114:	f53f af7e 	bmi.w	8008014 <_vfiprintf_r+0xf0>
 8008118:	9809      	ldr	r0, [sp, #36]	; 0x24
 800811a:	e77d      	b.n	8008018 <_vfiprintf_r+0xf4>
 800811c:	ab03      	add	r3, sp, #12
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	4622      	mov	r2, r4
 8008122:	4b0a      	ldr	r3, [pc, #40]	; (800814c <_vfiprintf_r+0x228>)
 8008124:	a904      	add	r1, sp, #16
 8008126:	4630      	mov	r0, r6
 8008128:	f000 f888 	bl	800823c <_printf_i>
 800812c:	e7ec      	b.n	8008108 <_vfiprintf_r+0x1e4>
 800812e:	bf00      	nop
 8008130:	08008aa8 	.word	0x08008aa8
 8008134:	08008ae8 	.word	0x08008ae8
 8008138:	08008ac8 	.word	0x08008ac8
 800813c:	08008a88 	.word	0x08008a88
 8008140:	08008aee 	.word	0x08008aee
 8008144:	08008af2 	.word	0x08008af2
 8008148:	00000000 	.word	0x00000000
 800814c:	08007eff 	.word	0x08007eff

08008150 <_printf_common>:
 8008150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008154:	4691      	mov	r9, r2
 8008156:	461f      	mov	r7, r3
 8008158:	688a      	ldr	r2, [r1, #8]
 800815a:	690b      	ldr	r3, [r1, #16]
 800815c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008160:	4293      	cmp	r3, r2
 8008162:	bfb8      	it	lt
 8008164:	4613      	movlt	r3, r2
 8008166:	f8c9 3000 	str.w	r3, [r9]
 800816a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800816e:	4606      	mov	r6, r0
 8008170:	460c      	mov	r4, r1
 8008172:	b112      	cbz	r2, 800817a <_printf_common+0x2a>
 8008174:	3301      	adds	r3, #1
 8008176:	f8c9 3000 	str.w	r3, [r9]
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	0699      	lsls	r1, r3, #26
 800817e:	bf42      	ittt	mi
 8008180:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008184:	3302      	addmi	r3, #2
 8008186:	f8c9 3000 	strmi.w	r3, [r9]
 800818a:	6825      	ldr	r5, [r4, #0]
 800818c:	f015 0506 	ands.w	r5, r5, #6
 8008190:	d107      	bne.n	80081a2 <_printf_common+0x52>
 8008192:	f104 0a19 	add.w	sl, r4, #25
 8008196:	68e3      	ldr	r3, [r4, #12]
 8008198:	f8d9 2000 	ldr.w	r2, [r9]
 800819c:	1a9b      	subs	r3, r3, r2
 800819e:	42ab      	cmp	r3, r5
 80081a0:	dc28      	bgt.n	80081f4 <_printf_common+0xa4>
 80081a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80081a6:	6822      	ldr	r2, [r4, #0]
 80081a8:	3300      	adds	r3, #0
 80081aa:	bf18      	it	ne
 80081ac:	2301      	movne	r3, #1
 80081ae:	0692      	lsls	r2, r2, #26
 80081b0:	d42d      	bmi.n	800820e <_printf_common+0xbe>
 80081b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081b6:	4639      	mov	r1, r7
 80081b8:	4630      	mov	r0, r6
 80081ba:	47c0      	blx	r8
 80081bc:	3001      	adds	r0, #1
 80081be:	d020      	beq.n	8008202 <_printf_common+0xb2>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	68e5      	ldr	r5, [r4, #12]
 80081c4:	f8d9 2000 	ldr.w	r2, [r9]
 80081c8:	f003 0306 	and.w	r3, r3, #6
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	bf08      	it	eq
 80081d0:	1aad      	subeq	r5, r5, r2
 80081d2:	68a3      	ldr	r3, [r4, #8]
 80081d4:	6922      	ldr	r2, [r4, #16]
 80081d6:	bf0c      	ite	eq
 80081d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081dc:	2500      	movne	r5, #0
 80081de:	4293      	cmp	r3, r2
 80081e0:	bfc4      	itt	gt
 80081e2:	1a9b      	subgt	r3, r3, r2
 80081e4:	18ed      	addgt	r5, r5, r3
 80081e6:	f04f 0900 	mov.w	r9, #0
 80081ea:	341a      	adds	r4, #26
 80081ec:	454d      	cmp	r5, r9
 80081ee:	d11a      	bne.n	8008226 <_printf_common+0xd6>
 80081f0:	2000      	movs	r0, #0
 80081f2:	e008      	b.n	8008206 <_printf_common+0xb6>
 80081f4:	2301      	movs	r3, #1
 80081f6:	4652      	mov	r2, sl
 80081f8:	4639      	mov	r1, r7
 80081fa:	4630      	mov	r0, r6
 80081fc:	47c0      	blx	r8
 80081fe:	3001      	adds	r0, #1
 8008200:	d103      	bne.n	800820a <_printf_common+0xba>
 8008202:	f04f 30ff 	mov.w	r0, #4294967295
 8008206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800820a:	3501      	adds	r5, #1
 800820c:	e7c3      	b.n	8008196 <_printf_common+0x46>
 800820e:	18e1      	adds	r1, r4, r3
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	2030      	movs	r0, #48	; 0x30
 8008214:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008218:	4422      	add	r2, r4
 800821a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800821e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008222:	3302      	adds	r3, #2
 8008224:	e7c5      	b.n	80081b2 <_printf_common+0x62>
 8008226:	2301      	movs	r3, #1
 8008228:	4622      	mov	r2, r4
 800822a:	4639      	mov	r1, r7
 800822c:	4630      	mov	r0, r6
 800822e:	47c0      	blx	r8
 8008230:	3001      	adds	r0, #1
 8008232:	d0e6      	beq.n	8008202 <_printf_common+0xb2>
 8008234:	f109 0901 	add.w	r9, r9, #1
 8008238:	e7d8      	b.n	80081ec <_printf_common+0x9c>
	...

0800823c <_printf_i>:
 800823c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008240:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008244:	460c      	mov	r4, r1
 8008246:	7e09      	ldrb	r1, [r1, #24]
 8008248:	b085      	sub	sp, #20
 800824a:	296e      	cmp	r1, #110	; 0x6e
 800824c:	4617      	mov	r7, r2
 800824e:	4606      	mov	r6, r0
 8008250:	4698      	mov	r8, r3
 8008252:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008254:	f000 80b3 	beq.w	80083be <_printf_i+0x182>
 8008258:	d822      	bhi.n	80082a0 <_printf_i+0x64>
 800825a:	2963      	cmp	r1, #99	; 0x63
 800825c:	d036      	beq.n	80082cc <_printf_i+0x90>
 800825e:	d80a      	bhi.n	8008276 <_printf_i+0x3a>
 8008260:	2900      	cmp	r1, #0
 8008262:	f000 80b9 	beq.w	80083d8 <_printf_i+0x19c>
 8008266:	2958      	cmp	r1, #88	; 0x58
 8008268:	f000 8083 	beq.w	8008372 <_printf_i+0x136>
 800826c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008270:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008274:	e032      	b.n	80082dc <_printf_i+0xa0>
 8008276:	2964      	cmp	r1, #100	; 0x64
 8008278:	d001      	beq.n	800827e <_printf_i+0x42>
 800827a:	2969      	cmp	r1, #105	; 0x69
 800827c:	d1f6      	bne.n	800826c <_printf_i+0x30>
 800827e:	6820      	ldr	r0, [r4, #0]
 8008280:	6813      	ldr	r3, [r2, #0]
 8008282:	0605      	lsls	r5, r0, #24
 8008284:	f103 0104 	add.w	r1, r3, #4
 8008288:	d52a      	bpl.n	80082e0 <_printf_i+0xa4>
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6011      	str	r1, [r2, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	da03      	bge.n	800829a <_printf_i+0x5e>
 8008292:	222d      	movs	r2, #45	; 0x2d
 8008294:	425b      	negs	r3, r3
 8008296:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800829a:	486f      	ldr	r0, [pc, #444]	; (8008458 <_printf_i+0x21c>)
 800829c:	220a      	movs	r2, #10
 800829e:	e039      	b.n	8008314 <_printf_i+0xd8>
 80082a0:	2973      	cmp	r1, #115	; 0x73
 80082a2:	f000 809d 	beq.w	80083e0 <_printf_i+0x1a4>
 80082a6:	d808      	bhi.n	80082ba <_printf_i+0x7e>
 80082a8:	296f      	cmp	r1, #111	; 0x6f
 80082aa:	d020      	beq.n	80082ee <_printf_i+0xb2>
 80082ac:	2970      	cmp	r1, #112	; 0x70
 80082ae:	d1dd      	bne.n	800826c <_printf_i+0x30>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	f043 0320 	orr.w	r3, r3, #32
 80082b6:	6023      	str	r3, [r4, #0]
 80082b8:	e003      	b.n	80082c2 <_printf_i+0x86>
 80082ba:	2975      	cmp	r1, #117	; 0x75
 80082bc:	d017      	beq.n	80082ee <_printf_i+0xb2>
 80082be:	2978      	cmp	r1, #120	; 0x78
 80082c0:	d1d4      	bne.n	800826c <_printf_i+0x30>
 80082c2:	2378      	movs	r3, #120	; 0x78
 80082c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082c8:	4864      	ldr	r0, [pc, #400]	; (800845c <_printf_i+0x220>)
 80082ca:	e055      	b.n	8008378 <_printf_i+0x13c>
 80082cc:	6813      	ldr	r3, [r2, #0]
 80082ce:	1d19      	adds	r1, r3, #4
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6011      	str	r1, [r2, #0]
 80082d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082dc:	2301      	movs	r3, #1
 80082de:	e08c      	b.n	80083fa <_printf_i+0x1be>
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6011      	str	r1, [r2, #0]
 80082e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082e8:	bf18      	it	ne
 80082ea:	b21b      	sxthne	r3, r3
 80082ec:	e7cf      	b.n	800828e <_printf_i+0x52>
 80082ee:	6813      	ldr	r3, [r2, #0]
 80082f0:	6825      	ldr	r5, [r4, #0]
 80082f2:	1d18      	adds	r0, r3, #4
 80082f4:	6010      	str	r0, [r2, #0]
 80082f6:	0628      	lsls	r0, r5, #24
 80082f8:	d501      	bpl.n	80082fe <_printf_i+0xc2>
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	e002      	b.n	8008304 <_printf_i+0xc8>
 80082fe:	0668      	lsls	r0, r5, #25
 8008300:	d5fb      	bpl.n	80082fa <_printf_i+0xbe>
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	4854      	ldr	r0, [pc, #336]	; (8008458 <_printf_i+0x21c>)
 8008306:	296f      	cmp	r1, #111	; 0x6f
 8008308:	bf14      	ite	ne
 800830a:	220a      	movne	r2, #10
 800830c:	2208      	moveq	r2, #8
 800830e:	2100      	movs	r1, #0
 8008310:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008314:	6865      	ldr	r5, [r4, #4]
 8008316:	60a5      	str	r5, [r4, #8]
 8008318:	2d00      	cmp	r5, #0
 800831a:	f2c0 8095 	blt.w	8008448 <_printf_i+0x20c>
 800831e:	6821      	ldr	r1, [r4, #0]
 8008320:	f021 0104 	bic.w	r1, r1, #4
 8008324:	6021      	str	r1, [r4, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d13d      	bne.n	80083a6 <_printf_i+0x16a>
 800832a:	2d00      	cmp	r5, #0
 800832c:	f040 808e 	bne.w	800844c <_printf_i+0x210>
 8008330:	4665      	mov	r5, ip
 8008332:	2a08      	cmp	r2, #8
 8008334:	d10b      	bne.n	800834e <_printf_i+0x112>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	07db      	lsls	r3, r3, #31
 800833a:	d508      	bpl.n	800834e <_printf_i+0x112>
 800833c:	6923      	ldr	r3, [r4, #16]
 800833e:	6862      	ldr	r2, [r4, #4]
 8008340:	429a      	cmp	r2, r3
 8008342:	bfde      	ittt	le
 8008344:	2330      	movle	r3, #48	; 0x30
 8008346:	f805 3c01 	strble.w	r3, [r5, #-1]
 800834a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800834e:	ebac 0305 	sub.w	r3, ip, r5
 8008352:	6123      	str	r3, [r4, #16]
 8008354:	f8cd 8000 	str.w	r8, [sp]
 8008358:	463b      	mov	r3, r7
 800835a:	aa03      	add	r2, sp, #12
 800835c:	4621      	mov	r1, r4
 800835e:	4630      	mov	r0, r6
 8008360:	f7ff fef6 	bl	8008150 <_printf_common>
 8008364:	3001      	adds	r0, #1
 8008366:	d14d      	bne.n	8008404 <_printf_i+0x1c8>
 8008368:	f04f 30ff 	mov.w	r0, #4294967295
 800836c:	b005      	add	sp, #20
 800836e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008372:	4839      	ldr	r0, [pc, #228]	; (8008458 <_printf_i+0x21c>)
 8008374:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008378:	6813      	ldr	r3, [r2, #0]
 800837a:	6821      	ldr	r1, [r4, #0]
 800837c:	1d1d      	adds	r5, r3, #4
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6015      	str	r5, [r2, #0]
 8008382:	060a      	lsls	r2, r1, #24
 8008384:	d50b      	bpl.n	800839e <_printf_i+0x162>
 8008386:	07ca      	lsls	r2, r1, #31
 8008388:	bf44      	itt	mi
 800838a:	f041 0120 	orrmi.w	r1, r1, #32
 800838e:	6021      	strmi	r1, [r4, #0]
 8008390:	b91b      	cbnz	r3, 800839a <_printf_i+0x15e>
 8008392:	6822      	ldr	r2, [r4, #0]
 8008394:	f022 0220 	bic.w	r2, r2, #32
 8008398:	6022      	str	r2, [r4, #0]
 800839a:	2210      	movs	r2, #16
 800839c:	e7b7      	b.n	800830e <_printf_i+0xd2>
 800839e:	064d      	lsls	r5, r1, #25
 80083a0:	bf48      	it	mi
 80083a2:	b29b      	uxthmi	r3, r3
 80083a4:	e7ef      	b.n	8008386 <_printf_i+0x14a>
 80083a6:	4665      	mov	r5, ip
 80083a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80083ac:	fb02 3311 	mls	r3, r2, r1, r3
 80083b0:	5cc3      	ldrb	r3, [r0, r3]
 80083b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80083b6:	460b      	mov	r3, r1
 80083b8:	2900      	cmp	r1, #0
 80083ba:	d1f5      	bne.n	80083a8 <_printf_i+0x16c>
 80083bc:	e7b9      	b.n	8008332 <_printf_i+0xf6>
 80083be:	6813      	ldr	r3, [r2, #0]
 80083c0:	6825      	ldr	r5, [r4, #0]
 80083c2:	6961      	ldr	r1, [r4, #20]
 80083c4:	1d18      	adds	r0, r3, #4
 80083c6:	6010      	str	r0, [r2, #0]
 80083c8:	0628      	lsls	r0, r5, #24
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	d501      	bpl.n	80083d2 <_printf_i+0x196>
 80083ce:	6019      	str	r1, [r3, #0]
 80083d0:	e002      	b.n	80083d8 <_printf_i+0x19c>
 80083d2:	066a      	lsls	r2, r5, #25
 80083d4:	d5fb      	bpl.n	80083ce <_printf_i+0x192>
 80083d6:	8019      	strh	r1, [r3, #0]
 80083d8:	2300      	movs	r3, #0
 80083da:	6123      	str	r3, [r4, #16]
 80083dc:	4665      	mov	r5, ip
 80083de:	e7b9      	b.n	8008354 <_printf_i+0x118>
 80083e0:	6813      	ldr	r3, [r2, #0]
 80083e2:	1d19      	adds	r1, r3, #4
 80083e4:	6011      	str	r1, [r2, #0]
 80083e6:	681d      	ldr	r5, [r3, #0]
 80083e8:	6862      	ldr	r2, [r4, #4]
 80083ea:	2100      	movs	r1, #0
 80083ec:	4628      	mov	r0, r5
 80083ee:	f7f7 ff77 	bl	80002e0 <memchr>
 80083f2:	b108      	cbz	r0, 80083f8 <_printf_i+0x1bc>
 80083f4:	1b40      	subs	r0, r0, r5
 80083f6:	6060      	str	r0, [r4, #4]
 80083f8:	6863      	ldr	r3, [r4, #4]
 80083fa:	6123      	str	r3, [r4, #16]
 80083fc:	2300      	movs	r3, #0
 80083fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008402:	e7a7      	b.n	8008354 <_printf_i+0x118>
 8008404:	6923      	ldr	r3, [r4, #16]
 8008406:	462a      	mov	r2, r5
 8008408:	4639      	mov	r1, r7
 800840a:	4630      	mov	r0, r6
 800840c:	47c0      	blx	r8
 800840e:	3001      	adds	r0, #1
 8008410:	d0aa      	beq.n	8008368 <_printf_i+0x12c>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	079b      	lsls	r3, r3, #30
 8008416:	d413      	bmi.n	8008440 <_printf_i+0x204>
 8008418:	68e0      	ldr	r0, [r4, #12]
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	4298      	cmp	r0, r3
 800841e:	bfb8      	it	lt
 8008420:	4618      	movlt	r0, r3
 8008422:	e7a3      	b.n	800836c <_printf_i+0x130>
 8008424:	2301      	movs	r3, #1
 8008426:	464a      	mov	r2, r9
 8008428:	4639      	mov	r1, r7
 800842a:	4630      	mov	r0, r6
 800842c:	47c0      	blx	r8
 800842e:	3001      	adds	r0, #1
 8008430:	d09a      	beq.n	8008368 <_printf_i+0x12c>
 8008432:	3501      	adds	r5, #1
 8008434:	68e3      	ldr	r3, [r4, #12]
 8008436:	9a03      	ldr	r2, [sp, #12]
 8008438:	1a9b      	subs	r3, r3, r2
 800843a:	42ab      	cmp	r3, r5
 800843c:	dcf2      	bgt.n	8008424 <_printf_i+0x1e8>
 800843e:	e7eb      	b.n	8008418 <_printf_i+0x1dc>
 8008440:	2500      	movs	r5, #0
 8008442:	f104 0919 	add.w	r9, r4, #25
 8008446:	e7f5      	b.n	8008434 <_printf_i+0x1f8>
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1ac      	bne.n	80083a6 <_printf_i+0x16a>
 800844c:	7803      	ldrb	r3, [r0, #0]
 800844e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008452:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008456:	e76c      	b.n	8008332 <_printf_i+0xf6>
 8008458:	08008af9 	.word	0x08008af9
 800845c:	08008b0a 	.word	0x08008b0a

08008460 <_sbrk_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	4c06      	ldr	r4, [pc, #24]	; (800847c <_sbrk_r+0x1c>)
 8008464:	2300      	movs	r3, #0
 8008466:	4605      	mov	r5, r0
 8008468:	4608      	mov	r0, r1
 800846a:	6023      	str	r3, [r4, #0]
 800846c:	f7f8 feb8 	bl	80011e0 <_sbrk>
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	d102      	bne.n	800847a <_sbrk_r+0x1a>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	b103      	cbz	r3, 800847a <_sbrk_r+0x1a>
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	bd38      	pop	{r3, r4, r5, pc}
 800847c:	200005a0 	.word	0x200005a0

08008480 <__sread>:
 8008480:	b510      	push	{r4, lr}
 8008482:	460c      	mov	r4, r1
 8008484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008488:	f000 fa96 	bl	80089b8 <_read_r>
 800848c:	2800      	cmp	r0, #0
 800848e:	bfab      	itete	ge
 8008490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008492:	89a3      	ldrhlt	r3, [r4, #12]
 8008494:	181b      	addge	r3, r3, r0
 8008496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800849a:	bfac      	ite	ge
 800849c:	6563      	strge	r3, [r4, #84]	; 0x54
 800849e:	81a3      	strhlt	r3, [r4, #12]
 80084a0:	bd10      	pop	{r4, pc}

080084a2 <__swrite>:
 80084a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a6:	461f      	mov	r7, r3
 80084a8:	898b      	ldrh	r3, [r1, #12]
 80084aa:	05db      	lsls	r3, r3, #23
 80084ac:	4605      	mov	r5, r0
 80084ae:	460c      	mov	r4, r1
 80084b0:	4616      	mov	r6, r2
 80084b2:	d505      	bpl.n	80084c0 <__swrite+0x1e>
 80084b4:	2302      	movs	r3, #2
 80084b6:	2200      	movs	r2, #0
 80084b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084bc:	f000 f9b6 	bl	800882c <_lseek_r>
 80084c0:	89a3      	ldrh	r3, [r4, #12]
 80084c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084ca:	81a3      	strh	r3, [r4, #12]
 80084cc:	4632      	mov	r2, r6
 80084ce:	463b      	mov	r3, r7
 80084d0:	4628      	mov	r0, r5
 80084d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084d6:	f000 b869 	b.w	80085ac <_write_r>

080084da <__sseek>:
 80084da:	b510      	push	{r4, lr}
 80084dc:	460c      	mov	r4, r1
 80084de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e2:	f000 f9a3 	bl	800882c <_lseek_r>
 80084e6:	1c43      	adds	r3, r0, #1
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	bf15      	itete	ne
 80084ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80084ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084f6:	81a3      	strheq	r3, [r4, #12]
 80084f8:	bf18      	it	ne
 80084fa:	81a3      	strhne	r3, [r4, #12]
 80084fc:	bd10      	pop	{r4, pc}

080084fe <__sclose>:
 80084fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008502:	f000 b8d3 	b.w	80086ac <_close_r>
	...

08008508 <__swbuf_r>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	460e      	mov	r6, r1
 800850c:	4614      	mov	r4, r2
 800850e:	4605      	mov	r5, r0
 8008510:	b118      	cbz	r0, 800851a <__swbuf_r+0x12>
 8008512:	6983      	ldr	r3, [r0, #24]
 8008514:	b90b      	cbnz	r3, 800851a <__swbuf_r+0x12>
 8008516:	f7ff fbf7 	bl	8007d08 <__sinit>
 800851a:	4b21      	ldr	r3, [pc, #132]	; (80085a0 <__swbuf_r+0x98>)
 800851c:	429c      	cmp	r4, r3
 800851e:	d12a      	bne.n	8008576 <__swbuf_r+0x6e>
 8008520:	686c      	ldr	r4, [r5, #4]
 8008522:	69a3      	ldr	r3, [r4, #24]
 8008524:	60a3      	str	r3, [r4, #8]
 8008526:	89a3      	ldrh	r3, [r4, #12]
 8008528:	071a      	lsls	r2, r3, #28
 800852a:	d52e      	bpl.n	800858a <__swbuf_r+0x82>
 800852c:	6923      	ldr	r3, [r4, #16]
 800852e:	b363      	cbz	r3, 800858a <__swbuf_r+0x82>
 8008530:	6923      	ldr	r3, [r4, #16]
 8008532:	6820      	ldr	r0, [r4, #0]
 8008534:	1ac0      	subs	r0, r0, r3
 8008536:	6963      	ldr	r3, [r4, #20]
 8008538:	b2f6      	uxtb	r6, r6
 800853a:	4283      	cmp	r3, r0
 800853c:	4637      	mov	r7, r6
 800853e:	dc04      	bgt.n	800854a <__swbuf_r+0x42>
 8008540:	4621      	mov	r1, r4
 8008542:	4628      	mov	r0, r5
 8008544:	f000 f948 	bl	80087d8 <_fflush_r>
 8008548:	bb28      	cbnz	r0, 8008596 <__swbuf_r+0x8e>
 800854a:	68a3      	ldr	r3, [r4, #8]
 800854c:	3b01      	subs	r3, #1
 800854e:	60a3      	str	r3, [r4, #8]
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	1c5a      	adds	r2, r3, #1
 8008554:	6022      	str	r2, [r4, #0]
 8008556:	701e      	strb	r6, [r3, #0]
 8008558:	6963      	ldr	r3, [r4, #20]
 800855a:	3001      	adds	r0, #1
 800855c:	4283      	cmp	r3, r0
 800855e:	d004      	beq.n	800856a <__swbuf_r+0x62>
 8008560:	89a3      	ldrh	r3, [r4, #12]
 8008562:	07db      	lsls	r3, r3, #31
 8008564:	d519      	bpl.n	800859a <__swbuf_r+0x92>
 8008566:	2e0a      	cmp	r6, #10
 8008568:	d117      	bne.n	800859a <__swbuf_r+0x92>
 800856a:	4621      	mov	r1, r4
 800856c:	4628      	mov	r0, r5
 800856e:	f000 f933 	bl	80087d8 <_fflush_r>
 8008572:	b190      	cbz	r0, 800859a <__swbuf_r+0x92>
 8008574:	e00f      	b.n	8008596 <__swbuf_r+0x8e>
 8008576:	4b0b      	ldr	r3, [pc, #44]	; (80085a4 <__swbuf_r+0x9c>)
 8008578:	429c      	cmp	r4, r3
 800857a:	d101      	bne.n	8008580 <__swbuf_r+0x78>
 800857c:	68ac      	ldr	r4, [r5, #8]
 800857e:	e7d0      	b.n	8008522 <__swbuf_r+0x1a>
 8008580:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <__swbuf_r+0xa0>)
 8008582:	429c      	cmp	r4, r3
 8008584:	bf08      	it	eq
 8008586:	68ec      	ldreq	r4, [r5, #12]
 8008588:	e7cb      	b.n	8008522 <__swbuf_r+0x1a>
 800858a:	4621      	mov	r1, r4
 800858c:	4628      	mov	r0, r5
 800858e:	f000 f81f 	bl	80085d0 <__swsetup_r>
 8008592:	2800      	cmp	r0, #0
 8008594:	d0cc      	beq.n	8008530 <__swbuf_r+0x28>
 8008596:	f04f 37ff 	mov.w	r7, #4294967295
 800859a:	4638      	mov	r0, r7
 800859c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800859e:	bf00      	nop
 80085a0:	08008aa8 	.word	0x08008aa8
 80085a4:	08008ac8 	.word	0x08008ac8
 80085a8:	08008a88 	.word	0x08008a88

080085ac <_write_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	4c07      	ldr	r4, [pc, #28]	; (80085cc <_write_r+0x20>)
 80085b0:	4605      	mov	r5, r0
 80085b2:	4608      	mov	r0, r1
 80085b4:	4611      	mov	r1, r2
 80085b6:	2200      	movs	r2, #0
 80085b8:	6022      	str	r2, [r4, #0]
 80085ba:	461a      	mov	r2, r3
 80085bc:	f7f8 f8fa 	bl	80007b4 <_write>
 80085c0:	1c43      	adds	r3, r0, #1
 80085c2:	d102      	bne.n	80085ca <_write_r+0x1e>
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	b103      	cbz	r3, 80085ca <_write_r+0x1e>
 80085c8:	602b      	str	r3, [r5, #0]
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	200005a0 	.word	0x200005a0

080085d0 <__swsetup_r>:
 80085d0:	4b32      	ldr	r3, [pc, #200]	; (800869c <__swsetup_r+0xcc>)
 80085d2:	b570      	push	{r4, r5, r6, lr}
 80085d4:	681d      	ldr	r5, [r3, #0]
 80085d6:	4606      	mov	r6, r0
 80085d8:	460c      	mov	r4, r1
 80085da:	b125      	cbz	r5, 80085e6 <__swsetup_r+0x16>
 80085dc:	69ab      	ldr	r3, [r5, #24]
 80085de:	b913      	cbnz	r3, 80085e6 <__swsetup_r+0x16>
 80085e0:	4628      	mov	r0, r5
 80085e2:	f7ff fb91 	bl	8007d08 <__sinit>
 80085e6:	4b2e      	ldr	r3, [pc, #184]	; (80086a0 <__swsetup_r+0xd0>)
 80085e8:	429c      	cmp	r4, r3
 80085ea:	d10f      	bne.n	800860c <__swsetup_r+0x3c>
 80085ec:	686c      	ldr	r4, [r5, #4]
 80085ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	0715      	lsls	r5, r2, #28
 80085f6:	d42c      	bmi.n	8008652 <__swsetup_r+0x82>
 80085f8:	06d0      	lsls	r0, r2, #27
 80085fa:	d411      	bmi.n	8008620 <__swsetup_r+0x50>
 80085fc:	2209      	movs	r2, #9
 80085fe:	6032      	str	r2, [r6, #0]
 8008600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008604:	81a3      	strh	r3, [r4, #12]
 8008606:	f04f 30ff 	mov.w	r0, #4294967295
 800860a:	e03e      	b.n	800868a <__swsetup_r+0xba>
 800860c:	4b25      	ldr	r3, [pc, #148]	; (80086a4 <__swsetup_r+0xd4>)
 800860e:	429c      	cmp	r4, r3
 8008610:	d101      	bne.n	8008616 <__swsetup_r+0x46>
 8008612:	68ac      	ldr	r4, [r5, #8]
 8008614:	e7eb      	b.n	80085ee <__swsetup_r+0x1e>
 8008616:	4b24      	ldr	r3, [pc, #144]	; (80086a8 <__swsetup_r+0xd8>)
 8008618:	429c      	cmp	r4, r3
 800861a:	bf08      	it	eq
 800861c:	68ec      	ldreq	r4, [r5, #12]
 800861e:	e7e6      	b.n	80085ee <__swsetup_r+0x1e>
 8008620:	0751      	lsls	r1, r2, #29
 8008622:	d512      	bpl.n	800864a <__swsetup_r+0x7a>
 8008624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008626:	b141      	cbz	r1, 800863a <__swsetup_r+0x6a>
 8008628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800862c:	4299      	cmp	r1, r3
 800862e:	d002      	beq.n	8008636 <__swsetup_r+0x66>
 8008630:	4630      	mov	r0, r6
 8008632:	f000 f973 	bl	800891c <_free_r>
 8008636:	2300      	movs	r3, #0
 8008638:	6363      	str	r3, [r4, #52]	; 0x34
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008640:	81a3      	strh	r3, [r4, #12]
 8008642:	2300      	movs	r3, #0
 8008644:	6063      	str	r3, [r4, #4]
 8008646:	6923      	ldr	r3, [r4, #16]
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	f043 0308 	orr.w	r3, r3, #8
 8008650:	81a3      	strh	r3, [r4, #12]
 8008652:	6923      	ldr	r3, [r4, #16]
 8008654:	b94b      	cbnz	r3, 800866a <__swsetup_r+0x9a>
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800865c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008660:	d003      	beq.n	800866a <__swsetup_r+0x9a>
 8008662:	4621      	mov	r1, r4
 8008664:	4630      	mov	r0, r6
 8008666:	f000 f917 	bl	8008898 <__smakebuf_r>
 800866a:	89a2      	ldrh	r2, [r4, #12]
 800866c:	f012 0301 	ands.w	r3, r2, #1
 8008670:	d00c      	beq.n	800868c <__swsetup_r+0xbc>
 8008672:	2300      	movs	r3, #0
 8008674:	60a3      	str	r3, [r4, #8]
 8008676:	6963      	ldr	r3, [r4, #20]
 8008678:	425b      	negs	r3, r3
 800867a:	61a3      	str	r3, [r4, #24]
 800867c:	6923      	ldr	r3, [r4, #16]
 800867e:	b953      	cbnz	r3, 8008696 <__swsetup_r+0xc6>
 8008680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008684:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008688:	d1ba      	bne.n	8008600 <__swsetup_r+0x30>
 800868a:	bd70      	pop	{r4, r5, r6, pc}
 800868c:	0792      	lsls	r2, r2, #30
 800868e:	bf58      	it	pl
 8008690:	6963      	ldrpl	r3, [r4, #20]
 8008692:	60a3      	str	r3, [r4, #8]
 8008694:	e7f2      	b.n	800867c <__swsetup_r+0xac>
 8008696:	2000      	movs	r0, #0
 8008698:	e7f7      	b.n	800868a <__swsetup_r+0xba>
 800869a:	bf00      	nop
 800869c:	20000010 	.word	0x20000010
 80086a0:	08008aa8 	.word	0x08008aa8
 80086a4:	08008ac8 	.word	0x08008ac8
 80086a8:	08008a88 	.word	0x08008a88

080086ac <_close_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4c06      	ldr	r4, [pc, #24]	; (80086c8 <_close_r+0x1c>)
 80086b0:	2300      	movs	r3, #0
 80086b2:	4605      	mov	r5, r0
 80086b4:	4608      	mov	r0, r1
 80086b6:	6023      	str	r3, [r4, #0]
 80086b8:	f7f8 fd5d 	bl	8001176 <_close>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	d102      	bne.n	80086c6 <_close_r+0x1a>
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	b103      	cbz	r3, 80086c6 <_close_r+0x1a>
 80086c4:	602b      	str	r3, [r5, #0]
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	200005a0 	.word	0x200005a0

080086cc <__sflush_r>:
 80086cc:	898a      	ldrh	r2, [r1, #12]
 80086ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d2:	4605      	mov	r5, r0
 80086d4:	0710      	lsls	r0, r2, #28
 80086d6:	460c      	mov	r4, r1
 80086d8:	d458      	bmi.n	800878c <__sflush_r+0xc0>
 80086da:	684b      	ldr	r3, [r1, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	dc05      	bgt.n	80086ec <__sflush_r+0x20>
 80086e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	dc02      	bgt.n	80086ec <__sflush_r+0x20>
 80086e6:	2000      	movs	r0, #0
 80086e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086ee:	2e00      	cmp	r6, #0
 80086f0:	d0f9      	beq.n	80086e6 <__sflush_r+0x1a>
 80086f2:	2300      	movs	r3, #0
 80086f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086f8:	682f      	ldr	r7, [r5, #0]
 80086fa:	6a21      	ldr	r1, [r4, #32]
 80086fc:	602b      	str	r3, [r5, #0]
 80086fe:	d032      	beq.n	8008766 <__sflush_r+0x9a>
 8008700:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008702:	89a3      	ldrh	r3, [r4, #12]
 8008704:	075a      	lsls	r2, r3, #29
 8008706:	d505      	bpl.n	8008714 <__sflush_r+0x48>
 8008708:	6863      	ldr	r3, [r4, #4]
 800870a:	1ac0      	subs	r0, r0, r3
 800870c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800870e:	b10b      	cbz	r3, 8008714 <__sflush_r+0x48>
 8008710:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008712:	1ac0      	subs	r0, r0, r3
 8008714:	2300      	movs	r3, #0
 8008716:	4602      	mov	r2, r0
 8008718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800871a:	6a21      	ldr	r1, [r4, #32]
 800871c:	4628      	mov	r0, r5
 800871e:	47b0      	blx	r6
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	d106      	bne.n	8008734 <__sflush_r+0x68>
 8008726:	6829      	ldr	r1, [r5, #0]
 8008728:	291d      	cmp	r1, #29
 800872a:	d848      	bhi.n	80087be <__sflush_r+0xf2>
 800872c:	4a29      	ldr	r2, [pc, #164]	; (80087d4 <__sflush_r+0x108>)
 800872e:	40ca      	lsrs	r2, r1
 8008730:	07d6      	lsls	r6, r2, #31
 8008732:	d544      	bpl.n	80087be <__sflush_r+0xf2>
 8008734:	2200      	movs	r2, #0
 8008736:	6062      	str	r2, [r4, #4]
 8008738:	04d9      	lsls	r1, r3, #19
 800873a:	6922      	ldr	r2, [r4, #16]
 800873c:	6022      	str	r2, [r4, #0]
 800873e:	d504      	bpl.n	800874a <__sflush_r+0x7e>
 8008740:	1c42      	adds	r2, r0, #1
 8008742:	d101      	bne.n	8008748 <__sflush_r+0x7c>
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	b903      	cbnz	r3, 800874a <__sflush_r+0x7e>
 8008748:	6560      	str	r0, [r4, #84]	; 0x54
 800874a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800874c:	602f      	str	r7, [r5, #0]
 800874e:	2900      	cmp	r1, #0
 8008750:	d0c9      	beq.n	80086e6 <__sflush_r+0x1a>
 8008752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008756:	4299      	cmp	r1, r3
 8008758:	d002      	beq.n	8008760 <__sflush_r+0x94>
 800875a:	4628      	mov	r0, r5
 800875c:	f000 f8de 	bl	800891c <_free_r>
 8008760:	2000      	movs	r0, #0
 8008762:	6360      	str	r0, [r4, #52]	; 0x34
 8008764:	e7c0      	b.n	80086e8 <__sflush_r+0x1c>
 8008766:	2301      	movs	r3, #1
 8008768:	4628      	mov	r0, r5
 800876a:	47b0      	blx	r6
 800876c:	1c41      	adds	r1, r0, #1
 800876e:	d1c8      	bne.n	8008702 <__sflush_r+0x36>
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0c5      	beq.n	8008702 <__sflush_r+0x36>
 8008776:	2b1d      	cmp	r3, #29
 8008778:	d001      	beq.n	800877e <__sflush_r+0xb2>
 800877a:	2b16      	cmp	r3, #22
 800877c:	d101      	bne.n	8008782 <__sflush_r+0xb6>
 800877e:	602f      	str	r7, [r5, #0]
 8008780:	e7b1      	b.n	80086e6 <__sflush_r+0x1a>
 8008782:	89a3      	ldrh	r3, [r4, #12]
 8008784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008788:	81a3      	strh	r3, [r4, #12]
 800878a:	e7ad      	b.n	80086e8 <__sflush_r+0x1c>
 800878c:	690f      	ldr	r7, [r1, #16]
 800878e:	2f00      	cmp	r7, #0
 8008790:	d0a9      	beq.n	80086e6 <__sflush_r+0x1a>
 8008792:	0793      	lsls	r3, r2, #30
 8008794:	680e      	ldr	r6, [r1, #0]
 8008796:	bf08      	it	eq
 8008798:	694b      	ldreq	r3, [r1, #20]
 800879a:	600f      	str	r7, [r1, #0]
 800879c:	bf18      	it	ne
 800879e:	2300      	movne	r3, #0
 80087a0:	eba6 0807 	sub.w	r8, r6, r7
 80087a4:	608b      	str	r3, [r1, #8]
 80087a6:	f1b8 0f00 	cmp.w	r8, #0
 80087aa:	dd9c      	ble.n	80086e6 <__sflush_r+0x1a>
 80087ac:	4643      	mov	r3, r8
 80087ae:	463a      	mov	r2, r7
 80087b0:	6a21      	ldr	r1, [r4, #32]
 80087b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087b4:	4628      	mov	r0, r5
 80087b6:	47b0      	blx	r6
 80087b8:	2800      	cmp	r0, #0
 80087ba:	dc06      	bgt.n	80087ca <__sflush_r+0xfe>
 80087bc:	89a3      	ldrh	r3, [r4, #12]
 80087be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087c2:	81a3      	strh	r3, [r4, #12]
 80087c4:	f04f 30ff 	mov.w	r0, #4294967295
 80087c8:	e78e      	b.n	80086e8 <__sflush_r+0x1c>
 80087ca:	4407      	add	r7, r0
 80087cc:	eba8 0800 	sub.w	r8, r8, r0
 80087d0:	e7e9      	b.n	80087a6 <__sflush_r+0xda>
 80087d2:	bf00      	nop
 80087d4:	20400001 	.word	0x20400001

080087d8 <_fflush_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	690b      	ldr	r3, [r1, #16]
 80087dc:	4605      	mov	r5, r0
 80087de:	460c      	mov	r4, r1
 80087e0:	b1db      	cbz	r3, 800881a <_fflush_r+0x42>
 80087e2:	b118      	cbz	r0, 80087ec <_fflush_r+0x14>
 80087e4:	6983      	ldr	r3, [r0, #24]
 80087e6:	b90b      	cbnz	r3, 80087ec <_fflush_r+0x14>
 80087e8:	f7ff fa8e 	bl	8007d08 <__sinit>
 80087ec:	4b0c      	ldr	r3, [pc, #48]	; (8008820 <_fflush_r+0x48>)
 80087ee:	429c      	cmp	r4, r3
 80087f0:	d109      	bne.n	8008806 <_fflush_r+0x2e>
 80087f2:	686c      	ldr	r4, [r5, #4]
 80087f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087f8:	b17b      	cbz	r3, 800881a <_fflush_r+0x42>
 80087fa:	4621      	mov	r1, r4
 80087fc:	4628      	mov	r0, r5
 80087fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008802:	f7ff bf63 	b.w	80086cc <__sflush_r>
 8008806:	4b07      	ldr	r3, [pc, #28]	; (8008824 <_fflush_r+0x4c>)
 8008808:	429c      	cmp	r4, r3
 800880a:	d101      	bne.n	8008810 <_fflush_r+0x38>
 800880c:	68ac      	ldr	r4, [r5, #8]
 800880e:	e7f1      	b.n	80087f4 <_fflush_r+0x1c>
 8008810:	4b05      	ldr	r3, [pc, #20]	; (8008828 <_fflush_r+0x50>)
 8008812:	429c      	cmp	r4, r3
 8008814:	bf08      	it	eq
 8008816:	68ec      	ldreq	r4, [r5, #12]
 8008818:	e7ec      	b.n	80087f4 <_fflush_r+0x1c>
 800881a:	2000      	movs	r0, #0
 800881c:	bd38      	pop	{r3, r4, r5, pc}
 800881e:	bf00      	nop
 8008820:	08008aa8 	.word	0x08008aa8
 8008824:	08008ac8 	.word	0x08008ac8
 8008828:	08008a88 	.word	0x08008a88

0800882c <_lseek_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4c07      	ldr	r4, [pc, #28]	; (800884c <_lseek_r+0x20>)
 8008830:	4605      	mov	r5, r0
 8008832:	4608      	mov	r0, r1
 8008834:	4611      	mov	r1, r2
 8008836:	2200      	movs	r2, #0
 8008838:	6022      	str	r2, [r4, #0]
 800883a:	461a      	mov	r2, r3
 800883c:	f7f8 fcc2 	bl	80011c4 <_lseek>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d102      	bne.n	800884a <_lseek_r+0x1e>
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	b103      	cbz	r3, 800884a <_lseek_r+0x1e>
 8008848:	602b      	str	r3, [r5, #0]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	200005a0 	.word	0x200005a0

08008850 <__swhatbuf_r>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	460e      	mov	r6, r1
 8008854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008858:	2900      	cmp	r1, #0
 800885a:	b096      	sub	sp, #88	; 0x58
 800885c:	4614      	mov	r4, r2
 800885e:	461d      	mov	r5, r3
 8008860:	da07      	bge.n	8008872 <__swhatbuf_r+0x22>
 8008862:	2300      	movs	r3, #0
 8008864:	602b      	str	r3, [r5, #0]
 8008866:	89b3      	ldrh	r3, [r6, #12]
 8008868:	061a      	lsls	r2, r3, #24
 800886a:	d410      	bmi.n	800888e <__swhatbuf_r+0x3e>
 800886c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008870:	e00e      	b.n	8008890 <__swhatbuf_r+0x40>
 8008872:	466a      	mov	r2, sp
 8008874:	f000 f8b2 	bl	80089dc <_fstat_r>
 8008878:	2800      	cmp	r0, #0
 800887a:	dbf2      	blt.n	8008862 <__swhatbuf_r+0x12>
 800887c:	9a01      	ldr	r2, [sp, #4]
 800887e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008882:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008886:	425a      	negs	r2, r3
 8008888:	415a      	adcs	r2, r3
 800888a:	602a      	str	r2, [r5, #0]
 800888c:	e7ee      	b.n	800886c <__swhatbuf_r+0x1c>
 800888e:	2340      	movs	r3, #64	; 0x40
 8008890:	2000      	movs	r0, #0
 8008892:	6023      	str	r3, [r4, #0]
 8008894:	b016      	add	sp, #88	; 0x58
 8008896:	bd70      	pop	{r4, r5, r6, pc}

08008898 <__smakebuf_r>:
 8008898:	898b      	ldrh	r3, [r1, #12]
 800889a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800889c:	079d      	lsls	r5, r3, #30
 800889e:	4606      	mov	r6, r0
 80088a0:	460c      	mov	r4, r1
 80088a2:	d507      	bpl.n	80088b4 <__smakebuf_r+0x1c>
 80088a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	6123      	str	r3, [r4, #16]
 80088ac:	2301      	movs	r3, #1
 80088ae:	6163      	str	r3, [r4, #20]
 80088b0:	b002      	add	sp, #8
 80088b2:	bd70      	pop	{r4, r5, r6, pc}
 80088b4:	ab01      	add	r3, sp, #4
 80088b6:	466a      	mov	r2, sp
 80088b8:	f7ff ffca 	bl	8008850 <__swhatbuf_r>
 80088bc:	9900      	ldr	r1, [sp, #0]
 80088be:	4605      	mov	r5, r0
 80088c0:	4630      	mov	r0, r6
 80088c2:	f7ff faab 	bl	8007e1c <_malloc_r>
 80088c6:	b948      	cbnz	r0, 80088dc <__smakebuf_r+0x44>
 80088c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088cc:	059a      	lsls	r2, r3, #22
 80088ce:	d4ef      	bmi.n	80088b0 <__smakebuf_r+0x18>
 80088d0:	f023 0303 	bic.w	r3, r3, #3
 80088d4:	f043 0302 	orr.w	r3, r3, #2
 80088d8:	81a3      	strh	r3, [r4, #12]
 80088da:	e7e3      	b.n	80088a4 <__smakebuf_r+0xc>
 80088dc:	4b0d      	ldr	r3, [pc, #52]	; (8008914 <__smakebuf_r+0x7c>)
 80088de:	62b3      	str	r3, [r6, #40]	; 0x28
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	6020      	str	r0, [r4, #0]
 80088e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e8:	81a3      	strh	r3, [r4, #12]
 80088ea:	9b00      	ldr	r3, [sp, #0]
 80088ec:	6163      	str	r3, [r4, #20]
 80088ee:	9b01      	ldr	r3, [sp, #4]
 80088f0:	6120      	str	r0, [r4, #16]
 80088f2:	b15b      	cbz	r3, 800890c <__smakebuf_r+0x74>
 80088f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088f8:	4630      	mov	r0, r6
 80088fa:	f000 f881 	bl	8008a00 <_isatty_r>
 80088fe:	b128      	cbz	r0, 800890c <__smakebuf_r+0x74>
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	f023 0303 	bic.w	r3, r3, #3
 8008906:	f043 0301 	orr.w	r3, r3, #1
 800890a:	81a3      	strh	r3, [r4, #12]
 800890c:	89a3      	ldrh	r3, [r4, #12]
 800890e:	431d      	orrs	r5, r3
 8008910:	81a5      	strh	r5, [r4, #12]
 8008912:	e7cd      	b.n	80088b0 <__smakebuf_r+0x18>
 8008914:	08007cd1 	.word	0x08007cd1

08008918 <__malloc_lock>:
 8008918:	4770      	bx	lr

0800891a <__malloc_unlock>:
 800891a:	4770      	bx	lr

0800891c <_free_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	4605      	mov	r5, r0
 8008920:	2900      	cmp	r1, #0
 8008922:	d045      	beq.n	80089b0 <_free_r+0x94>
 8008924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008928:	1f0c      	subs	r4, r1, #4
 800892a:	2b00      	cmp	r3, #0
 800892c:	bfb8      	it	lt
 800892e:	18e4      	addlt	r4, r4, r3
 8008930:	f7ff fff2 	bl	8008918 <__malloc_lock>
 8008934:	4a1f      	ldr	r2, [pc, #124]	; (80089b4 <_free_r+0x98>)
 8008936:	6813      	ldr	r3, [r2, #0]
 8008938:	4610      	mov	r0, r2
 800893a:	b933      	cbnz	r3, 800894a <_free_r+0x2e>
 800893c:	6063      	str	r3, [r4, #4]
 800893e:	6014      	str	r4, [r2, #0]
 8008940:	4628      	mov	r0, r5
 8008942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008946:	f7ff bfe8 	b.w	800891a <__malloc_unlock>
 800894a:	42a3      	cmp	r3, r4
 800894c:	d90c      	bls.n	8008968 <_free_r+0x4c>
 800894e:	6821      	ldr	r1, [r4, #0]
 8008950:	1862      	adds	r2, r4, r1
 8008952:	4293      	cmp	r3, r2
 8008954:	bf04      	itt	eq
 8008956:	681a      	ldreq	r2, [r3, #0]
 8008958:	685b      	ldreq	r3, [r3, #4]
 800895a:	6063      	str	r3, [r4, #4]
 800895c:	bf04      	itt	eq
 800895e:	1852      	addeq	r2, r2, r1
 8008960:	6022      	streq	r2, [r4, #0]
 8008962:	6004      	str	r4, [r0, #0]
 8008964:	e7ec      	b.n	8008940 <_free_r+0x24>
 8008966:	4613      	mov	r3, r2
 8008968:	685a      	ldr	r2, [r3, #4]
 800896a:	b10a      	cbz	r2, 8008970 <_free_r+0x54>
 800896c:	42a2      	cmp	r2, r4
 800896e:	d9fa      	bls.n	8008966 <_free_r+0x4a>
 8008970:	6819      	ldr	r1, [r3, #0]
 8008972:	1858      	adds	r0, r3, r1
 8008974:	42a0      	cmp	r0, r4
 8008976:	d10b      	bne.n	8008990 <_free_r+0x74>
 8008978:	6820      	ldr	r0, [r4, #0]
 800897a:	4401      	add	r1, r0
 800897c:	1858      	adds	r0, r3, r1
 800897e:	4282      	cmp	r2, r0
 8008980:	6019      	str	r1, [r3, #0]
 8008982:	d1dd      	bne.n	8008940 <_free_r+0x24>
 8008984:	6810      	ldr	r0, [r2, #0]
 8008986:	6852      	ldr	r2, [r2, #4]
 8008988:	605a      	str	r2, [r3, #4]
 800898a:	4401      	add	r1, r0
 800898c:	6019      	str	r1, [r3, #0]
 800898e:	e7d7      	b.n	8008940 <_free_r+0x24>
 8008990:	d902      	bls.n	8008998 <_free_r+0x7c>
 8008992:	230c      	movs	r3, #12
 8008994:	602b      	str	r3, [r5, #0]
 8008996:	e7d3      	b.n	8008940 <_free_r+0x24>
 8008998:	6820      	ldr	r0, [r4, #0]
 800899a:	1821      	adds	r1, r4, r0
 800899c:	428a      	cmp	r2, r1
 800899e:	bf04      	itt	eq
 80089a0:	6811      	ldreq	r1, [r2, #0]
 80089a2:	6852      	ldreq	r2, [r2, #4]
 80089a4:	6062      	str	r2, [r4, #4]
 80089a6:	bf04      	itt	eq
 80089a8:	1809      	addeq	r1, r1, r0
 80089aa:	6021      	streq	r1, [r4, #0]
 80089ac:	605c      	str	r4, [r3, #4]
 80089ae:	e7c7      	b.n	8008940 <_free_r+0x24>
 80089b0:	bd38      	pop	{r3, r4, r5, pc}
 80089b2:	bf00      	nop
 80089b4:	2000009c 	.word	0x2000009c

080089b8 <_read_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	4c07      	ldr	r4, [pc, #28]	; (80089d8 <_read_r+0x20>)
 80089bc:	4605      	mov	r5, r0
 80089be:	4608      	mov	r0, r1
 80089c0:	4611      	mov	r1, r2
 80089c2:	2200      	movs	r2, #0
 80089c4:	6022      	str	r2, [r4, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	f7f8 fbb8 	bl	800113c <_read>
 80089cc:	1c43      	adds	r3, r0, #1
 80089ce:	d102      	bne.n	80089d6 <_read_r+0x1e>
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	b103      	cbz	r3, 80089d6 <_read_r+0x1e>
 80089d4:	602b      	str	r3, [r5, #0]
 80089d6:	bd38      	pop	{r3, r4, r5, pc}
 80089d8:	200005a0 	.word	0x200005a0

080089dc <_fstat_r>:
 80089dc:	b538      	push	{r3, r4, r5, lr}
 80089de:	4c07      	ldr	r4, [pc, #28]	; (80089fc <_fstat_r+0x20>)
 80089e0:	2300      	movs	r3, #0
 80089e2:	4605      	mov	r5, r0
 80089e4:	4608      	mov	r0, r1
 80089e6:	4611      	mov	r1, r2
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	f7f8 fbd0 	bl	800118e <_fstat>
 80089ee:	1c43      	adds	r3, r0, #1
 80089f0:	d102      	bne.n	80089f8 <_fstat_r+0x1c>
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	b103      	cbz	r3, 80089f8 <_fstat_r+0x1c>
 80089f6:	602b      	str	r3, [r5, #0]
 80089f8:	bd38      	pop	{r3, r4, r5, pc}
 80089fa:	bf00      	nop
 80089fc:	200005a0 	.word	0x200005a0

08008a00 <_isatty_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4c06      	ldr	r4, [pc, #24]	; (8008a1c <_isatty_r+0x1c>)
 8008a04:	2300      	movs	r3, #0
 8008a06:	4605      	mov	r5, r0
 8008a08:	4608      	mov	r0, r1
 8008a0a:	6023      	str	r3, [r4, #0]
 8008a0c:	f7f8 fbcf 	bl	80011ae <_isatty>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d102      	bne.n	8008a1a <_isatty_r+0x1a>
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	b103      	cbz	r3, 8008a1a <_isatty_r+0x1a>
 8008a18:	602b      	str	r3, [r5, #0]
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	200005a0 	.word	0x200005a0

08008a20 <_init>:
 8008a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a22:	bf00      	nop
 8008a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a26:	bc08      	pop	{r3}
 8008a28:	469e      	mov	lr, r3
 8008a2a:	4770      	bx	lr

08008a2c <_fini>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	bf00      	nop
 8008a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a32:	bc08      	pop	{r3}
 8008a34:	469e      	mov	lr, r3
 8008a36:	4770      	bx	lr
