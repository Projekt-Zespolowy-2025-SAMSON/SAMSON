
samson55_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08008a40  08008a40  00018a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008b78  08008b78  00018b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008b80  08008b80  00018b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008b84  08008b84  00018b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08008b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000530  20000074  08008bfc  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200005a4  08008bfc  000205a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021228  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000035a3  00000000  00000000  000412ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001318  00000000  00000000  00044870  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011d0  00000000  00000000  00045b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c8e9  00000000  00000000  00046d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00010455  00000000  00000000  00083641  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0019000c  00000000  00000000  00093a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00223aa2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005868  00000000  00000000  00223b20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008a28 	.word	0x08008a28

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	08008a28 	.word	0x08008a28

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000

080007b4 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3 , ptr , len , 50);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	2332      	movs	r3, #50	; 0x32
 80007c6:	68b9      	ldr	r1, [r7, #8]
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <_write+0x24>)
 80007ca:	f005 fe3b 	bl	8006444 <HAL_UART_Transmit>
    return len;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000a4 	.word	0x200000a4

080007dc <HAL_ADC_ConvCpltCallback>:
{
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
	return ch;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	printf("in ADC_ConvCpltCallback\n\r");
 80007e4:	480b      	ldr	r0, [pc, #44]	; (8000814 <HAL_ADC_ConvCpltCallback+0x38>)
 80007e6:	f007 f9d7 	bl	8007b98 <iprintf>
    if(hadc->Instance == ADC1){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <HAL_ADC_ConvCpltCallback+0x3c>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d10b      	bne.n	800080c <HAL_ADC_ConvCpltCallback+0x30>
    	printf("instance==ADC1\r\n");
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <HAL_ADC_ConvCpltCallback+0x40>)
 80007f6:	f007 fa43 	bl	8007c80 <puts>
        adc_value = HAL_ADC_GetValue(hadc);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f001 fa88 	bl	8001d10 <HAL_ADC_GetValue>
 8000800:	4602      	mov	r2, r0
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <HAL_ADC_ConvCpltCallback+0x44>)
 8000804:	601a      	str	r2, [r3, #0]
        adc_flag = 1;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <HAL_ADC_ConvCpltCallback+0x48>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
    }
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08008a40 	.word	0x08008a40
 8000818:	40022000 	.word	0x40022000
 800081c:	08008a5c 	.word	0x08008a5c
 8000820:	20000090 	.word	0x20000090
 8000824:	20000094 	.word	0x20000094

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800082e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000832:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000834:	bf00      	nop
 8000836:	4b38      	ldr	r3, [pc, #224]	; (8000918 <main+0xf0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800083e:	2b00      	cmp	r3, #0
 8000840:	d004      	beq.n	800084c <main+0x24>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	dcf4      	bgt.n	8000836 <main+0xe>
  if ( timeout < 0 )
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	da01      	bge.n	8000856 <main+0x2e>
  {
  Error_Handler();
 8000852:	f000 fac9 	bl	8000de8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000856:	f000 fcc3 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085a:	f000 f86d 	bl	8000938 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800085e:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <main+0xf0>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	4a2c      	ldr	r2, [pc, #176]	; (8000918 <main+0xf0>)
 8000866:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800086a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800086e:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <main+0xf0>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800087c:	2000      	movs	r0, #0
 800087e:	f002 fd59 	bl	8003334 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000882:	2100      	movs	r1, #0
 8000884:	2000      	movs	r0, #0
 8000886:	f002 fd6f 	bl	8003368 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800088a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800088e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000890:	bf00      	nop
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <main+0xf0>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800089a:	2b00      	cmp	r3, #0
 800089c:	d104      	bne.n	80008a8 <main+0x80>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	1e5a      	subs	r2, r3, #1
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	dcf4      	bgt.n	8000892 <main+0x6a>
if ( timeout < 0 )
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	da01      	bge.n	80008b2 <main+0x8a>
{
Error_Handler();
 80008ae:	f000 fa9b 	bl	8000de8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b2:	f000 fa27 	bl	8000d04 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008b6:	f000 f9a7 	bl	8000c08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008ba:	f000 f9f1 	bl	8000ca0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80008be:	f000 f92b 	bl	8000b18 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
  HAL_Delay(1000);
 80008c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c6:	f000 fd1d 	bl	8001304 <HAL_Delay>
  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK){
 80008ca:	4814      	ldr	r0, [pc, #80]	; (800091c <main+0xf4>)
 80008cc:	f001 f8de 	bl	8001a8c <HAL_ADC_Start_IT>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d002      	beq.n	80008dc <main+0xb4>
	  printf("hal_adc_start_it NOTOK\n\r");
 80008d6:	4812      	ldr	r0, [pc, #72]	; (8000920 <main+0xf8>)
 80008d8:	f007 f95e 	bl	8007b98 <iprintf>
  }
  printf("in main\n\r");
 80008dc:	4811      	ldr	r0, [pc, #68]	; (8000924 <main+0xfc>)
 80008de:	f007 f95b 	bl	8007b98 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80008e2:	2101      	movs	r1, #1
 80008e4:	4810      	ldr	r0, [pc, #64]	; (8000928 <main+0x100>)
 80008e6:	f002 fd0a 	bl	80032fe <HAL_GPIO_TogglePin>
	  if(adc_flag==1){
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <main+0x104>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d10b      	bne.n	800090c <main+0xe4>
		  printf("Zmierzono: %ld\n\r", adc_value);
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <main+0x108>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	480e      	ldr	r0, [pc, #56]	; (8000934 <main+0x10c>)
 80008fc:	f007 f94c 	bl	8007b98 <iprintf>
		  adc_flag=0;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <main+0x104>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc1);
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <main+0xf4>)
 8000908:	f001 f8c0 	bl	8001a8c <HAL_ADC_Start_IT>
	  }
	  HAL_Delay(1000);
 800090c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000910:	f000 fcf8 	bl	8001304 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000914:	e7e5      	b.n	80008e2 <main+0xba>
 8000916:	bf00      	nop
 8000918:	58024400 	.word	0x58024400
 800091c:	20000538 	.word	0x20000538
 8000920:	08008a6c 	.word	0x08008a6c
 8000924:	08008a88 	.word	0x08008a88
 8000928:	58020400 	.word	0x58020400
 800092c:	20000094 	.word	0x20000094
 8000930:	20000090 	.word	0x20000090
 8000934:	08008a94 	.word	0x08008a94

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b0cc      	sub	sp, #304	; 0x130
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000942:	224c      	movs	r2, #76	; 0x4c
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f007 f91e 	bl	8007b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000950:	2220      	movs	r2, #32
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f007 f917 	bl	8007b88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	4618      	mov	r0, r3
 8000960:	23bc      	movs	r3, #188	; 0xbc
 8000962:	461a      	mov	r2, r3
 8000964:	2100      	movs	r1, #0
 8000966:	f007 f90f 	bl	8007b88 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800096a:	2004      	movs	r0, #4
 800096c:	f002 fe58 	bl	8003620 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	4b64      	ldr	r3, [pc, #400]	; (8000b08 <SystemClock_Config+0x1d0>)
 8000978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097a:	4a63      	ldr	r2, [pc, #396]	; (8000b08 <SystemClock_Config+0x1d0>)
 800097c:	f023 0301 	bic.w	r3, r3, #1
 8000980:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000982:	4b61      	ldr	r3, [pc, #388]	; (8000b08 <SystemClock_Config+0x1d0>)
 8000984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000986:	f003 0201 	and.w	r2, r3, #1
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	4b5f      	ldr	r3, [pc, #380]	; (8000b0c <SystemClock_Config+0x1d4>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000996:	4a5d      	ldr	r2, [pc, #372]	; (8000b0c <SystemClock_Config+0x1d4>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6193      	str	r3, [r2, #24]
 800099e:	4b5b      	ldr	r3, [pc, #364]	; (8000b0c <SystemClock_Config+0x1d4>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ae:	bf00      	nop
 80009b0:	4b56      	ldr	r3, [pc, #344]	; (8000b0c <SystemClock_Config+0x1d4>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009bc:	d1f8      	bne.n	80009b0 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009be:	4b54      	ldr	r3, [pc, #336]	; (8000b10 <SystemClock_Config+0x1d8>)
 80009c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c2:	f023 0303 	bic.w	r3, r3, #3
 80009c6:	4a52      	ldr	r2, [pc, #328]	; (8000b10 <SystemClock_Config+0x1d8>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80009ce:	2303      	movs	r3, #3
 80009d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009dc:	2301      	movs	r3, #1
 80009de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e8:	2302      	movs	r3, #2
 80009ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ee:	2302      	movs	r3, #2
 80009f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009fa:	2318      	movs	r3, #24
 80009fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a06:	2304      	movs	r3, #4
 8000a08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a12:	230c      	movs	r3, #12
 8000a14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a24:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fe63 	bl	80036f4 <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000a34:	f000 f9d8 	bl	8000de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a38:	233f      	movs	r3, #63	; 0x3f
 8000a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 fa50 	bl	8003f14 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x146>
  {
    Error_Handler();
 8000a7a:	f000 f9b5 	bl	8000de8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	4a24      	ldr	r2, [pc, #144]	; (8000b14 <SystemClock_Config+0x1dc>)
 8000a84:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	2213      	movs	r2, #19
 8000a94:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2202      	movs	r2, #2
 8000aac:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	22c0      	movs	r2, #192	; 0xc0
 8000ab4:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2220      	movs	r2, #32
 8000abc:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	2200      	movs	r2, #0
 8000acc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fd97 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x1c0>
  {
    Error_Handler();
 8000af4:	f000 f978 	bl	8000de8 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000af8:	f002 fdec 	bl	80036d4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000afc:	bf00      	nop
 8000afe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	58000400 	.word	0x58000400
 8000b0c:	58024800 	.word	0x58024800
 8000b10:	58024400 	.word	0x58024400
 8000b14:	000c0002 	.word	0x000c0002

08000b18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]
 8000b3a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b3e:	4a30      	ldr	r2, [pc, #192]	; (8000c00 <MX_ADC1_Init+0xe8>)
 8000b40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b42:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b48:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b4e:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b54:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b56:	2204      	movs	r2, #4
 8000b58:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b60:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b66:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b98:	4818      	ldr	r0, [pc, #96]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000b9a:	f000 fdd7 	bl	800174c <HAL_ADC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ba4:	f000 f920 	bl	8000de8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4812      	ldr	r0, [pc, #72]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000bb4:	f001 fff0 	bl	8002b98 <HAL_ADCEx_MultiModeConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000bbe:	f000 f913 	bl	8000de8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_ADC1_Init+0xec>)
 8000bc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc6:	2306      	movs	r3, #6
 8000bc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bce:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bd2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_ADC1_Init+0xe4>)
 8000be6:	f001 faef 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000bf0:	f000 f8fa 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000538 	.word	0x20000538
 8000c00:	40022000 	.word	0x40022000
 8000c04:	3ac04000 	.word	0x3ac04000

08000c08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c0c:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c0e:	4a23      	ldr	r2, [pc, #140]	; (8000c9c <MX_USART3_UART_Init+0x94>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c52:	f005 fba7 	bl	80063a4 <HAL_UART_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c5c:	f000 f8c4 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c60:	2100      	movs	r1, #0
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c64:	f006 fbd7 	bl	8007416 <HAL_UARTEx_SetTxFifoThreshold>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c6e:	f000 f8bb 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4808      	ldr	r0, [pc, #32]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c76:	f006 fc0c 	bl	8007492 <HAL_UARTEx_SetRxFifoThreshold>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c80:	f000 f8b2 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c86:	f006 fb8d 	bl	80073a4 <HAL_UARTEx_DisableFifoMode>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c90:	f000 f8aa 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000a4 	.word	0x200000a4
 8000c9c:	40004800 	.word	0x40004800

08000ca0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca6:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cac:	2209      	movs	r2, #9
 8000cae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce8:	f002 fb52 	bl	8003390 <HAL_PCD_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000cf2:	f000 f879 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000130 	.word	0x20000130
 8000d00:	40080000 	.word	0x40080000

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d38:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	4a28      	ldr	r2, [pc, #160]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d48:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7a:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d98:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_GPIO_Init+0xdc>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da8:	f003 0308 	and.w	r3, r3, #8
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2101      	movs	r1, #1
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <MX_GPIO_Init+0xe0>)
 8000db6:	f002 fa89 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_GPIO_Init+0xe0>)
 8000dd2:	f002 f8cb 	bl	8002f6c <HAL_GPIO_Init>

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58020400 	.word	0x58020400

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_MspInit+0x30>)
 8000e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e04:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_MspInit+0x30>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_MspInit+0x30>)
 8000e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	58024400 	.word	0x58024400

08000e2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <HAL_ADC_MspInit+0x90>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d131      	bne.n	8000eb2 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <HAL_ADC_MspInit+0x94>)
 8000e50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e54:	4a1a      	ldr	r2, [pc, #104]	; (8000ec0 <HAL_ADC_MspInit+0x94>)
 8000e56:	f043 0320 	orr.w	r3, r3, #32
 8000e5a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_ADC_MspInit+0x94>)
 8000e60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e64:	f003 0320 	and.w	r3, r3, #32
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_ADC_MspInit+0x94>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <HAL_ADC_MspInit+0x94>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <HAL_ADC_MspInit+0x94>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <HAL_ADC_MspInit+0x98>)
 8000e9e:	f002 f865 	bl	8002f6c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2012      	movs	r0, #18
 8000ea8:	f002 f82b 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000eac:	2012      	movs	r0, #18
 8000eae:	f002 f842 	bl	8002f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40022000 	.word	0x40022000
 8000ec0:	58024400 	.word	0x58024400
 8000ec4:	58020000 	.word	0x58020000

08000ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a1a      	ldr	r2, [pc, #104]	; (8000f50 <HAL_UART_MspInit+0x88>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d12e      	bne.n	8000f48 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HAL_UART_MspInit+0x8c>)
 8000eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ef0:	4a18      	ldr	r2, [pc, #96]	; (8000f54 <HAL_UART_MspInit+0x8c>)
 8000ef2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <HAL_UART_MspInit+0x8c>)
 8000efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_UART_MspInit+0x8c>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	4a11      	ldr	r2, [pc, #68]	; (8000f54 <HAL_UART_MspInit+0x8c>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_UART_MspInit+0x8c>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <HAL_UART_MspInit+0x90>)
 8000f44:	f002 f812 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	; 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40004800 	.word	0x40004800
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58020c00 	.word	0x58020c00

08000f5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a21      	ldr	r2, [pc, #132]	; (8001000 <HAL_PCD_MspInit+0xa4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d13b      	bne.n	8000ff6 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <HAL_PCD_MspInit+0xa8>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	4a1f      	ldr	r2, [pc, #124]	; (8001004 <HAL_PCD_MspInit+0xa8>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_PCD_MspInit+0xa8>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f9c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fae:	230a      	movs	r3, #10
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4813      	ldr	r0, [pc, #76]	; (8001008 <HAL_PCD_MspInit+0xac>)
 8000fba:	f001 ffd7 	bl	8002f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480d      	ldr	r0, [pc, #52]	; (8001008 <HAL_PCD_MspInit+0xac>)
 8000fd4:	f001 ffca 	bl	8002f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_PCD_MspInit+0xa8>)
 8000fda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fde:	4a09      	ldr	r2, [pc, #36]	; (8001004 <HAL_PCD_MspInit+0xa8>)
 8000fe0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fe4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_PCD_MspInit+0xa8>)
 8000fea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40080000 	.word	0x40080000
 8001004:	58024400 	.word	0x58024400
 8001008:	58020000 	.word	0x58020000

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001060:	f000 f930 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <ADC_IRQHandler+0x10>)
 800106e:	f000 fe5d 	bl	8001d2c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000538 	.word	0x20000538

0800107c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e00a      	b.n	80010a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800108e:	f3af 8000 	nop.w
 8001092:	4601      	mov	r1, r0
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	60ba      	str	r2, [r7, #8]
 800109a:	b2ca      	uxtb	r2, r1
 800109c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	dbf0      	blt.n	800108e <_read+0x12>
	}

return len;
 80010ac:	687b      	ldr	r3, [r7, #4]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	return -1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010de:	605a      	str	r2, [r3, #4]
	return 0;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <_isatty>:

int _isatty(int file)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	return 1;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <_sbrk+0x5c>)
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <_sbrk+0x60>)
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <_sbrk+0x64>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <_sbrk+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	429a      	cmp	r2, r3
 800114e:	d207      	bcs.n	8001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001150:	f006 fcf0 	bl	8007b34 <__errno>
 8001154:	4602      	mov	r2, r0
 8001156:	230c      	movs	r3, #12
 8001158:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	e009      	b.n	8001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <_sbrk+0x64>)
 8001170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20020000 	.word	0x20020000
 8001180:	00000400 	.word	0x00000400
 8001184:	20000098 	.word	0x20000098
 8001188:	200005a8 	.word	0x200005a8

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001190:	f7ff fa76 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001194:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001196:	e003      	b.n	80011a0 <LoopCopyDataInit>

08001198 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800119a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800119c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800119e:	3104      	adds	r1, #4

080011a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011a0:	480a      	ldr	r0, [pc, #40]	; (80011cc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80011a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011a8:	d3f6      	bcc.n	8001198 <CopyDataInit>
  ldr  r2, =_sbss
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80011ac:	e002      	b.n	80011b4 <LoopFillZerobss>

080011ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011b0:	f842 3b04 	str.w	r3, [r2], #4

080011b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80011b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011b8:	d3f9      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ba:	f006 fcc1 	bl	8007b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011be:	f7ff fb33 	bl	8000828 <main>
  bx  lr    
 80011c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011c8:	08008b88 	.word	0x08008b88
  ldr  r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011d0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80011d4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80011d8:	200005a4 	.word	0x200005a4

080011dc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC3_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e6:	2003      	movs	r0, #3
 80011e8:	f001 fe80 	bl	8002eec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011ec:	f003 f848 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 80011f0:	4601      	mov	r1, r0
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_Init+0x68>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	f003 030f 	and.w	r3, r3, #15
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <HAL_Init+0x6c>)
 80011fe:	5cd3      	ldrb	r3, [r2, r3]
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	fa21 f303 	lsr.w	r3, r1, r3
 8001208:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_Init+0x68>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_Init+0x6c>)
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	f003 031f 	and.w	r3, r3, #31
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	fa22 f303 	lsr.w	r3, r2, r3
 8001220:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_Init+0x70>)
 8001222:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001224:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <HAL_Init+0x74>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f814 	bl	8001258 <HAL_InitTick>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e002      	b.n	8001240 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800123a:	f7ff fddd 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	58024400 	.word	0x58024400
 800124c:	08008ab8 	.word	0x08008ab8
 8001250:	20000004 	.word	0x20000004
 8001254:	20000000 	.word	0x20000000

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_InitTick+0x60>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e021      	b.n	80012b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_InitTick+0x64>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_InitTick+0x60>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fe65 	bl	8002f52 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f001 fe2f 	bl	8002f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x68>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000000c 	.word	0x2000000c
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000008 	.word	0x20000008

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	2000000c 	.word	0x2000000c
 80012e8:	2000059c 	.word	0x2000059c

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000059c 	.word	0x2000059c

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff ffee 	bl	80012ec <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_Delay+0x40>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132a:	bf00      	nop
 800132c:	f7ff ffde 	bl	80012ec <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000000c 	.word	0x2000000c

08001348 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetREVID+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	0c1b      	lsrs	r3, r3, #16
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	5c001000 	.word	0x5c001000

08001360 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	609a      	str	r2, [r3, #8]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	609a      	str	r2, [r3, #8]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3360      	adds	r3, #96	; 0x60
 80013da:	461a      	mov	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	430b      	orrs	r3, r1
 80013f6:	431a      	orrs	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80013fc:	bf00      	nop
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	431a      	orrs	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	611a      	str	r2, [r3, #16]
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800143a:	b480      	push	{r7}
 800143c:	b087      	sub	sp, #28
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3360      	adds	r3, #96	; 0x60
 800144a:	461a      	mov	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	431a      	orrs	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	601a      	str	r2, [r3, #0]
  }
}
 8001464:	bf00      	nop
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001496:	b480      	push	{r7}
 8001498:	b087      	sub	sp, #28
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3330      	adds	r3, #48	; 0x30
 80014a6:	461a      	mov	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	4413      	add	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	211f      	movs	r1, #31
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	401a      	ands	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	0e9b      	lsrs	r3, r3, #26
 80014ce:	f003 011f 	and.w	r1, r3, #31
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	431a      	orrs	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3314      	adds	r3, #20
 8001524:	461a      	mov	r2, r3
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	0e5b      	lsrs	r3, r3, #25
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	4413      	add	r3, r2
 8001532:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	0d1b      	lsrs	r3, r3, #20
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	2107      	movs	r1, #7
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	401a      	ands	r2, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	0d1b      	lsrs	r3, r3, #20
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	431a      	orrs	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800155e:	bf00      	nop
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001584:	43db      	mvns	r3, r3
 8001586:	401a      	ands	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0318 	and.w	r3, r3, #24
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001590:	40d9      	lsrs	r1, r3
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	400b      	ands	r3, r1
 8001596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800159a:	431a      	orrs	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	000fffff 	.word	0x000fffff

080015b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 031f 	and.w	r3, r3, #31
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <LL_ADC_DisableDeepPowerDown+0x20>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6093      	str	r3, [r2, #8]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	5fffffc0 	.word	0x5fffffc0

08001610 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001624:	d101      	bne.n	800162a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <LL_ADC_EnableInternalRegulator+0x24>)
 8001646:	4013      	ands	r3, r2
 8001648:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	6fffffc0 	.word	0x6fffffc0

08001660 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001674:	d101      	bne.n	800167a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <LL_ADC_Enable+0x24>)
 8001696:	4013      	ands	r3, r2
 8001698:	f043 0201 	orr.w	r2, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	7fffffc0 	.word	0x7fffffc0

080016b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <LL_ADC_IsEnabled+0x18>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <LL_ADC_IsEnabled+0x1a>
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <LL_ADC_REG_StartConversion+0x24>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	f043 0204 	orr.w	r2, r3, #4
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	7fffffc0 	.word	0x7fffffc0

08001700 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b04      	cmp	r3, #4
 8001712:	d101      	bne.n	8001718 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b08      	cmp	r3, #8
 8001738:	d101      	bne.n	800173e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e18e      	b.n	8001a84 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001770:	2b00      	cmp	r3, #0
 8001772:	d109      	bne.n	8001788 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff fb59 	bl	8000e2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff3f 	bl	8001610 <LL_ADC_IsDeepPowerDownEnabled>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d004      	beq.n	80017a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff25 	bl	80015ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff5a 	bl	8001660 <LL_ADC_IsInternalRegulatorEnabled>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d113      	bne.n	80017da <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff3e 	bl	8001638 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80017bc:	4b9a      	ldr	r3, [pc, #616]	; (8001a28 <HAL_ADC_Init+0x2dc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	099b      	lsrs	r3, r3, #6
 80017c2:	4a9a      	ldr	r2, [pc, #616]	; (8001a2c <HAL_ADC_Init+0x2e0>)
 80017c4:	fba2 2303 	umull	r2, r3, r2, r3
 80017c8:	099b      	lsrs	r3, r3, #6
 80017ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017cc:	e002      	b.n	80017d4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f9      	bne.n	80017ce <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff3e 	bl	8001660 <LL_ADC_IsInternalRegulatorEnabled>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10d      	bne.n	8001806 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ee:	f043 0210 	orr.w	r2, r3, #16
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	f043 0201 	orr.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ff78 	bl	8001700 <LL_ADC_REG_IsConversionOngoing>
 8001810:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	2b00      	cmp	r3, #0
 800181c:	f040 8129 	bne.w	8001a72 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 8125 	bne.w	8001a72 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001830:	f043 0202 	orr.w	r2, r3, #2
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff37 	bl	80016b0 <LL_ADC_IsEnabled>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d136      	bne.n	80018b6 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a78      	ldr	r2, [pc, #480]	; (8001a30 <HAL_ADC_Init+0x2e4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d004      	beq.n	800185c <HAL_ADC_Init+0x110>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a77      	ldr	r2, [pc, #476]	; (8001a34 <HAL_ADC_Init+0x2e8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d10e      	bne.n	800187a <HAL_ADC_Init+0x12e>
 800185c:	4874      	ldr	r0, [pc, #464]	; (8001a30 <HAL_ADC_Init+0x2e4>)
 800185e:	f7ff ff27 	bl	80016b0 <LL_ADC_IsEnabled>
 8001862:	4604      	mov	r4, r0
 8001864:	4873      	ldr	r0, [pc, #460]	; (8001a34 <HAL_ADC_Init+0x2e8>)
 8001866:	f7ff ff23 	bl	80016b0 <LL_ADC_IsEnabled>
 800186a:	4603      	mov	r3, r0
 800186c:	4323      	orrs	r3, r4
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf0c      	ite	eq
 8001872:	2301      	moveq	r3, #1
 8001874:	2300      	movne	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	e008      	b.n	800188c <HAL_ADC_Init+0x140>
 800187a:	486f      	ldr	r0, [pc, #444]	; (8001a38 <HAL_ADC_Init+0x2ec>)
 800187c:	f7ff ff18 	bl	80016b0 <LL_ADC_IsEnabled>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	bf0c      	ite	eq
 8001886:	2301      	moveq	r3, #1
 8001888:	2300      	movne	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d012      	beq.n	80018b6 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a66      	ldr	r2, [pc, #408]	; (8001a30 <HAL_ADC_Init+0x2e4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d004      	beq.n	80018a4 <HAL_ADC_Init+0x158>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a65      	ldr	r2, [pc, #404]	; (8001a34 <HAL_ADC_Init+0x2e8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d101      	bne.n	80018a8 <HAL_ADC_Init+0x15c>
 80018a4:	4a65      	ldr	r2, [pc, #404]	; (8001a3c <HAL_ADC_Init+0x2f0>)
 80018a6:	e000      	b.n	80018aa <HAL_ADC_Init+0x15e>
 80018a8:	4a65      	ldr	r2, [pc, #404]	; (8001a40 <HAL_ADC_Init+0x2f4>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f7ff fd55 	bl	8001360 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80018b6:	f7ff fd47 	bl	8001348 <HAL_GetREVID>
 80018ba:	4602      	mov	r2, r0
 80018bc:	f241 0303 	movw	r3, #4099	; 0x1003
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d914      	bls.n	80018ee <HAL_ADC_Init+0x1a2>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b10      	cmp	r3, #16
 80018ca:	d110      	bne.n	80018ee <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7d5b      	ldrb	r3, [r3, #21]
 80018d0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018d6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80018dc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7f1b      	ldrb	r3, [r3, #28]
 80018e2:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80018e4:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018e6:	f043 030c 	orr.w	r3, r3, #12
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	e00d      	b.n	800190a <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7d5b      	ldrb	r3, [r3, #21]
 80018f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80018fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7f1b      	ldrb	r3, [r3, #28]
 8001904:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7f1b      	ldrb	r3, [r3, #28]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d106      	bne.n	8001920 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	3b01      	subs	r3, #1
 8001918:	045b      	lsls	r3, r3, #17
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	2b00      	cmp	r3, #0
 8001926:	d009      	beq.n	800193c <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	4b40      	ldr	r3, [pc, #256]	; (8001a44 <HAL_ADC_Init+0x2f8>)
 8001944:	4013      	ands	r3, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	69b9      	ldr	r1, [r7, #24]
 800194c:	430b      	orrs	r3, r1
 800194e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fed3 	bl	8001700 <LL_ADC_REG_IsConversionOngoing>
 800195a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fee0 	bl	8001726 <LL_ADC_INJ_IsConversionOngoing>
 8001966:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d14a      	bne.n	8001a04 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d147      	bne.n	8001a04 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7d1b      	ldrb	r3, [r3, #20]
 8001978:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_ADC_Init+0x2fc>)
 800198a:	4013      	ands	r3, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	69b9      	ldr	r1, [r7, #24]
 8001992:	430b      	orrs	r3, r1
 8001994:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800199c:	2b01      	cmp	r3, #1
 800199e:	d11b      	bne.n	80019d8 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_ADC_Init+0x300>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019b4:	3a01      	subs	r2, #1
 80019b6:	0411      	lsls	r1, r2, #16
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019bc:	4311      	orrs	r1, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019c8:	430a      	orrs	r2, r1
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	611a      	str	r2, [r3, #16]
 80019d6:	e007      	b.n	80019e8 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691a      	ldr	r2, [r3, #16]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 ff7a 	bl	80028f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d121      	bne.n	8001a50 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f023 010f 	bic.w	r1, r3, #15
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	1e5a      	subs	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	631a      	str	r2, [r3, #48]	; 0x30
 8001a24:	e01c      	b.n	8001a60 <HAL_ADC_Init+0x314>
 8001a26:	bf00      	nop
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	053e2d63 	.word	0x053e2d63
 8001a30:	40022000 	.word	0x40022000
 8001a34:	40022100 	.word	0x40022100
 8001a38:	58026000 	.word	0x58026000
 8001a3c:	40022300 	.word	0x40022300
 8001a40:	58026300 	.word	0x58026300
 8001a44:	fff0c003 	.word	0xfff0c003
 8001a48:	ffffbffc 	.word	0xffffbffc
 8001a4c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 020f 	bic.w	r2, r2, #15
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	f023 0303 	bic.w	r3, r3, #3
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	655a      	str	r2, [r3, #84]	; 0x54
 8001a70:	e007      	b.n	8001a82 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a76:	f043 0210 	orr.w	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a82:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3724      	adds	r7, #36	; 0x24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd90      	pop	{r4, r7, pc}

08001a8c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a98      	ldr	r2, [pc, #608]	; (8001cfc <HAL_ADC_Start_IT+0x270>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d004      	beq.n	8001aa8 <HAL_ADC_Start_IT+0x1c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a97      	ldr	r2, [pc, #604]	; (8001d00 <HAL_ADC_Start_IT+0x274>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_Start_IT+0x20>
 8001aa8:	4b96      	ldr	r3, [pc, #600]	; (8001d04 <HAL_ADC_Start_IT+0x278>)
 8001aaa:	e000      	b.n	8001aae <HAL_ADC_Start_IT+0x22>
 8001aac:	4b96      	ldr	r3, [pc, #600]	; (8001d08 <HAL_ADC_Start_IT+0x27c>)
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fd80 	bl	80015b4 <LL_ADC_GetMultimode>
 8001ab4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fe20 	bl	8001700 <LL_ADC_REG_IsConversionOngoing>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 8110 	bne.w	8001ce8 <HAL_ADC_Start_IT+0x25c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_Start_IT+0x4a>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e10d      	b.n	8001cf2 <HAL_ADC_Start_IT+0x266>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fe86 	bl	80027f0 <ADC_Enable>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 80f7 	bne.w	8001cde <HAL_ADC_Start_IT+0x252>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001af4:	4b85      	ldr	r3, [pc, #532]	; (8001d0c <HAL_ADC_Start_IT+0x280>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a7e      	ldr	r2, [pc, #504]	; (8001d00 <HAL_ADC_Start_IT+0x274>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d002      	beq.n	8001b10 <HAL_ADC_Start_IT+0x84>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	e000      	b.n	8001b12 <HAL_ADC_Start_IT+0x86>
 8001b10:	4b7a      	ldr	r3, [pc, #488]	; (8001cfc <HAL_ADC_Start_IT+0x270>)
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d002      	beq.n	8001b20 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d105      	bne.n	8001b2c <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	f023 0206 	bic.w	r2, r3, #6
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	659a      	str	r2, [r3, #88]	; 0x58
 8001b44:	e002      	b.n	8001b4c <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	221c      	movs	r2, #28
 8001b52:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 021c 	bic.w	r2, r2, #28
 8001b6a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d108      	bne.n	8001b86 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0208 	orr.w	r2, r2, #8
 8001b82:	605a      	str	r2, [r3, #4]
          break;
 8001b84:	e008      	b.n	8001b98 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0204 	orr.w	r2, r2, #4
 8001b94:	605a      	str	r2, [r3, #4]
          break;
 8001b96:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d107      	bne.n	8001bb0 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0210 	orr.w	r2, r2, #16
 8001bae:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a52      	ldr	r2, [pc, #328]	; (8001d00 <HAL_ADC_Start_IT+0x274>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d002      	beq.n	8001bc0 <HAL_ADC_Start_IT+0x134>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	e000      	b.n	8001bc2 <HAL_ADC_Start_IT+0x136>
 8001bc0:	4b4e      	ldr	r3, [pc, #312]	; (8001cfc <HAL_ADC_Start_IT+0x270>)
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d008      	beq.n	8001bdc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d002      	beq.n	8001bdc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	2b09      	cmp	r3, #9
 8001bda:	d13b      	bne.n	8001c54 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d02d      	beq.n	8001c46 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bf2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d110      	bne.n	8001c24 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0220 	bic.w	r2, r2, #32
 8001c10:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c20:	605a      	str	r2, [r3, #4]
              break;
 8001c22:	e011      	b.n	8001c48 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c32:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0220 	orr.w	r2, r2, #32
 8001c42:	605a      	str	r2, [r3, #4]
              break;
 8001c44:	e000      	b.n	8001c48 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 8001c46:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fd43 	bl	80016d8 <LL_ADC_REG_StartConversion>
 8001c52:	e04d      	b.n	8001cf0 <HAL_ADC_Start_IT+0x264>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a26      	ldr	r2, [pc, #152]	; (8001d00 <HAL_ADC_Start_IT+0x274>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d002      	beq.n	8001c70 <HAL_ADC_Start_IT+0x1e4>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	e000      	b.n	8001c72 <HAL_ADC_Start_IT+0x1e6>
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_ADC_Start_IT+0x270>)
 8001c72:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d036      	beq.n	8001cee <HAL_ADC_Start_IT+0x262>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d110      	bne.n	8001cba <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0220 	bic.w	r2, r2, #32
 8001ca6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cb6:	605a      	str	r2, [r3, #4]
              break;
 8001cb8:	e01a      	b.n	8001cf0 <HAL_ADC_Start_IT+0x264>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cc8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0220 	orr.w	r2, r2, #32
 8001cd8:	605a      	str	r2, [r3, #4]
              break;
 8001cda:	bf00      	nop
 8001cdc:	e008      	b.n	8001cf0 <HAL_ADC_Start_IT+0x264>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ce6:	e003      	b.n	8001cf0 <HAL_ADC_Start_IT+0x264>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	75fb      	strb	r3, [r7, #23]
 8001cec:	e000      	b.n	8001cf0 <HAL_ADC_Start_IT+0x264>
        }
 8001cee:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40022000 	.word	0x40022000
 8001d00:	40022100 	.word	0x40022100
 8001d04:	40022300 	.word	0x40022300
 8001d08:	58026300 	.word	0x58026300
 8001d0c:	fffff0fe 	.word	0xfffff0fe

08001d10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a87      	ldr	r2, [pc, #540]	; (8001f6c <HAL_ADC_IRQHandler+0x240>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_ADC_IRQHandler+0x30>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a86      	ldr	r2, [pc, #536]	; (8001f70 <HAL_ADC_IRQHandler+0x244>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_IRQHandler+0x34>
 8001d5c:	4b85      	ldr	r3, [pc, #532]	; (8001f74 <HAL_ADC_IRQHandler+0x248>)
 8001d5e:	e000      	b.n	8001d62 <HAL_ADC_IRQHandler+0x36>
 8001d60:	4b85      	ldr	r3, [pc, #532]	; (8001f78 <HAL_ADC_IRQHandler+0x24c>)
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fc26 	bl	80015b4 <LL_ADC_GetMultimode>
 8001d68:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d017      	beq.n	8001da4 <HAL_ADC_IRQHandler+0x78>
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d012      	beq.n	8001da4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d105      	bne.n	8001d96 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fef4 	bl	8002b84 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2202      	movs	r2, #2
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d004      	beq.n	8001db8 <HAL_ADC_IRQHandler+0x8c>
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8083 	beq.w	8001eca <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d07d      	beq.n	8001eca <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d105      	bne.n	8001de6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fb40 	bl	8001470 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d062      	beq.n	8001ebc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a5d      	ldr	r2, [pc, #372]	; (8001f70 <HAL_ADC_IRQHandler+0x244>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d002      	beq.n	8001e06 <HAL_ADC_IRQHandler+0xda>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	e000      	b.n	8001e08 <HAL_ADC_IRQHandler+0xdc>
 8001e06:	4b59      	ldr	r3, [pc, #356]	; (8001f6c <HAL_ADC_IRQHandler+0x240>)
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d008      	beq.n	8001e22 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d002      	beq.n	8001e22 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b09      	cmp	r3, #9
 8001e20:	d104      	bne.n	8001e2c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	623b      	str	r3, [r7, #32]
 8001e2a:	e00c      	b.n	8001e46 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a4f      	ldr	r2, [pc, #316]	; (8001f70 <HAL_ADC_IRQHandler+0x244>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d002      	beq.n	8001e3c <HAL_ADC_IRQHandler+0x110>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e000      	b.n	8001e3e <HAL_ADC_IRQHandler+0x112>
 8001e3c:	4b4b      	ldr	r3, [pc, #300]	; (8001f6c <HAL_ADC_IRQHandler+0x240>)
 8001e3e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d135      	bne.n	8001ebc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d12e      	bne.n	8001ebc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fc4c 	bl	8001700 <LL_ADC_REG_IsConversionOngoing>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d11a      	bne.n	8001ea4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 020c 	bic.w	r2, r2, #12
 8001e7c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d112      	bne.n	8001ebc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f043 0201 	orr.w	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
 8001ea2:	e00b      	b.n	8001ebc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea8:	f043 0210 	orr.w	r2, r3, #16
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7fe fc8d 	bl	80007dc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0320 	and.w	r3, r3, #32
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d004      	beq.n	8001ede <HAL_ADC_IRQHandler+0x1b2>
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10b      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a0 	beq.w	800202a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 809a 	beq.w	800202a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d105      	bne.n	8001f0e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f06:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff faeb 	bl	80014ee <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f18:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff faa6 	bl	8001470 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f24:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <HAL_ADC_IRQHandler+0x244>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d002      	beq.n	8001f36 <HAL_ADC_IRQHandler+0x20a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	e000      	b.n	8001f38 <HAL_ADC_IRQHandler+0x20c>
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_ADC_IRQHandler+0x240>)
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d008      	beq.n	8001f52 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b06      	cmp	r3, #6
 8001f4a:	d002      	beq.n	8001f52 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b07      	cmp	r3, #7
 8001f50:	d104      	bne.n	8001f5c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	623b      	str	r3, [r7, #32]
 8001f5a:	e014      	b.n	8001f86 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a03      	ldr	r2, [pc, #12]	; (8001f70 <HAL_ADC_IRQHandler+0x244>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00a      	beq.n	8001f7c <HAL_ADC_IRQHandler+0x250>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	e008      	b.n	8001f7e <HAL_ADC_IRQHandler+0x252>
 8001f6c:	40022000 	.word	0x40022000
 8001f70:	40022100 	.word	0x40022100
 8001f74:	40022300 	.word	0x40022300
 8001f78:	58026300 	.word	0x58026300
 8001f7c:	4b84      	ldr	r3, [pc, #528]	; (8002190 <HAL_ADC_IRQHandler+0x464>)
 8001f7e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10c      	bne.n	8001fa6 <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d142      	bne.n	800201c <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d03f      	beq.n	800201c <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d13a      	bne.n	800201c <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb0:	2b40      	cmp	r3, #64	; 0x40
 8001fb2:	d133      	bne.n	800201c <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d12e      	bne.n	800201c <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fbaf 	bl	8001726 <LL_ADC_INJ_IsConversionOngoing>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d11a      	bne.n	8002004 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fdc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d112      	bne.n	800201c <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f043 0201 	orr.w	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	655a      	str	r2, [r3, #84]	; 0x54
 8002002:	e00b      	b.n	800201c <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	f043 0210 	orr.w	r2, r3, #16
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fd89 	bl	8002b34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2260      	movs	r2, #96	; 0x60
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002030:	2b00      	cmp	r3, #0
 8002032:	d011      	beq.n	8002058 <HAL_ADC_IRQHandler+0x32c>
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00c      	beq.n	8002058 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8a8 	bl	80021a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2280      	movs	r2, #128	; 0x80
 8002056:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d012      	beq.n	8002088 <HAL_ADC_IRQHandler+0x35c>
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00d      	beq.n	8002088 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fd6f 	bl	8002b5c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002086:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208e:	2b00      	cmp	r3, #0
 8002090:	d012      	beq.n	80020b8 <HAL_ADC_IRQHandler+0x38c>
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 fd61 	bl	8002b70 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d043      	beq.n	800214a <HAL_ADC_IRQHandler+0x41e>
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d03e      	beq.n	800214a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d102      	bne.n	80020da <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80020d4:	2301      	movs	r3, #1
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
 80020d8:	e021      	b.n	800211e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d015      	beq.n	800210c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a2a      	ldr	r2, [pc, #168]	; (8002190 <HAL_ADC_IRQHandler+0x464>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d004      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x3c8>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a29      	ldr	r2, [pc, #164]	; (8002194 <HAL_ADC_IRQHandler+0x468>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_IRQHandler+0x3cc>
 80020f4:	4b28      	ldr	r3, [pc, #160]	; (8002198 <HAL_ADC_IRQHandler+0x46c>)
 80020f6:	e000      	b.n	80020fa <HAL_ADC_IRQHandler+0x3ce>
 80020f8:	4b28      	ldr	r3, [pc, #160]	; (800219c <HAL_ADC_IRQHandler+0x470>)
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fa68 	bl	80015d0 <LL_ADC_GetMultiDMATransfer>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002106:	2301      	movs	r3, #1
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	e008      	b.n	800211e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800211a:	2301      	movs	r3, #1
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	2b01      	cmp	r3, #1
 8002122:	d10e      	bne.n	8002142 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002128:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	f043 0202 	orr.w	r2, r3, #2
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f839 	bl	80021b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2210      	movs	r2, #16
 8002148:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002150:	2b00      	cmp	r3, #0
 8002152:	d018      	beq.n	8002186 <HAL_ADC_IRQHandler+0x45a>
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215a:	2b00      	cmp	r3, #0
 800215c:	d013      	beq.n	8002186 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	f043 0208 	orr.w	r2, r3, #8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800217e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 fce1 	bl	8002b48 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002186:	bf00      	nop
 8002188:	3728      	adds	r7, #40	; 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40022000 	.word	0x40022000
 8002194:	40022100 	.word	0x40022100
 8002198:	40022300 	.word	0x40022300
 800219c:	58026300 	.word	0x58026300

080021a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b099      	sub	sp, #100	; 0x64
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a99      	ldr	r2, [pc, #612]	; (8002448 <HAL_ADC_ConfigChannel+0x280>)
 80021e2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x2a>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e2e6      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x5f8>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fa7e 	bl	8001700 <LL_ADC_REG_IsConversionOngoing>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 82cb 	bne.w	80027a2 <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002214:	2b00      	cmp	r3, #0
 8002216:	d108      	bne.n	800222a <HAL_ADC_ConfigChannel+0x62>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0e9b      	lsrs	r3, r3, #26
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2201      	movs	r2, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	e00f      	b.n	800224a <HAL_ADC_ConfigChannel+0x82>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	2201      	movs	r2, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	69d1      	ldr	r1, [r2, #28]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	430b      	orrs	r3, r1
 8002256:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	f7ff f916 	bl	8001496 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fa46 	bl	8001700 <LL_ADC_REG_IsConversionOngoing>
 8002274:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fa53 	bl	8001726 <LL_ADC_INJ_IsConversionOngoing>
 8002280:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002284:	2b00      	cmp	r3, #0
 8002286:	f040 80b3 	bne.w	80023f0 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800228a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228c:	2b00      	cmp	r3, #0
 800228e:	f040 80af 	bne.w	80023f0 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6819      	ldr	r1, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	461a      	mov	r2, r3
 80022a0:	f7ff f938 	bl	8001514 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022a4:	4b69      	ldr	r3, [pc, #420]	; (800244c <HAL_ADC_ConfigChannel+0x284>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80022ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022b0:	d10b      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x102>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	e01d      	b.n	8002306 <HAL_ADC_ConfigChannel+0x13e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10b      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x128>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	e00a      	b.n	8002306 <HAL_ADC_ConfigChannel+0x13e>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	089b      	lsrs	r3, r3, #2
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b04      	cmp	r3, #4
 800230e:	d027      	beq.n	8002360 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	6919      	ldr	r1, [r3, #16]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800231e:	f7ff f853 	bl	80013c8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	6919      	ldr	r1, [r3, #16]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	7e5b      	ldrb	r3, [r3, #25]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d102      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x170>
 8002332:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002336:	e000      	b.n	800233a <HAL_ADC_ConfigChannel+0x172>
 8002338:	2300      	movs	r3, #0
 800233a:	461a      	mov	r2, r3
 800233c:	f7ff f87d 	bl	800143a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6919      	ldr	r1, [r3, #16]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	7e1b      	ldrb	r3, [r3, #24]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d102      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x18e>
 8002350:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002354:	e000      	b.n	8002358 <HAL_ADC_ConfigChannel+0x190>
 8002356:	2300      	movs	r3, #0
 8002358:	461a      	mov	r2, r3
 800235a:	f7ff f855 	bl	8001408 <LL_ADC_SetDataRightShift>
 800235e:	e047      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	069b      	lsls	r3, r3, #26
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002382:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800238a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	069b      	lsls	r3, r3, #26
 8002394:	429a      	cmp	r2, r3
 8002396:	d107      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023a6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	069b      	lsls	r3, r3, #26
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d107      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023ca:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	069b      	lsls	r3, r3, #26
 80023dc:	429a      	cmp	r2, r3
 80023de:	d107      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f95b 	bl	80016b0 <LL_ADC_IsEnabled>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 81d9 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	461a      	mov	r2, r3
 8002410:	f7ff f8ac 	bl	800156c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <HAL_ADC_ConfigChannel+0x280>)
 800241a:	4293      	cmp	r3, r2
 800241c:	f040 8101 	bne.w	8002622 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10f      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x288>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0e9b      	lsrs	r3, r3, #26
 8002436:	3301      	adds	r3, #1
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	2b09      	cmp	r3, #9
 800243e:	bf94      	ite	ls
 8002440:	2301      	movls	r3, #1
 8002442:	2300      	movhi	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	e016      	b.n	8002476 <HAL_ADC_ConfigChannel+0x2ae>
 8002448:	47ff0000 	.word	0x47ff0000
 800244c:	5c001000 	.word	0x5c001000
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800245e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	3301      	adds	r3, #1
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2b09      	cmp	r3, #9
 800246e:	bf94      	ite	ls
 8002470:	2301      	movls	r3, #1
 8002472:	2300      	movhi	r3, #0
 8002474:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002476:	2b00      	cmp	r3, #0
 8002478:	d064      	beq.n	8002544 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002482:	2b00      	cmp	r3, #0
 8002484:	d107      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x2ce>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	3301      	adds	r3, #1
 800248e:	069b      	lsls	r3, r3, #26
 8002490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002494:	e00e      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x2ec>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	3301      	adds	r3, #1
 80024ae:	069b      	lsls	r3, r3, #26
 80024b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d109      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x30c>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	3301      	adds	r3, #1
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	e010      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x32e>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	3301      	adds	r3, #1
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2101      	movs	r1, #1
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	ea42 0103 	orr.w	r1, r2, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10a      	bne.n	800251c <HAL_ADC_ConfigChannel+0x354>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	0e9b      	lsrs	r3, r3, #26
 800250c:	3301      	adds	r3, #1
 800250e:	f003 021f 	and.w	r2, r3, #31
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	051b      	lsls	r3, r3, #20
 800251a:	e011      	b.n	8002540 <HAL_ADC_ConfigChannel+0x378>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	3301      	adds	r3, #1
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002540:	430b      	orrs	r3, r1
 8002542:	e069      	b.n	8002618 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800254c:	2b00      	cmp	r3, #0
 800254e:	d107      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x398>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	3301      	adds	r3, #1
 8002558:	069b      	lsls	r3, r3, #26
 800255a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800255e:	e00e      	b.n	800257e <HAL_ADC_ConfigChannel+0x3b6>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	61fb      	str	r3, [r7, #28]
  return result;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fab3 f383 	clz	r3, r3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	3301      	adds	r3, #1
 8002578:	069b      	lsls	r3, r3, #26
 800257a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <HAL_ADC_ConfigChannel+0x3d6>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	0e9b      	lsrs	r3, r3, #26
 8002590:	3301      	adds	r3, #1
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f303 	lsl.w	r3, r1, r3
 800259c:	e010      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3f8>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	617b      	str	r3, [r7, #20]
  return result;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	ea42 0103 	orr.w	r1, r2, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10d      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x424>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	3301      	adds	r3, #1
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	3b1e      	subs	r3, #30
 80025e4:	051b      	lsls	r3, r3, #20
 80025e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ea:	e014      	b.n	8002616 <HAL_ADC_ConfigChannel+0x44e>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	60fb      	str	r3, [r7, #12]
  return result;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	3301      	adds	r3, #1
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	3b1e      	subs	r3, #30
 8002610:	051b      	lsls	r3, r3, #20
 8002612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002616:	430b      	orrs	r3, r1
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	6892      	ldr	r2, [r2, #8]
 800261c:	4619      	mov	r1, r3
 800261e:	f7fe ff79 	bl	8001514 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f280 80c4 	bge.w	80027b4 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a65      	ldr	r2, [pc, #404]	; (80027c8 <HAL_ADC_ConfigChannel+0x600>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d004      	beq.n	8002640 <HAL_ADC_ConfigChannel+0x478>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a64      	ldr	r2, [pc, #400]	; (80027cc <HAL_ADC_ConfigChannel+0x604>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d101      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x47c>
 8002640:	4b63      	ldr	r3, [pc, #396]	; (80027d0 <HAL_ADC_ConfigChannel+0x608>)
 8002642:	e000      	b.n	8002646 <HAL_ADC_ConfigChannel+0x47e>
 8002644:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_ADC_ConfigChannel+0x60c>)
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe feb0 	bl	80013ac <LL_ADC_GetCommonPathInternalCh>
 800264c:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5d      	ldr	r2, [pc, #372]	; (80027c8 <HAL_ADC_ConfigChannel+0x600>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <HAL_ADC_ConfigChannel+0x49a>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a5b      	ldr	r2, [pc, #364]	; (80027cc <HAL_ADC_ConfigChannel+0x604>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d10e      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x4b8>
 8002662:	4859      	ldr	r0, [pc, #356]	; (80027c8 <HAL_ADC_ConfigChannel+0x600>)
 8002664:	f7ff f824 	bl	80016b0 <LL_ADC_IsEnabled>
 8002668:	4604      	mov	r4, r0
 800266a:	4858      	ldr	r0, [pc, #352]	; (80027cc <HAL_ADC_ConfigChannel+0x604>)
 800266c:	f7ff f820 	bl	80016b0 <LL_ADC_IsEnabled>
 8002670:	4603      	mov	r3, r0
 8002672:	4323      	orrs	r3, r4
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e008      	b.n	8002692 <HAL_ADC_ConfigChannel+0x4ca>
 8002680:	4855      	ldr	r0, [pc, #340]	; (80027d8 <HAL_ADC_ConfigChannel+0x610>)
 8002682:	f7ff f815 	bl	80016b0 <LL_ADC_IsEnabled>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d07b      	beq.n	800278e <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a50      	ldr	r2, [pc, #320]	; (80027dc <HAL_ADC_ConfigChannel+0x614>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d12e      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x536>
 80026a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d129      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a4a      	ldr	r2, [pc, #296]	; (80027d8 <HAL_ADC_ConfigChannel+0x610>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d17f      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a43      	ldr	r2, [pc, #268]	; (80027c8 <HAL_ADC_ConfigChannel+0x600>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d004      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x500>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a42      	ldr	r2, [pc, #264]	; (80027cc <HAL_ADC_ConfigChannel+0x604>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x504>
 80026c8:	4a41      	ldr	r2, [pc, #260]	; (80027d0 <HAL_ADC_ConfigChannel+0x608>)
 80026ca:	e000      	b.n	80026ce <HAL_ADC_ConfigChannel+0x506>
 80026cc:	4a41      	ldr	r2, [pc, #260]	; (80027d4 <HAL_ADC_ConfigChannel+0x60c>)
 80026ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026d4:	4619      	mov	r1, r3
 80026d6:	4610      	mov	r0, r2
 80026d8:	f7fe fe55 	bl	8001386 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80026dc:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <HAL_ADC_ConfigChannel+0x618>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	099b      	lsrs	r3, r3, #6
 80026e2:	4a40      	ldr	r2, [pc, #256]	; (80027e4 <HAL_ADC_ConfigChannel+0x61c>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	099b      	lsrs	r3, r3, #6
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026ee:	e002      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f9      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026fc:	e05a      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a39      	ldr	r2, [pc, #228]	; (80027e8 <HAL_ADC_ConfigChannel+0x620>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d11e      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x57e>
 8002708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d119      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a30      	ldr	r2, [pc, #192]	; (80027d8 <HAL_ADC_ConfigChannel+0x610>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d14b      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a29      	ldr	r2, [pc, #164]	; (80027c8 <HAL_ADC_ConfigChannel+0x600>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d004      	beq.n	8002730 <HAL_ADC_ConfigChannel+0x568>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a28      	ldr	r2, [pc, #160]	; (80027cc <HAL_ADC_ConfigChannel+0x604>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x56c>
 8002730:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <HAL_ADC_ConfigChannel+0x608>)
 8002732:	e000      	b.n	8002736 <HAL_ADC_ConfigChannel+0x56e>
 8002734:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_ADC_ConfigChannel+0x60c>)
 8002736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002738:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273c:	4619      	mov	r1, r3
 800273e:	4610      	mov	r0, r2
 8002740:	f7fe fe21 	bl	8001386 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002744:	e036      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a28      	ldr	r2, [pc, #160]	; (80027ec <HAL_ADC_ConfigChannel+0x624>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d131      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x5ec>
 8002750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d12c      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1e      	ldr	r2, [pc, #120]	; (80027d8 <HAL_ADC_ConfigChannel+0x610>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d127      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_ADC_ConfigChannel+0x600>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_ADC_ConfigChannel+0x5b0>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a16      	ldr	r2, [pc, #88]	; (80027cc <HAL_ADC_ConfigChannel+0x604>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d101      	bne.n	800277c <HAL_ADC_ConfigChannel+0x5b4>
 8002778:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <HAL_ADC_ConfigChannel+0x608>)
 800277a:	e000      	b.n	800277e <HAL_ADC_ConfigChannel+0x5b6>
 800277c:	4a15      	ldr	r2, [pc, #84]	; (80027d4 <HAL_ADC_ConfigChannel+0x60c>)
 800277e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002780:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002784:	4619      	mov	r1, r3
 8002786:	4610      	mov	r0, r2
 8002788:	f7fe fdfd 	bl	8001386 <LL_ADC_SetCommonPathInternalCh>
 800278c:	e012      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f043 0220 	orr.w	r2, r3, #32
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80027a0:	e008      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a6:	f043 0220 	orr.w	r2, r3, #32
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3764      	adds	r7, #100	; 0x64
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd90      	pop	{r4, r7, pc}
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40022100 	.word	0x40022100
 80027d0:	40022300 	.word	0x40022300
 80027d4:	58026300 	.word	0x58026300
 80027d8:	58026000 	.word	0x58026000
 80027dc:	cb840000 	.word	0xcb840000
 80027e0:	20000000 	.word	0x20000000
 80027e4:	053e2d63 	.word	0x053e2d63
 80027e8:	c7520000 	.word	0xc7520000
 80027ec:	cfb80000 	.word	0xcfb80000

080027f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe ff57 	bl	80016b0 <LL_ADC_IsEnabled>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d167      	bne.n	80028d8 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <ADC_Enable+0xf4>)
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	f043 0210 	orr.w	r2, r3, #16
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e053      	b.n	80028da <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe ff26 	bl	8001688 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800283c:	f7fe fd56 	bl	80012ec <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a28      	ldr	r2, [pc, #160]	; (80028e8 <ADC_Enable+0xf8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d004      	beq.n	8002856 <ADC_Enable+0x66>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a26      	ldr	r2, [pc, #152]	; (80028ec <ADC_Enable+0xfc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d101      	bne.n	800285a <ADC_Enable+0x6a>
 8002856:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <ADC_Enable+0x100>)
 8002858:	e000      	b.n	800285c <ADC_Enable+0x6c>
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <ADC_Enable+0x104>)
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe fea9 	bl	80015b4 <LL_ADC_GetMultimode>
 8002862:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a20      	ldr	r2, [pc, #128]	; (80028ec <ADC_Enable+0xfc>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d002      	beq.n	8002874 <ADC_Enable+0x84>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	e000      	b.n	8002876 <ADC_Enable+0x86>
 8002874:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <ADC_Enable+0xf8>)
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	4293      	cmp	r3, r2
 800287c:	d025      	beq.n	80028ca <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d129      	bne.n	80028d8 <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002884:	e021      	b.n	80028ca <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe ff10 	bl	80016b0 <LL_ADC_IsEnabled>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d104      	bne.n	80028a0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fef4 	bl	8001688 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028a0:	f7fe fd24 	bl	80012ec <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d90d      	bls.n	80028ca <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b2:	f043 0210 	orr.w	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e007      	b.n	80028da <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d1d6      	bne.n	8002886 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	8000003f 	.word	0x8000003f
 80028e8:	40022000 	.word	0x40022000
 80028ec:	40022100 	.word	0x40022100
 80028f0:	40022300 	.word	0x40022300
 80028f4:	58026300 	.word	0x58026300

080028f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a70      	ldr	r2, [pc, #448]	; (8002ac8 <ADC_ConfigureBoostMode+0x1d0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d004      	beq.n	8002914 <ADC_ConfigureBoostMode+0x1c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a6f      	ldr	r2, [pc, #444]	; (8002acc <ADC_ConfigureBoostMode+0x1d4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d109      	bne.n	8002928 <ADC_ConfigureBoostMode+0x30>
 8002914:	4b6e      	ldr	r3, [pc, #440]	; (8002ad0 <ADC_ConfigureBoostMode+0x1d8>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf14      	ite	ne
 8002920:	2301      	movne	r3, #1
 8002922:	2300      	moveq	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e008      	b.n	800293a <ADC_ConfigureBoostMode+0x42>
 8002928:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <ADC_ConfigureBoostMode+0x1dc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf14      	ite	ne
 8002934:	2301      	movne	r3, #1
 8002936:	2300      	moveq	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d01a      	beq.n	8002974 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800293e:	f001 fe11 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 8002942:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800294c:	d006      	beq.n	800295c <ADC_ConfigureBoostMode+0x64>
 800294e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002952:	d00b      	beq.n	800296c <ADC_ConfigureBoostMode+0x74>
 8002954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002958:	d000      	beq.n	800295c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800295a:	e05d      	b.n	8002a18 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	60fb      	str	r3, [r7, #12]
        break;
 800296a:	e055      	b.n	8002a18 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	60fb      	str	r3, [r7, #12]
        break;
 8002972:	e051      	b.n	8002a18 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002974:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002978:	f002 fd3e 	bl	80053f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800297c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002986:	d02a      	beq.n	80029de <ADC_ConfigureBoostMode+0xe6>
 8002988:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800298c:	d813      	bhi.n	80029b6 <ADC_ConfigureBoostMode+0xbe>
 800298e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002992:	d024      	beq.n	80029de <ADC_ConfigureBoostMode+0xe6>
 8002994:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002998:	d806      	bhi.n	80029a8 <ADC_ConfigureBoostMode+0xb0>
 800299a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800299e:	d01e      	beq.n	80029de <ADC_ConfigureBoostMode+0xe6>
 80029a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029a4:	d01b      	beq.n	80029de <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80029a6:	e037      	b.n	8002a18 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80029a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ac:	d017      	beq.n	80029de <ADC_ConfigureBoostMode+0xe6>
 80029ae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80029b2:	d014      	beq.n	80029de <ADC_ConfigureBoostMode+0xe6>
        break;
 80029b4:	e030      	b.n	8002a18 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80029b6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80029ba:	d021      	beq.n	8002a00 <ADC_ConfigureBoostMode+0x108>
 80029bc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80029c0:	d806      	bhi.n	80029d0 <ADC_ConfigureBoostMode+0xd8>
 80029c2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80029c6:	d013      	beq.n	80029f0 <ADC_ConfigureBoostMode+0xf8>
 80029c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029cc:	d014      	beq.n	80029f8 <ADC_ConfigureBoostMode+0x100>
        break;
 80029ce:	e023      	b.n	8002a18 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80029d0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80029d4:	d018      	beq.n	8002a08 <ADC_ConfigureBoostMode+0x110>
 80029d6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80029da:	d019      	beq.n	8002a10 <ADC_ConfigureBoostMode+0x118>
        break;
 80029dc:	e01c      	b.n	8002a18 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	0c9b      	lsrs	r3, r3, #18
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	60fb      	str	r3, [r7, #12]
        break;
 80029ee:	e013      	b.n	8002a18 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]
        break;
 80029f6:	e00f      	b.n	8002a18 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	60fb      	str	r3, [r7, #12]
        break;
 80029fe:	e00b      	b.n	8002a18 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	099b      	lsrs	r3, r3, #6
 8002a04:	60fb      	str	r3, [r7, #12]
        break;
 8002a06:	e007      	b.n	8002a18 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	09db      	lsrs	r3, r3, #7
 8002a0c:	60fb      	str	r3, [r7, #12]
        break;
 8002a0e:	e003      	b.n	8002a18 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	60fb      	str	r3, [r7, #12]
        break;
 8002a16:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a18:	f7fe fc96 	bl	8001348 <HAL_GetREVID>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d815      	bhi.n	8002a52 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a2b      	ldr	r2, [pc, #172]	; (8002ad8 <ADC_ConfigureBoostMode+0x1e0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d908      	bls.n	8002a40 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a3c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a3e:	e03e      	b.n	8002abe <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a4e:	609a      	str	r2, [r3, #8]
}
 8002a50:	e035      	b.n	8002abe <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a20      	ldr	r2, [pc, #128]	; (8002adc <ADC_ConfigureBoostMode+0x1e4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d808      	bhi.n	8002a72 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a6e:	609a      	str	r2, [r3, #8]
}
 8002a70:	e025      	b.n	8002abe <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4a1a      	ldr	r2, [pc, #104]	; (8002ae0 <ADC_ConfigureBoostMode+0x1e8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d80a      	bhi.n	8002a90 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a8c:	609a      	str	r2, [r3, #8]
}
 8002a8e:	e016      	b.n	8002abe <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <ADC_ConfigureBoostMode+0x1ec>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d80a      	bhi.n	8002aae <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aaa:	609a      	str	r2, [r3, #8]
}
 8002aac:	e007      	b.n	8002abe <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002abc:	609a      	str	r2, [r3, #8]
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	40022100 	.word	0x40022100
 8002ad0:	40022300 	.word	0x40022300
 8002ad4:	58026300 	.word	0x58026300
 8002ad8:	01312d00 	.word	0x01312d00
 8002adc:	005f5e10 	.word	0x005f5e10
 8002ae0:	00bebc20 	.word	0x00bebc20
 8002ae4:	017d7840 	.word	0x017d7840

08002ae8 <LL_ADC_IsEnabled>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <LL_ADC_IsEnabled+0x18>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <LL_ADC_IsEnabled+0x1a>
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_ADC_REG_IsConversionOngoing>:
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d101      	bne.n	8002b26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b09f      	sub	sp, #124	; 0x7c
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e0ba      	b.n	8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a5c      	ldr	r2, [pc, #368]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d102      	bne.n	8002bce <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002bc8:	4b5b      	ldr	r3, [pc, #364]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	e001      	b.n	8002bd2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bdc:	f043 0220 	orr.w	r2, r3, #32
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e09d      	b.n	8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ff8b 	bl	8002b0e <LL_ADC_REG_IsConversionOngoing>
 8002bf8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff85 	bl	8002b0e <LL_ADC_REG_IsConversionOngoing>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d17f      	bne.n	8002d0a <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d17c      	bne.n	8002d0a <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a47      	ldr	r2, [pc, #284]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a46      	ldr	r2, [pc, #280]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d101      	bne.n	8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002c24:	4b45      	ldr	r3, [pc, #276]	; (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c26:	e000      	b.n	8002c2a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002c28:	4b45      	ldr	r3, [pc, #276]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c2a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d039      	beq.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c44:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a3a      	ldr	r2, [pc, #232]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a38      	ldr	r2, [pc, #224]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d10e      	bne.n	8002c78 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002c5a:	4836      	ldr	r0, [pc, #216]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c5c:	f7ff ff44 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002c60:	4604      	mov	r4, r0
 8002c62:	4835      	ldr	r0, [pc, #212]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c64:	f7ff ff40 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4323      	orrs	r3, r4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e008      	b.n	8002c8a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002c78:	4832      	ldr	r0, [pc, #200]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c7a:	f7ff ff35 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d047      	beq.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	6811      	ldr	r1, [r2, #0]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	6892      	ldr	r2, [r2, #8]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ca6:	e03a      	b.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1e      	ldr	r2, [pc, #120]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d004      	beq.n	8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d10e      	bne.n	8002ce6 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002cc8:	481a      	ldr	r0, [pc, #104]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002cca:	f7ff ff0d 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002cce:	4604      	mov	r4, r0
 8002cd0:	4819      	ldr	r0, [pc, #100]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002cd2:	f7ff ff09 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4323      	orrs	r3, r4
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	bf0c      	ite	eq
 8002cde:	2301      	moveq	r3, #1
 8002ce0:	2300      	movne	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	e008      	b.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002ce6:	4817      	ldr	r0, [pc, #92]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002ce8:	f7ff fefe 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d06:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d08:	e009      	b.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f043 0220 	orr.w	r2, r3, #32
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002d1c:	e000      	b.n	8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d1e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d28:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	377c      	adds	r7, #124	; 0x7c
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd90      	pop	{r4, r7, pc}
 8002d34:	40022000 	.word	0x40022000
 8002d38:	40022100 	.word	0x40022100
 8002d3c:	40022300 	.word	0x40022300
 8002d40:	58026300 	.word	0x58026300
 8002d44:	58026000 	.word	0x58026000
 8002d48:	fffff0e0 	.word	0xfffff0e0

08002d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <__NVIC_SetPriorityGrouping+0x40>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <__NVIC_SetPriorityGrouping+0x40>)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	60d3      	str	r3, [r2, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00
 8002d90:	05fa0000 	.word	0x05fa0000

08002d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <__NVIC_GetPriorityGrouping+0x18>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	f003 0307 	and.w	r3, r3, #7
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	db0b      	blt.n	8002dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	f003 021f 	and.w	r2, r3, #31
 8002dc8:	4907      	ldr	r1, [pc, #28]	; (8002de8 <__NVIC_EnableIRQ+0x38>)
 8002dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	e000e100 	.word	0xe000e100

08002dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	6039      	str	r1, [r7, #0]
 8002df6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002df8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	db0a      	blt.n	8002e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	490c      	ldr	r1, [pc, #48]	; (8002e38 <__NVIC_SetPriority+0x4c>)
 8002e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e0a:	0112      	lsls	r2, r2, #4
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e14:	e00a      	b.n	8002e2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4908      	ldr	r1, [pc, #32]	; (8002e3c <__NVIC_SetPriority+0x50>)
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	3b04      	subs	r3, #4
 8002e24:	0112      	lsls	r2, r2, #4
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	440b      	add	r3, r1
 8002e2a:	761a      	strb	r2, [r3, #24]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000e100 	.word	0xe000e100
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f1c3 0307 	rsb	r3, r3, #7
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	bf28      	it	cs
 8002e5e:	2304      	movcs	r3, #4
 8002e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d902      	bls.n	8002e70 <NVIC_EncodePriority+0x30>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3b03      	subs	r3, #3
 8002e6e:	e000      	b.n	8002e72 <NVIC_EncodePriority+0x32>
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	401a      	ands	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	43d9      	mvns	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	4313      	orrs	r3, r2
         );
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb8:	d301      	bcc.n	8002ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e00f      	b.n	8002ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <SysTick_Config+0x40>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	f7ff ff8e 	bl	8002dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <SysTick_Config+0x40>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed6:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <SysTick_Config+0x40>)
 8002ed8:	2207      	movs	r2, #7
 8002eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	e000e010 	.word	0xe000e010

08002eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff29 	bl	8002d4c <__NVIC_SetPriorityGrouping>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f10:	f7ff ff40 	bl	8002d94 <__NVIC_GetPriorityGrouping>
 8002f14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7ff ff90 	bl	8002e40 <NVIC_EncodePriority>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff5f 	bl	8002dec <__NVIC_SetPriority>
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff33 	bl	8002db0 <__NVIC_EnableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ffa4 	bl	8002ea8 <SysTick_Config>
 8002f60:	4603      	mov	r3, r0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f7a:	4b89      	ldr	r3, [pc, #548]	; (80031a0 <HAL_GPIO_Init+0x234>)
 8002f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f7e:	e194      	b.n	80032aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2101      	movs	r1, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 8186 	beq.w	80032a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_GPIO_Init+0x4c>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d007      	beq.n	8002fb8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fac:	2b11      	cmp	r3, #17
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b12      	cmp	r3, #18
 8002fb6:	d130      	bne.n	800301a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fee:	2201      	movs	r2, #1
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	f003 0201 	and.w	r2, r3, #1
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d003      	beq.n	800305a <HAL_GPIO_Init+0xee>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b12      	cmp	r3, #18
 8003058:	d123      	bne.n	80030a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	08da      	lsrs	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3208      	adds	r2, #8
 8003062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	220f      	movs	r2, #15
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	08da      	lsrs	r2, r3, #3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3208      	adds	r2, #8
 800309c:	69b9      	ldr	r1, [r7, #24]
 800309e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	2203      	movs	r2, #3
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 0203 	and.w	r2, r3, #3
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80e0 	beq.w	80032a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e4:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <HAL_GPIO_Init+0x238>)
 80030e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030ea:	4a2e      	ldr	r2, [pc, #184]	; (80031a4 <HAL_GPIO_Init+0x238>)
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80030f4:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <HAL_GPIO_Init+0x238>)
 80030f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003102:	4a29      	ldr	r2, [pc, #164]	; (80031a8 <HAL_GPIO_Init+0x23c>)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	3302      	adds	r3, #2
 800310a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	220f      	movs	r2, #15
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a20      	ldr	r2, [pc, #128]	; (80031ac <HAL_GPIO_Init+0x240>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d052      	beq.n	80031d4 <HAL_GPIO_Init+0x268>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a1f      	ldr	r2, [pc, #124]	; (80031b0 <HAL_GPIO_Init+0x244>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d031      	beq.n	800319a <HAL_GPIO_Init+0x22e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_GPIO_Init+0x248>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02b      	beq.n	8003196 <HAL_GPIO_Init+0x22a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a1d      	ldr	r2, [pc, #116]	; (80031b8 <HAL_GPIO_Init+0x24c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d025      	beq.n	8003192 <HAL_GPIO_Init+0x226>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a1c      	ldr	r2, [pc, #112]	; (80031bc <HAL_GPIO_Init+0x250>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01f      	beq.n	800318e <HAL_GPIO_Init+0x222>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a1b      	ldr	r2, [pc, #108]	; (80031c0 <HAL_GPIO_Init+0x254>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d019      	beq.n	800318a <HAL_GPIO_Init+0x21e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1a      	ldr	r2, [pc, #104]	; (80031c4 <HAL_GPIO_Init+0x258>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_GPIO_Init+0x21a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a19      	ldr	r2, [pc, #100]	; (80031c8 <HAL_GPIO_Init+0x25c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00d      	beq.n	8003182 <HAL_GPIO_Init+0x216>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a18      	ldr	r2, [pc, #96]	; (80031cc <HAL_GPIO_Init+0x260>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <HAL_GPIO_Init+0x212>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <HAL_GPIO_Init+0x264>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_GPIO_Init+0x20e>
 8003176:	2309      	movs	r3, #9
 8003178:	e02d      	b.n	80031d6 <HAL_GPIO_Init+0x26a>
 800317a:	230a      	movs	r3, #10
 800317c:	e02b      	b.n	80031d6 <HAL_GPIO_Init+0x26a>
 800317e:	2308      	movs	r3, #8
 8003180:	e029      	b.n	80031d6 <HAL_GPIO_Init+0x26a>
 8003182:	2307      	movs	r3, #7
 8003184:	e027      	b.n	80031d6 <HAL_GPIO_Init+0x26a>
 8003186:	2306      	movs	r3, #6
 8003188:	e025      	b.n	80031d6 <HAL_GPIO_Init+0x26a>
 800318a:	2305      	movs	r3, #5
 800318c:	e023      	b.n	80031d6 <HAL_GPIO_Init+0x26a>
 800318e:	2304      	movs	r3, #4
 8003190:	e021      	b.n	80031d6 <HAL_GPIO_Init+0x26a>
 8003192:	2303      	movs	r3, #3
 8003194:	e01f      	b.n	80031d6 <HAL_GPIO_Init+0x26a>
 8003196:	2302      	movs	r3, #2
 8003198:	e01d      	b.n	80031d6 <HAL_GPIO_Init+0x26a>
 800319a:	2301      	movs	r3, #1
 800319c:	e01b      	b.n	80031d6 <HAL_GPIO_Init+0x26a>
 800319e:	bf00      	nop
 80031a0:	58000080 	.word	0x58000080
 80031a4:	58024400 	.word	0x58024400
 80031a8:	58000400 	.word	0x58000400
 80031ac:	58020000 	.word	0x58020000
 80031b0:	58020400 	.word	0x58020400
 80031b4:	58020800 	.word	0x58020800
 80031b8:	58020c00 	.word	0x58020c00
 80031bc:	58021000 	.word	0x58021000
 80031c0:	58021400 	.word	0x58021400
 80031c4:	58021800 	.word	0x58021800
 80031c8:	58021c00 	.word	0x58021c00
 80031cc:	58022000 	.word	0x58022000
 80031d0:	58022400 	.word	0x58022400
 80031d4:	2300      	movs	r3, #0
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	f002 0203 	and.w	r2, r2, #3
 80031dc:	0092      	lsls	r2, r2, #2
 80031de:	4093      	lsls	r3, r2
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031e6:	4938      	ldr	r1, [pc, #224]	; (80032c8 <HAL_GPIO_Init+0x35c>)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	3302      	adds	r3, #2
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	43db      	mvns	r3, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4013      	ands	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800326e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800329c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	3301      	adds	r3, #1
 80032a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f47f ae63 	bne.w	8002f80 <HAL_GPIO_Init+0x14>
  }
}
 80032ba:	bf00      	nop
 80032bc:	3724      	adds	r7, #36	; 0x24
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	58000400 	.word	0x58000400

080032cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
 80032d8:	4613      	mov	r3, r2
 80032da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032dc:	787b      	ldrb	r3, [r7, #1]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032e2:	887a      	ldrh	r2, [r7, #2]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80032e8:	e003      	b.n	80032f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032ea:	887b      	ldrh	r3, [r7, #2]
 80032ec:	041a      	lsls	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	619a      	str	r2, [r3, #24]
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	887b      	ldrh	r3, [r7, #2]
 8003310:	401a      	ands	r2, r3
 8003312:	887b      	ldrh	r3, [r7, #2]
 8003314:	429a      	cmp	r2, r3
 8003316:	d104      	bne.n	8003322 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003318:	887b      	ldrh	r3, [r7, #2]
 800331a:	041a      	lsls	r2, r3, #16
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003320:	e002      	b.n	8003328 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	619a      	str	r2, [r3, #24]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800333c:	4a08      	ldr	r2, [pc, #32]	; (8003360 <HAL_HSEM_FastTake+0x2c>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3320      	adds	r3, #32
 8003342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003346:	4a07      	ldr	r2, [pc, #28]	; (8003364 <HAL_HSEM_FastTake+0x30>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d101      	bne.n	8003350 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	e000      	b.n	8003352 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	58026400 	.word	0x58026400
 8003364:	80000300 	.word	0x80000300

08003368 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003372:	4906      	ldr	r1, [pc, #24]	; (800338c <HAL_HSEM_Release+0x24>)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	58026400 	.word	0x58026400

08003390 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003392:	b08f      	sub	sp, #60	; 0x3c
 8003394:	af0a      	add	r7, sp, #40	; 0x28
 8003396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e116      	b.n	80035d0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7fd fdcd 	bl	8000f5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2203      	movs	r2, #3
 80033c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f004 f95f 	bl	80076a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	687e      	ldr	r6, [r7, #4]
 80033ee:	466d      	mov	r5, sp
 80033f0:	f106 0410 	add.w	r4, r6, #16
 80033f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003400:	e885 0003 	stmia.w	r5, {r0, r1}
 8003404:	1d33      	adds	r3, r6, #4
 8003406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003408:	6838      	ldr	r0, [r7, #0]
 800340a:	f004 f8e9 	bl	80075e0 <USB_CoreInit>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0d7      	b.n	80035d0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f004 f94d 	bl	80076c6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800342c:	2300      	movs	r3, #0
 800342e:	73fb      	strb	r3, [r7, #15]
 8003430:	e04a      	b.n	80034c8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003432:	7bfa      	ldrb	r2, [r7, #15]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	333d      	adds	r3, #61	; 0x3d
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	333c      	adds	r3, #60	; 0x3c
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	b298      	uxth	r0, r3
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	3342      	adds	r3, #66	; 0x42
 800346e:	4602      	mov	r2, r0
 8003470:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	333f      	adds	r3, #63	; 0x3f
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	3344      	adds	r3, #68	; 0x44
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800349a:	7bfa      	ldrb	r2, [r7, #15]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	3348      	adds	r3, #72	; 0x48
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034ae:	7bfa      	ldrb	r2, [r7, #15]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	3350      	adds	r3, #80	; 0x50
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	3301      	adds	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d3af      	bcc.n	8003432 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d2:	2300      	movs	r3, #0
 80034d4:	73fb      	strb	r3, [r7, #15]
 80034d6:	e044      	b.n	8003562 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034ee:	7bfa      	ldrb	r2, [r7, #15]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	3301      	adds	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	d3b5      	bcc.n	80034d8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	687e      	ldr	r6, [r7, #4]
 8003574:	466d      	mov	r5, sp
 8003576:	f106 0410 	add.w	r4, r6, #16
 800357a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800357c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800357e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003582:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003586:	e885 0003 	stmia.w	r5, {r0, r1}
 800358a:	1d33      	adds	r3, r6, #4
 800358c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800358e:	6838      	ldr	r0, [r7, #0]
 8003590:	f004 f8c4 	bl	800771c <USB_DevInit>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e014      	b.n	80035d0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d102      	bne.n	80035c4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f80a 	bl	80035d8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f004 fa66 	bl	8007a9a <USB_DevDisconnect>

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003606:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_PCDEx_ActivateLPM+0x44>)
 8003608:	4313      	orrs	r3, r2
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	10000003 	.word	0x10000003

08003620 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003628:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	2b06      	cmp	r3, #6
 8003632:	d00a      	beq.n	800364a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003634:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	429a      	cmp	r2, r3
 8003640:	d001      	beq.n	8003646 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e040      	b.n	80036c8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	e03e      	b.n	80036c8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800364a:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003652:	491f      	ldr	r1, [pc, #124]	; (80036d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4313      	orrs	r3, r2
 8003658:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800365a:	f7fd fe47 	bl	80012ec <HAL_GetTick>
 800365e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003660:	e009      	b.n	8003676 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003662:	f7fd fe43 	bl	80012ec <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003670:	d901      	bls.n	8003676 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e028      	b.n	80036c8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003676:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800367e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003682:	d1ee      	bne.n	8003662 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b1e      	cmp	r3, #30
 8003688:	d008      	beq.n	800369c <HAL_PWREx_ConfigSupply+0x7c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b2e      	cmp	r3, #46	; 0x2e
 800368e:	d005      	beq.n	800369c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b1d      	cmp	r3, #29
 8003694:	d002      	beq.n	800369c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b2d      	cmp	r3, #45	; 0x2d
 800369a:	d114      	bne.n	80036c6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800369c:	f7fd fe26 	bl	80012ec <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80036a2:	e009      	b.n	80036b8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80036a4:	f7fd fe22 	bl	80012ec <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036b2:	d901      	bls.n	80036b8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e007      	b.n	80036c8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_PWREx_ConfigSupply+0xb0>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c4:	d1ee      	bne.n	80036a4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	58024800 	.word	0x58024800

080036d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80036de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036e2:	60d3      	str	r3, [r2, #12]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	58024800 	.word	0x58024800

080036f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08c      	sub	sp, #48	; 0x30
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e3ff      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8087 	beq.w	8003822 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003714:	4b99      	ldr	r3, [pc, #612]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800371e:	4b97      	ldr	r3, [pc, #604]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003726:	2b10      	cmp	r3, #16
 8003728:	d007      	beq.n	800373a <HAL_RCC_OscConfig+0x46>
 800372a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372c:	2b18      	cmp	r3, #24
 800372e:	d110      	bne.n	8003752 <HAL_RCC_OscConfig+0x5e>
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d10b      	bne.n	8003752 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373a:	4b90      	ldr	r3, [pc, #576]	; (800397c <HAL_RCC_OscConfig+0x288>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d06c      	beq.n	8003820 <HAL_RCC_OscConfig+0x12c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d168      	bne.n	8003820 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e3d9      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375a:	d106      	bne.n	800376a <HAL_RCC_OscConfig+0x76>
 800375c:	4b87      	ldr	r3, [pc, #540]	; (800397c <HAL_RCC_OscConfig+0x288>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a86      	ldr	r2, [pc, #536]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	e02e      	b.n	80037c8 <HAL_RCC_OscConfig+0xd4>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0x98>
 8003772:	4b82      	ldr	r3, [pc, #520]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a81      	ldr	r2, [pc, #516]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b7f      	ldr	r3, [pc, #508]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a7e      	ldr	r2, [pc, #504]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e01d      	b.n	80037c8 <HAL_RCC_OscConfig+0xd4>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003794:	d10c      	bne.n	80037b0 <HAL_RCC_OscConfig+0xbc>
 8003796:	4b79      	ldr	r3, [pc, #484]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a78      	ldr	r2, [pc, #480]	; (800397c <HAL_RCC_OscConfig+0x288>)
 800379c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	4b76      	ldr	r3, [pc, #472]	; (800397c <HAL_RCC_OscConfig+0x288>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a75      	ldr	r2, [pc, #468]	; (800397c <HAL_RCC_OscConfig+0x288>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e00b      	b.n	80037c8 <HAL_RCC_OscConfig+0xd4>
 80037b0:	4b72      	ldr	r3, [pc, #456]	; (800397c <HAL_RCC_OscConfig+0x288>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a71      	ldr	r2, [pc, #452]	; (800397c <HAL_RCC_OscConfig+0x288>)
 80037b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b6f      	ldr	r3, [pc, #444]	; (800397c <HAL_RCC_OscConfig+0x288>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a6e      	ldr	r2, [pc, #440]	; (800397c <HAL_RCC_OscConfig+0x288>)
 80037c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d013      	beq.n	80037f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fd fd8c 	bl	80012ec <HAL_GetTick>
 80037d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fd fd88 	bl	80012ec <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e38d      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037ea:	4b64      	ldr	r3, [pc, #400]	; (800397c <HAL_RCC_OscConfig+0x288>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0xe4>
 80037f6:	e014      	b.n	8003822 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fd fd78 	bl	80012ec <HAL_GetTick>
 80037fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003800:	f7fd fd74 	bl	80012ec <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e379      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003812:	4b5a      	ldr	r3, [pc, #360]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x10c>
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80ae 	beq.w	800398c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003830:	4b52      	ldr	r3, [pc, #328]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003838:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800383a:	4b50      	ldr	r3, [pc, #320]	; (800397c <HAL_RCC_OscConfig+0x288>)
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d007      	beq.n	8003856 <HAL_RCC_OscConfig+0x162>
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	2b18      	cmp	r3, #24
 800384a:	d13a      	bne.n	80038c2 <HAL_RCC_OscConfig+0x1ce>
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d135      	bne.n	80038c2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003856:	4b49      	ldr	r3, [pc, #292]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_RCC_OscConfig+0x17a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e34b      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386e:	f7fd fd6b 	bl	8001348 <HAL_GetREVID>
 8003872:	4602      	mov	r2, r0
 8003874:	f241 0303 	movw	r3, #4099	; 0x1003
 8003878:	429a      	cmp	r2, r3
 800387a:	d817      	bhi.n	80038ac <HAL_RCC_OscConfig+0x1b8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	2b40      	cmp	r3, #64	; 0x40
 8003882:	d108      	bne.n	8003896 <HAL_RCC_OscConfig+0x1a2>
 8003884:	4b3d      	ldr	r3, [pc, #244]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800388c:	4a3b      	ldr	r2, [pc, #236]	; (800397c <HAL_RCC_OscConfig+0x288>)
 800388e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003892:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003894:	e07a      	b.n	800398c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003896:	4b39      	ldr	r3, [pc, #228]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	031b      	lsls	r3, r3, #12
 80038a4:	4935      	ldr	r1, [pc, #212]	; (800397c <HAL_RCC_OscConfig+0x288>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038aa:	e06f      	b.n	800398c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ac:	4b33      	ldr	r3, [pc, #204]	; (800397c <HAL_RCC_OscConfig+0x288>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	4930      	ldr	r1, [pc, #192]	; (800397c <HAL_RCC_OscConfig+0x288>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038c0:	e064      	b.n	800398c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d045      	beq.n	8003956 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038ca:	4b2c      	ldr	r3, [pc, #176]	; (800397c <HAL_RCC_OscConfig+0x288>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 0219 	bic.w	r2, r3, #25
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	4929      	ldr	r1, [pc, #164]	; (800397c <HAL_RCC_OscConfig+0x288>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fd fd06 	bl	80012ec <HAL_GetTick>
 80038e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e4:	f7fd fd02 	bl	80012ec <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e307      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038f6:	4b21      	ldr	r3, [pc, #132]	; (800397c <HAL_RCC_OscConfig+0x288>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003902:	f7fd fd21 	bl	8001348 <HAL_GetREVID>
 8003906:	4602      	mov	r2, r0
 8003908:	f241 0303 	movw	r3, #4099	; 0x1003
 800390c:	429a      	cmp	r2, r3
 800390e:	d817      	bhi.n	8003940 <HAL_RCC_OscConfig+0x24c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d108      	bne.n	800392a <HAL_RCC_OscConfig+0x236>
 8003918:	4b18      	ldr	r3, [pc, #96]	; (800397c <HAL_RCC_OscConfig+0x288>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003920:	4a16      	ldr	r2, [pc, #88]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003926:	6053      	str	r3, [r2, #4]
 8003928:	e030      	b.n	800398c <HAL_RCC_OscConfig+0x298>
 800392a:	4b14      	ldr	r3, [pc, #80]	; (800397c <HAL_RCC_OscConfig+0x288>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	031b      	lsls	r3, r3, #12
 8003938:	4910      	ldr	r1, [pc, #64]	; (800397c <HAL_RCC_OscConfig+0x288>)
 800393a:	4313      	orrs	r3, r2
 800393c:	604b      	str	r3, [r1, #4]
 800393e:	e025      	b.n	800398c <HAL_RCC_OscConfig+0x298>
 8003940:	4b0e      	ldr	r3, [pc, #56]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	061b      	lsls	r3, r3, #24
 800394e:	490b      	ldr	r1, [pc, #44]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]
 8003954:	e01a      	b.n	800398c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_RCC_OscConfig+0x288>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a08      	ldr	r2, [pc, #32]	; (800397c <HAL_RCC_OscConfig+0x288>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fd fcc3 	bl	80012ec <HAL_GetTick>
 8003966:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003968:	e00a      	b.n	8003980 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396a:	f7fd fcbf 	bl	80012ec <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d903      	bls.n	8003980 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e2c4      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
 800397c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003980:	4ba4      	ldr	r3, [pc, #656]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ee      	bne.n	800396a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a9 	beq.w	8003aec <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800399a:	4b9e      	ldr	r3, [pc, #632]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039a4:	4b9b      	ldr	r3, [pc, #620]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d007      	beq.n	80039c0 <HAL_RCC_OscConfig+0x2cc>
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b18      	cmp	r3, #24
 80039b4:	d13a      	bne.n	8003a2c <HAL_RCC_OscConfig+0x338>
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d135      	bne.n	8003a2c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039c0:	4b94      	ldr	r3, [pc, #592]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_OscConfig+0x2e4>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	2b80      	cmp	r3, #128	; 0x80
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e296      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039d8:	f7fd fcb6 	bl	8001348 <HAL_GetREVID>
 80039dc:	4602      	mov	r2, r0
 80039de:	f241 0303 	movw	r3, #4099	; 0x1003
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d817      	bhi.n	8003a16 <HAL_RCC_OscConfig+0x322>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d108      	bne.n	8003a00 <HAL_RCC_OscConfig+0x30c>
 80039ee:	4b89      	ldr	r3, [pc, #548]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039f6:	4a87      	ldr	r2, [pc, #540]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 80039f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039fe:	e075      	b.n	8003aec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a00:	4b84      	ldr	r3, [pc, #528]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	069b      	lsls	r3, r3, #26
 8003a0e:	4981      	ldr	r1, [pc, #516]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a14:	e06a      	b.n	8003aec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a16:	4b7f      	ldr	r3, [pc, #508]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	061b      	lsls	r3, r3, #24
 8003a24:	497b      	ldr	r1, [pc, #492]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a2a:	e05f      	b.n	8003aec <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d042      	beq.n	8003aba <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a34:	4b77      	ldr	r3, [pc, #476]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a76      	ldr	r2, [pc, #472]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fd fc54 	bl	80012ec <HAL_GetTick>
 8003a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a48:	f7fd fc50 	bl	80012ec <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e255      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a5a:	4b6e      	ldr	r3, [pc, #440]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a66:	f7fd fc6f 	bl	8001348 <HAL_GetREVID>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d817      	bhi.n	8003aa4 <HAL_RCC_OscConfig+0x3b0>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d108      	bne.n	8003a8e <HAL_RCC_OscConfig+0x39a>
 8003a7c:	4b65      	ldr	r3, [pc, #404]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a84:	4a63      	ldr	r2, [pc, #396]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003a86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a8a:	6053      	str	r3, [r2, #4]
 8003a8c:	e02e      	b.n	8003aec <HAL_RCC_OscConfig+0x3f8>
 8003a8e:	4b61      	ldr	r3, [pc, #388]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	069b      	lsls	r3, r3, #26
 8003a9c:	495d      	ldr	r1, [pc, #372]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]
 8003aa2:	e023      	b.n	8003aec <HAL_RCC_OscConfig+0x3f8>
 8003aa4:	4b5b      	ldr	r3, [pc, #364]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	061b      	lsls	r3, r3, #24
 8003ab2:	4958      	ldr	r1, [pc, #352]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60cb      	str	r3, [r1, #12]
 8003ab8:	e018      	b.n	8003aec <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003aba:	4b56      	ldr	r3, [pc, #344]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a55      	ldr	r2, [pc, #340]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7fd fc11 	bl	80012ec <HAL_GetTick>
 8003aca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003ace:	f7fd fc0d 	bl	80012ec <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e212      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ae0:	4b4c      	ldr	r3, [pc, #304]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f0      	bne.n	8003ace <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d036      	beq.n	8003b66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d019      	beq.n	8003b34 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b00:	4b44      	ldr	r3, [pc, #272]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b04:	4a43      	ldr	r2, [pc, #268]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0c:	f7fd fbee 	bl	80012ec <HAL_GetTick>
 8003b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b14:	f7fd fbea 	bl	80012ec <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1ef      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b26:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x420>
 8003b32:	e018      	b.n	8003b66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b34:	4b37      	ldr	r3, [pc, #220]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b38:	4a36      	ldr	r2, [pc, #216]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003b3a:	f023 0301 	bic.w	r3, r3, #1
 8003b3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fd fbd4 	bl	80012ec <HAL_GetTick>
 8003b44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b48:	f7fd fbd0 	bl	80012ec <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e1d5      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b5a:	4b2e      	ldr	r3, [pc, #184]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d036      	beq.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d019      	beq.n	8003bae <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b7a:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b86:	f7fd fbb1 	bl	80012ec <HAL_GetTick>
 8003b8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b8e:	f7fd fbad 	bl	80012ec <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1b2      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ba0:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x49a>
 8003bac:	e018      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bae:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bba:	f7fd fb97 	bl	80012ec <HAL_GetTick>
 8003bbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003bc2:	f7fd fb93 	bl	80012ec <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e198      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <HAL_RCC_OscConfig+0x520>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f0      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8085 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_RCC_OscConfig+0x524>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a09      	ldr	r2, [pc, #36]	; (8003c18 <HAL_RCC_OscConfig+0x524>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bfa:	f7fd fb77 	bl	80012ec <HAL_GetTick>
 8003bfe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c00:	e00c      	b.n	8003c1c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c02:	f7fd fb73 	bl	80012ec <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b64      	cmp	r3, #100	; 0x64
 8003c0e:	d905      	bls.n	8003c1c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e178      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
 8003c14:	58024400 	.word	0x58024400
 8003c18:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c1c:	4b96      	ldr	r3, [pc, #600]	; (8003e78 <HAL_RCC_OscConfig+0x784>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0ec      	beq.n	8003c02 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x54a>
 8003c30:	4b92      	ldr	r3, [pc, #584]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	4a91      	ldr	r2, [pc, #580]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3c:	e02d      	b.n	8003c9a <HAL_RCC_OscConfig+0x5a6>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x56c>
 8003c46:	4b8d      	ldr	r3, [pc, #564]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	4a8c      	ldr	r2, [pc, #560]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	6713      	str	r3, [r2, #112]	; 0x70
 8003c52:	4b8a      	ldr	r3, [pc, #552]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a89      	ldr	r2, [pc, #548]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003c58:	f023 0304 	bic.w	r3, r3, #4
 8003c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5e:	e01c      	b.n	8003c9a <HAL_RCC_OscConfig+0x5a6>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b05      	cmp	r3, #5
 8003c66:	d10c      	bne.n	8003c82 <HAL_RCC_OscConfig+0x58e>
 8003c68:	4b84      	ldr	r3, [pc, #528]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	4a83      	ldr	r2, [pc, #524]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	6713      	str	r3, [r2, #112]	; 0x70
 8003c74:	4b81      	ldr	r3, [pc, #516]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	4a80      	ldr	r2, [pc, #512]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c80:	e00b      	b.n	8003c9a <HAL_RCC_OscConfig+0x5a6>
 8003c82:	4b7e      	ldr	r3, [pc, #504]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	4a7d      	ldr	r2, [pc, #500]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8e:	4b7b      	ldr	r3, [pc, #492]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	4a7a      	ldr	r2, [pc, #488]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003c94:	f023 0304 	bic.w	r3, r3, #4
 8003c98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d015      	beq.n	8003cce <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca2:	f7fd fb23 	bl	80012ec <HAL_GetTick>
 8003ca6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fd fb1f 	bl	80012ec <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e122      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cc0:	4b6e      	ldr	r3, [pc, #440]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ee      	beq.n	8003caa <HAL_RCC_OscConfig+0x5b6>
 8003ccc:	e014      	b.n	8003cf8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fd fb0d 	bl	80012ec <HAL_GetTick>
 8003cd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cd4:	e00a      	b.n	8003cec <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd6:	f7fd fb09 	bl	80012ec <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e10c      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cec:	4b63      	ldr	r3, [pc, #396]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1ee      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8101 	beq.w	8003f04 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d02:	4b5e      	ldr	r3, [pc, #376]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d0a:	2b18      	cmp	r3, #24
 8003d0c:	f000 80bc 	beq.w	8003e88 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	f040 8095 	bne.w	8003e44 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1a:	4b58      	ldr	r3, [pc, #352]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a57      	ldr	r2, [pc, #348]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fd fae1 	bl	80012ec <HAL_GetTick>
 8003d2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2e:	f7fd fadd 	bl	80012ec <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e0e2      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d40:	4b4e      	ldr	r3, [pc, #312]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f0      	bne.n	8003d2e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d4c:	4b4b      	ldr	r3, [pc, #300]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d50:	4b4b      	ldr	r3, [pc, #300]	; (8003e80 <HAL_RCC_OscConfig+0x78c>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d5c:	0112      	lsls	r2, r2, #4
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	4946      	ldr	r1, [pc, #280]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	628b      	str	r3, [r1, #40]	; 0x28
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	3b01      	subs	r3, #1
 8003d76:	025b      	lsls	r3, r3, #9
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	3b01      	subs	r3, #1
 8003d82:	041b      	lsls	r3, r3, #16
 8003d84:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	061b      	lsls	r3, r3, #24
 8003d92:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d96:	4939      	ldr	r1, [pc, #228]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d9c:	4b37      	ldr	r3, [pc, #220]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	4a36      	ldr	r2, [pc, #216]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003da8:	4b34      	ldr	r3, [pc, #208]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dac:	4b35      	ldr	r3, [pc, #212]	; (8003e84 <HAL_RCC_OscConfig+0x790>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003db4:	00d2      	lsls	r2, r2, #3
 8003db6:	4931      	ldr	r1, [pc, #196]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003dbc:	4b2f      	ldr	r3, [pc, #188]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	f023 020c 	bic.w	r2, r3, #12
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	492c      	ldr	r1, [pc, #176]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003dce:	4b2b      	ldr	r3, [pc, #172]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	f023 0202 	bic.w	r2, r3, #2
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	4928      	ldr	r1, [pc, #160]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003de0:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	4a25      	ldr	r2, [pc, #148]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dec:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	4a22      	ldr	r2, [pc, #136]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003df8:	4b20      	ldr	r3, [pc, #128]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	4a1f      	ldr	r2, [pc, #124]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fd fa66 	bl	80012ec <HAL_GetTick>
 8003e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e24:	f7fd fa62 	bl	80012ec <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e067      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e36:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0x730>
 8003e42:	e05f      	b.n	8003f04 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e44:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a0c      	ldr	r2, [pc, #48]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7fd fa4c 	bl	80012ec <HAL_GetTick>
 8003e54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e58:	f7fd fa48 	bl	80012ec <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e04d      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e6a:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <HAL_RCC_OscConfig+0x788>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x764>
 8003e76:	e045      	b.n	8003f04 <HAL_RCC_OscConfig+0x810>
 8003e78:	58024800 	.word	0x58024800
 8003e7c:	58024400 	.word	0x58024400
 8003e80:	fffffc0c 	.word	0xfffffc0c
 8003e84:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e88:	4b21      	ldr	r3, [pc, #132]	; (8003f10 <HAL_RCC_OscConfig+0x81c>)
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_RCC_OscConfig+0x81c>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d031      	beq.n	8003f00 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f003 0203 	and.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d12a      	bne.n	8003f00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d122      	bne.n	8003f00 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d11a      	bne.n	8003f00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	0a5b      	lsrs	r3, r3, #9
 8003ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d111      	bne.n	8003f00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	0c1b      	lsrs	r3, r3, #16
 8003ee0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d108      	bne.n	8003f00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	0e1b      	lsrs	r3, r3, #24
 8003ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3730      	adds	r7, #48	; 0x30
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	58024400 	.word	0x58024400

08003f14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e19c      	b.n	8004262 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f28:	4b8a      	ldr	r3, [pc, #552]	; (8004154 <HAL_RCC_ClockConfig+0x240>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d910      	bls.n	8003f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f36:	4b87      	ldr	r3, [pc, #540]	; (8004154 <HAL_RCC_ClockConfig+0x240>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 020f 	bic.w	r2, r3, #15
 8003f3e:	4985      	ldr	r1, [pc, #532]	; (8004154 <HAL_RCC_ClockConfig+0x240>)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b83      	ldr	r3, [pc, #524]	; (8004154 <HAL_RCC_ClockConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e184      	b.n	8004262 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d010      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	4b7b      	ldr	r3, [pc, #492]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d908      	bls.n	8003f86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f74:	4b78      	ldr	r3, [pc, #480]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	4975      	ldr	r1, [pc, #468]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d010      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	4b70      	ldr	r3, [pc, #448]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d908      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fa2:	4b6d      	ldr	r3, [pc, #436]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	496a      	ldr	r1, [pc, #424]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d010      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699a      	ldr	r2, [r3, #24]
 8003fc4:	4b64      	ldr	r3, [pc, #400]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d908      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fd0:	4b61      	ldr	r3, [pc, #388]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	495e      	ldr	r1, [pc, #376]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d010      	beq.n	8004010 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69da      	ldr	r2, [r3, #28]
 8003ff2:	4b59      	ldr	r3, [pc, #356]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d908      	bls.n	8004010 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ffe:	4b56      	ldr	r3, [pc, #344]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4953      	ldr	r1, [pc, #332]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 800400c:	4313      	orrs	r3, r2
 800400e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d010      	beq.n	800403e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	4b4d      	ldr	r3, [pc, #308]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	429a      	cmp	r2, r3
 800402a:	d908      	bls.n	800403e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402c:	4b4a      	ldr	r3, [pc, #296]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f023 020f 	bic.w	r2, r3, #15
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4947      	ldr	r1, [pc, #284]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 800403a:	4313      	orrs	r3, r2
 800403c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d055      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800404a:	4b43      	ldr	r3, [pc, #268]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	4940      	ldr	r1, [pc, #256]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8004058:	4313      	orrs	r3, r2
 800405a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d107      	bne.n	8004074 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004064:	4b3c      	ldr	r3, [pc, #240]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d121      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0f6      	b.n	8004262 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d107      	bne.n	800408c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800407c:	4b36      	ldr	r3, [pc, #216]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d115      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0ea      	b.n	8004262 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004094:	4b30      	ldr	r3, [pc, #192]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0de      	b.n	8004262 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040a4:	4b2c      	ldr	r3, [pc, #176]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0d6      	b.n	8004262 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040b4:	4b28      	ldr	r3, [pc, #160]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f023 0207 	bic.w	r2, r3, #7
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4925      	ldr	r1, [pc, #148]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fd f911 	bl	80012ec <HAL_GetTick>
 80040ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ce:	f7fd f90d 	bl	80012ec <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e0be      	b.n	8004262 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e4:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d1eb      	bne.n	80040ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d010      	beq.n	8004124 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	429a      	cmp	r2, r3
 8004110:	d208      	bcs.n	8004124 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f023 020f 	bic.w	r2, r3, #15
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	490e      	ldr	r1, [pc, #56]	; (8004158 <HAL_RCC_ClockConfig+0x244>)
 8004120:	4313      	orrs	r3, r2
 8004122:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_RCC_ClockConfig+0x240>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d214      	bcs.n	800415c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <HAL_RCC_ClockConfig+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 020f 	bic.w	r2, r3, #15
 800413a:	4906      	ldr	r1, [pc, #24]	; (8004154 <HAL_RCC_ClockConfig+0x240>)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b04      	ldr	r3, [pc, #16]	; (8004154 <HAL_RCC_ClockConfig+0x240>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e086      	b.n	8004262 <HAL_RCC_ClockConfig+0x34e>
 8004154:	52002000 	.word	0x52002000
 8004158:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d010      	beq.n	800418a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	4b3f      	ldr	r3, [pc, #252]	; (800426c <HAL_RCC_ClockConfig+0x358>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004174:	429a      	cmp	r2, r3
 8004176:	d208      	bcs.n	800418a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004178:	4b3c      	ldr	r3, [pc, #240]	; (800426c <HAL_RCC_ClockConfig+0x358>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	4939      	ldr	r1, [pc, #228]	; (800426c <HAL_RCC_ClockConfig+0x358>)
 8004186:	4313      	orrs	r3, r2
 8004188:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d010      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	4b34      	ldr	r3, [pc, #208]	; (800426c <HAL_RCC_ClockConfig+0x358>)
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d208      	bcs.n	80041b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041a6:	4b31      	ldr	r3, [pc, #196]	; (800426c <HAL_RCC_ClockConfig+0x358>)
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	492e      	ldr	r1, [pc, #184]	; (800426c <HAL_RCC_ClockConfig+0x358>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d010      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	4b28      	ldr	r3, [pc, #160]	; (800426c <HAL_RCC_ClockConfig+0x358>)
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d208      	bcs.n	80041e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041d4:	4b25      	ldr	r3, [pc, #148]	; (800426c <HAL_RCC_ClockConfig+0x358>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	4922      	ldr	r1, [pc, #136]	; (800426c <HAL_RCC_ClockConfig+0x358>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d010      	beq.n	8004214 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69da      	ldr	r2, [r3, #28]
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_RCC_ClockConfig+0x358>)
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041fe:	429a      	cmp	r2, r3
 8004200:	d208      	bcs.n	8004214 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004202:	4b1a      	ldr	r3, [pc, #104]	; (800426c <HAL_RCC_ClockConfig+0x358>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4917      	ldr	r1, [pc, #92]	; (800426c <HAL_RCC_ClockConfig+0x358>)
 8004210:	4313      	orrs	r3, r2
 8004212:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004214:	f000 f834 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 8004218:	4601      	mov	r1, r0
 800421a:	4b14      	ldr	r3, [pc, #80]	; (800426c <HAL_RCC_ClockConfig+0x358>)
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	4a12      	ldr	r2, [pc, #72]	; (8004270 <HAL_RCC_ClockConfig+0x35c>)
 8004226:	5cd3      	ldrb	r3, [r2, r3]
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	fa21 f303 	lsr.w	r3, r1, r3
 8004230:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004232:	4b0e      	ldr	r3, [pc, #56]	; (800426c <HAL_RCC_ClockConfig+0x358>)
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	4a0d      	ldr	r2, [pc, #52]	; (8004270 <HAL_RCC_ClockConfig+0x35c>)
 800423c:	5cd3      	ldrb	r3, [r2, r3]
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
 8004248:	4a0a      	ldr	r2, [pc, #40]	; (8004274 <HAL_RCC_ClockConfig+0x360>)
 800424a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800424c:	4a0a      	ldr	r2, [pc, #40]	; (8004278 <HAL_RCC_ClockConfig+0x364>)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004252:	4b0a      	ldr	r3, [pc, #40]	; (800427c <HAL_RCC_ClockConfig+0x368>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7fc fffe 	bl	8001258 <HAL_InitTick>
 800425c:	4603      	mov	r3, r0
 800425e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004260:	7bfb      	ldrb	r3, [r7, #15]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	58024400 	.word	0x58024400
 8004270:	08008ab8 	.word	0x08008ab8
 8004274:	20000004 	.word	0x20000004
 8004278:	20000000 	.word	0x20000000
 800427c:	20000008 	.word	0x20000008

08004280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004280:	b480      	push	{r7}
 8004282:	b089      	sub	sp, #36	; 0x24
 8004284:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004286:	4baf      	ldr	r3, [pc, #700]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800428e:	2b18      	cmp	r3, #24
 8004290:	f200 814e 	bhi.w	8004530 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004294:	a201      	add	r2, pc, #4	; (adr r2, 800429c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429a:	bf00      	nop
 800429c:	08004301 	.word	0x08004301
 80042a0:	08004531 	.word	0x08004531
 80042a4:	08004531 	.word	0x08004531
 80042a8:	08004531 	.word	0x08004531
 80042ac:	08004531 	.word	0x08004531
 80042b0:	08004531 	.word	0x08004531
 80042b4:	08004531 	.word	0x08004531
 80042b8:	08004531 	.word	0x08004531
 80042bc:	08004327 	.word	0x08004327
 80042c0:	08004531 	.word	0x08004531
 80042c4:	08004531 	.word	0x08004531
 80042c8:	08004531 	.word	0x08004531
 80042cc:	08004531 	.word	0x08004531
 80042d0:	08004531 	.word	0x08004531
 80042d4:	08004531 	.word	0x08004531
 80042d8:	08004531 	.word	0x08004531
 80042dc:	0800432d 	.word	0x0800432d
 80042e0:	08004531 	.word	0x08004531
 80042e4:	08004531 	.word	0x08004531
 80042e8:	08004531 	.word	0x08004531
 80042ec:	08004531 	.word	0x08004531
 80042f0:	08004531 	.word	0x08004531
 80042f4:	08004531 	.word	0x08004531
 80042f8:	08004531 	.word	0x08004531
 80042fc:	08004333 	.word	0x08004333
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004300:	4b90      	ldr	r3, [pc, #576]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d009      	beq.n	8004320 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800430c:	4b8d      	ldr	r3, [pc, #564]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	08db      	lsrs	r3, r3, #3
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	4a8c      	ldr	r2, [pc, #560]	; (8004548 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
 800431c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800431e:	e10a      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004320:	4b89      	ldr	r3, [pc, #548]	; (8004548 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004322:	61bb      	str	r3, [r7, #24]
    break;
 8004324:	e107      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004326:	4b89      	ldr	r3, [pc, #548]	; (800454c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004328:	61bb      	str	r3, [r7, #24]
    break;
 800432a:	e104      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800432c:	4b88      	ldr	r3, [pc, #544]	; (8004550 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800432e:	61bb      	str	r3, [r7, #24]
    break;
 8004330:	e101      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004332:	4b84      	ldr	r3, [pc, #528]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800433c:	4b81      	ldr	r3, [pc, #516]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004346:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004348:	4b7e      	ldr	r3, [pc, #504]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004352:	4b7c      	ldr	r3, [pc, #496]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004356:	08db      	lsrs	r3, r3, #3
 8004358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80da 	beq.w	800452a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d05a      	beq.n	8004432 <HAL_RCC_GetSysClockFreq+0x1b2>
 800437c:	2b01      	cmp	r3, #1
 800437e:	d302      	bcc.n	8004386 <HAL_RCC_GetSysClockFreq+0x106>
 8004380:	2b02      	cmp	r3, #2
 8004382:	d078      	beq.n	8004476 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004384:	e099      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004386:	4b6f      	ldr	r3, [pc, #444]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d02d      	beq.n	80043ee <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004392:	4b6c      	ldr	r3, [pc, #432]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	08db      	lsrs	r3, r3, #3
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	4a6a      	ldr	r2, [pc, #424]	; (8004548 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800439e:	fa22 f303 	lsr.w	r3, r2, r3
 80043a2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	ee07 3a90 	vmov	s15, r3
 80043b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043bc:	4b61      	ldr	r3, [pc, #388]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c4:	ee07 3a90 	vmov	s15, r3
 80043c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80043d0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004554 <HAL_RCC_GetSysClockFreq+0x2d4>
 80043d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80043ec:	e087      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	ee07 3a90 	vmov	s15, r3
 80043f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004558 <HAL_RCC_GetSysClockFreq+0x2d8>
 80043fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004400:	4b50      	ldr	r3, [pc, #320]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004410:	ed97 6a02 	vldr	s12, [r7, #8]
 8004414:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004554 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004418:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004420:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004424:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004430:	e065      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	ee07 3a90 	vmov	s15, r3
 8004438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800455c <HAL_RCC_GetSysClockFreq+0x2dc>
 8004440:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004444:	4b3f      	ldr	r3, [pc, #252]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004454:	ed97 6a02 	vldr	s12, [r7, #8]
 8004458:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004554 <HAL_RCC_GetSysClockFreq+0x2d4>
 800445c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004460:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004464:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004470:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004474:	e043      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	ee07 3a90 	vmov	s15, r3
 800447c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004480:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004560 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004484:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004488:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004490:	ee07 3a90 	vmov	s15, r3
 8004494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004498:	ed97 6a02 	vldr	s12, [r7, #8]
 800449c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004554 <HAL_RCC_GetSysClockFreq+0x2d4>
 80044a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044b8:	e021      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	ee07 3a90 	vmov	s15, r3
 80044c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800455c <HAL_RCC_GetSysClockFreq+0x2dc>
 80044c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044cc:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d4:	ee07 3a90 	vmov	s15, r3
 80044d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80044e0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004554 <HAL_RCC_GetSysClockFreq+0x2d4>
 80044e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044fc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80044fe:	4b11      	ldr	r3, [pc, #68]	; (8004544 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	0a5b      	lsrs	r3, r3, #9
 8004504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004508:	3301      	adds	r3, #1
 800450a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004516:	edd7 6a07 	vldr	s13, [r7, #28]
 800451a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800451e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004522:	ee17 3a90 	vmov	r3, s15
 8004526:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004528:	e005      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	61bb      	str	r3, [r7, #24]
    break;
 800452e:	e002      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004532:	61bb      	str	r3, [r7, #24]
    break;
 8004534:	bf00      	nop
  }

  return sysclockfreq;
 8004536:	69bb      	ldr	r3, [r7, #24]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3724      	adds	r7, #36	; 0x24
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	58024400 	.word	0x58024400
 8004548:	03d09000 	.word	0x03d09000
 800454c:	003d0900 	.word	0x003d0900
 8004550:	007a1200 	.word	0x007a1200
 8004554:	46000000 	.word	0x46000000
 8004558:	4c742400 	.word	0x4c742400
 800455c:	4a742400 	.word	0x4a742400
 8004560:	4af42400 	.word	0x4af42400

08004564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800456a:	f7ff fe89 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 800456e:	4601      	mov	r1, r0
 8004570:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	0a1b      	lsrs	r3, r3, #8
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	4a0f      	ldr	r2, [pc, #60]	; (80045b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800457c:	5cd3      	ldrb	r3, [r2, r3]
 800457e:	f003 031f 	and.w	r3, r3, #31
 8004582:	fa21 f303 	lsr.w	r3, r1, r3
 8004586:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004588:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	4a09      	ldr	r2, [pc, #36]	; (80045b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004592:	5cd3      	ldrb	r3, [r2, r3]
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	fa22 f303 	lsr.w	r3, r2, r3
 800459e:	4a07      	ldr	r2, [pc, #28]	; (80045bc <HAL_RCC_GetHCLKFreq+0x58>)
 80045a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045a2:	4a07      	ldr	r2, [pc, #28]	; (80045c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <HAL_RCC_GetHCLKFreq+0x58>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	58024400 	.word	0x58024400
 80045b8:	08008ab8 	.word	0x08008ab8
 80045bc:	20000004 	.word	0x20000004
 80045c0:	20000000 	.word	0x20000000

080045c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80045c8:	f7ff ffcc 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 80045cc:	4601      	mov	r1, r0
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	091b      	lsrs	r3, r3, #4
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	4a04      	ldr	r2, [pc, #16]	; (80045ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80045da:	5cd3      	ldrb	r3, [r2, r3]
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	58024400 	.word	0x58024400
 80045ec:	08008ab8 	.word	0x08008ab8

080045f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80045f4:	f7ff ffb6 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 80045f8:	4601      	mov	r1, r0
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	0a1b      	lsrs	r3, r3, #8
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	4a04      	ldr	r2, [pc, #16]	; (8004618 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004606:	5cd3      	ldrb	r3, [r2, r3]
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	58024400 	.word	0x58024400
 8004618:	08008ab8 	.word	0x08008ab8

0800461c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004624:	2300      	movs	r3, #0
 8004626:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004628:	2300      	movs	r3, #0
 800462a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d03d      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800463c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004640:	d013      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004646:	d802      	bhi.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800464c:	e01f      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800464e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004652:	d013      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004654:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004658:	d01c      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800465a:	e018      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465c:	4baf      	ldr	r3, [pc, #700]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	4aae      	ldr	r2, [pc, #696]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004668:	e015      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3304      	adds	r3, #4
 800466e:	2102      	movs	r1, #2
 8004670:	4618      	mov	r0, r3
 8004672:	f001 fd33 	bl	80060dc <RCCEx_PLL2_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800467a:	e00c      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3324      	adds	r3, #36	; 0x24
 8004680:	2102      	movs	r1, #2
 8004682:	4618      	mov	r0, r3
 8004684:	f001 fddc 	bl	8006240 <RCCEx_PLL3_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800468c:	e003      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	75fb      	strb	r3, [r7, #23]
      break;
 8004692:	e000      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800469c:	4b9f      	ldr	r3, [pc, #636]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800469e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a8:	499c      	ldr	r1, [pc, #624]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	650b      	str	r3, [r1, #80]	; 0x50
 80046ae:	e001      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d03d      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d826      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	080046e5 	.word	0x080046e5
 80046d4:	080046f3 	.word	0x080046f3
 80046d8:	08004705 	.word	0x08004705
 80046dc:	0800471d 	.word	0x0800471d
 80046e0:	0800471d 	.word	0x0800471d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e4:	4b8d      	ldr	r3, [pc, #564]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	4a8c      	ldr	r2, [pc, #560]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046f0:	e015      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f001 fcef 	bl	80060dc <RCCEx_PLL2_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004702:	e00c      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3324      	adds	r3, #36	; 0x24
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f001 fd98 	bl	8006240 <RCCEx_PLL3_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004714:	e003      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	75fb      	strb	r3, [r7, #23]
      break;
 800471a:	e000      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800471c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800471e:	7dfb      	ldrb	r3, [r7, #23]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004724:	4b7d      	ldr	r3, [pc, #500]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004728:	f023 0207 	bic.w	r2, r3, #7
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	497a      	ldr	r1, [pc, #488]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004732:	4313      	orrs	r3, r2
 8004734:	650b      	str	r3, [r1, #80]	; 0x50
 8004736:	e001      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004738:	7dfb      	ldrb	r3, [r7, #23]
 800473a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004744:	2b00      	cmp	r3, #0
 8004746:	d03e      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	2b80      	cmp	r3, #128	; 0x80
 800474e:	d01c      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004750:	2b80      	cmp	r3, #128	; 0x80
 8004752:	d804      	bhi.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d00d      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800475c:	e01e      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800475e:	2bc0      	cmp	r3, #192	; 0xc0
 8004760:	d01f      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004766:	d01e      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004768:	e018      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800476a:	4b6c      	ldr	r3, [pc, #432]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	4a6b      	ldr	r2, [pc, #428]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004774:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004776:	e017      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	2100      	movs	r1, #0
 800477e:	4618      	mov	r0, r3
 8004780:	f001 fcac 	bl	80060dc <RCCEx_PLL2_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004788:	e00e      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3324      	adds	r3, #36	; 0x24
 800478e:	2100      	movs	r1, #0
 8004790:	4618      	mov	r0, r3
 8004792:	f001 fd55 	bl	8006240 <RCCEx_PLL3_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800479a:	e005      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	75fb      	strb	r3, [r7, #23]
      break;
 80047a0:	e002      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80047a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80047ae:	4b5b      	ldr	r3, [pc, #364]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	4958      	ldr	r1, [pc, #352]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	650b      	str	r3, [r1, #80]	; 0x50
 80047c0:	e001      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
 80047c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d044      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047dc:	d01f      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80047de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e2:	d805      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047ec:	d00e      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80047ee:	e01f      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80047f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80047f4:	d01f      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80047f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047fa:	d01e      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80047fc:	e018      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047fe:	4b47      	ldr	r3, [pc, #284]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	4a46      	ldr	r2, [pc, #280]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004808:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800480a:	e017      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3304      	adds	r3, #4
 8004810:	2100      	movs	r1, #0
 8004812:	4618      	mov	r0, r3
 8004814:	f001 fc62 	bl	80060dc <RCCEx_PLL2_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800481c:	e00e      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3324      	adds	r3, #36	; 0x24
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f001 fd0b 	bl	8006240 <RCCEx_PLL3_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800482e:	e005      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	75fb      	strb	r3, [r7, #23]
      break;
 8004834:	e002      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004836:	bf00      	nop
 8004838:	e000      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800483a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800483c:	7dfb      	ldrb	r3, [r7, #23]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004842:	4b36      	ldr	r3, [pc, #216]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004846:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004850:	4932      	ldr	r1, [pc, #200]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004852:	4313      	orrs	r3, r2
 8004854:	658b      	str	r3, [r1, #88]	; 0x58
 8004856:	e001      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004858:	7dfb      	ldrb	r3, [r7, #23]
 800485a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004864:	2b00      	cmp	r3, #0
 8004866:	d044      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800486e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004872:	d01f      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004874:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004878:	d805      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800487e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004882:	d00e      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004884:	e01f      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004886:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800488a:	d01f      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800488c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004890:	d01e      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004892:	e018      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004894:	4b21      	ldr	r3, [pc, #132]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	4a20      	ldr	r2, [pc, #128]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800489a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800489e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048a0:	e017      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3304      	adds	r3, #4
 80048a6:	2100      	movs	r1, #0
 80048a8:	4618      	mov	r0, r3
 80048aa:	f001 fc17 	bl	80060dc <RCCEx_PLL2_Config>
 80048ae:	4603      	mov	r3, r0
 80048b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80048b2:	e00e      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3324      	adds	r3, #36	; 0x24
 80048b8:	2100      	movs	r1, #0
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 fcc0 	bl	8006240 <RCCEx_PLL3_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048c4:	e005      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	75fb      	strb	r3, [r7, #23]
      break;
 80048ca:	e002      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80048cc:	bf00      	nop
 80048ce:	e000      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80048d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80048d8:	4b10      	ldr	r3, [pc, #64]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048e6:	490d      	ldr	r1, [pc, #52]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	658b      	str	r3, [r1, #88]	; 0x58
 80048ec:	e001      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
 80048f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d035      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004902:	2b10      	cmp	r3, #16
 8004904:	d00c      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004906:	2b10      	cmp	r3, #16
 8004908:	d802      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01b      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800490e:	e017      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004910:	2b20      	cmp	r3, #32
 8004912:	d00c      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004914:	2b30      	cmp	r3, #48	; 0x30
 8004916:	d018      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004918:	e012      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800491a:	bf00      	nop
 800491c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004920:	4baf      	ldr	r3, [pc, #700]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	4aae      	ldr	r2, [pc, #696]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800492a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800492c:	e00e      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3304      	adds	r3, #4
 8004932:	2102      	movs	r1, #2
 8004934:	4618      	mov	r0, r3
 8004936:	f001 fbd1 	bl	80060dc <RCCEx_PLL2_Config>
 800493a:	4603      	mov	r3, r0
 800493c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800493e:	e005      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	75fb      	strb	r3, [r7, #23]
      break;
 8004944:	e002      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800494a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800494c:	7dfb      	ldrb	r3, [r7, #23]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004952:	4ba3      	ldr	r3, [pc, #652]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495e:	49a0      	ldr	r1, [pc, #640]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004960:	4313      	orrs	r3, r2
 8004962:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004964:	e001      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004966:	7dfb      	ldrb	r3, [r7, #23]
 8004968:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d042      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800497e:	d01f      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004984:	d805      	bhi.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800498a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800498e:	d00e      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004990:	e01f      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004992:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004996:	d01f      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800499c:	d01e      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800499e:	e018      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a0:	4b8f      	ldr	r3, [pc, #572]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	4a8e      	ldr	r2, [pc, #568]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049ac:	e017      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	2100      	movs	r1, #0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 fb91 	bl	80060dc <RCCEx_PLL2_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049be:	e00e      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3324      	adds	r3, #36	; 0x24
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 fc3a 	bl	8006240 <RCCEx_PLL3_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049d0:	e005      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	75fb      	strb	r3, [r7, #23]
      break;
 80049d6:	e002      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80049d8:	bf00      	nop
 80049da:	e000      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80049dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049de:	7dfb      	ldrb	r3, [r7, #23]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049e4:	4b7e      	ldr	r3, [pc, #504]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f0:	497b      	ldr	r1, [pc, #492]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	650b      	str	r3, [r1, #80]	; 0x50
 80049f6:	e001      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
 80049fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d042      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a10:	d01b      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004a12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a16:	d805      	bhi.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d022      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004a22:	e01b      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004a24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a28:	d01d      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004a2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a2e:	d01c      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004a30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a34:	d01b      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004a36:	e011      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f001 fb4c 	bl	80060dc <RCCEx_PLL2_Config>
 8004a44:	4603      	mov	r3, r0
 8004a46:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a48:	e012      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3324      	adds	r3, #36	; 0x24
 8004a4e:	2101      	movs	r1, #1
 8004a50:	4618      	mov	r0, r3
 8004a52:	f001 fbf5 	bl	8006240 <RCCEx_PLL3_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a5a:	e009      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a60:	e006      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004a62:	bf00      	nop
 8004a64:	e004      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004a66:	bf00      	nop
 8004a68:	e002      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004a6a:	bf00      	nop
 8004a6c:	e000      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a76:	4b5a      	ldr	r3, [pc, #360]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a82:	4957      	ldr	r1, [pc, #348]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	650b      	str	r3, [r1, #80]	; 0x50
 8004a88:	e001      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
 8004a8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d044      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa4:	d01b      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aaa:	d805      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d022      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004ab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ab4:	d00a      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004ab6:	e01b      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abc:	d01d      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ac2:	d01c      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004ac4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ac8:	d01b      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004aca:	e011      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 fb02 	bl	80060dc <RCCEx_PLL2_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004adc:	e012      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3324      	adds	r3, #36	; 0x24
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f001 fbab 	bl	8006240 <RCCEx_PLL3_Config>
 8004aea:	4603      	mov	r3, r0
 8004aec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004aee:	e009      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	75fb      	strb	r3, [r7, #23]
      break;
 8004af4:	e006      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004af6:	bf00      	nop
 8004af8:	e004      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004afa:	bf00      	nop
 8004afc:	e002      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004afe:	bf00      	nop
 8004b00:	e000      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b0a:	4b35      	ldr	r3, [pc, #212]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b18:	4931      	ldr	r1, [pc, #196]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b1e:	e001      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b20:	7dfb      	ldrb	r3, [r7, #23]
 8004b22:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d02d      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b38:	d005      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b3e:	d009      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d013      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004b44:	e00f      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b46:	4b26      	ldr	r3, [pc, #152]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	4a25      	ldr	r2, [pc, #148]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b52:	e00c      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3304      	adds	r3, #4
 8004b58:	2101      	movs	r1, #1
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 fabe 	bl	80060dc <RCCEx_PLL2_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b64:	e003      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	75fb      	strb	r3, [r7, #23]
      break;
 8004b6a:	e000      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004b6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b6e:	7dfb      	ldrb	r3, [r7, #23]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b74:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b80:	4917      	ldr	r1, [pc, #92]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	650b      	str	r3, [r1, #80]	; 0x50
 8004b86:	e001      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
 8004b8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d035      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d81b      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004ba0:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004be5 	.word	0x08004be5
 8004bac:	08004bb9 	.word	0x08004bb9
 8004bb0:	08004bc7 	.word	0x08004bc7
 8004bb4:	08004be5 	.word	0x08004be5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb8:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	4a08      	ldr	r2, [pc, #32]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004bc4:	e00f      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	2102      	movs	r1, #2
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 fa85 	bl	80060dc <RCCEx_PLL2_Config>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004bd6:	e006      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	75fb      	strb	r3, [r7, #23]
      break;
 8004bdc:	e003      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004bde:	bf00      	nop
 8004be0:	58024400 	.word	0x58024400
      break;
 8004be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d109      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004bec:	4bba      	ldr	r3, [pc, #744]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf0:	f023 0203 	bic.w	r2, r3, #3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf8:	49b7      	ldr	r1, [pc, #732]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004bfe:	e001      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
 8004c02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8086 	beq.w	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c12:	4bb2      	ldr	r3, [pc, #712]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4ab1      	ldr	r2, [pc, #708]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c1e:	f7fc fb65 	bl	80012ec <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c24:	e009      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c26:	f7fc fb61 	bl	80012ec <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b64      	cmp	r3, #100	; 0x64
 8004c32:	d902      	bls.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	75fb      	strb	r3, [r7, #23]
        break;
 8004c38:	e005      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c3a:	4ba8      	ldr	r3, [pc, #672]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0ef      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d166      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c4c:	4ba2      	ldr	r3, [pc, #648]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c56:	4053      	eors	r3, r2
 8004c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d013      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c60:	4b9d      	ldr	r3, [pc, #628]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c68:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c6a:	4b9b      	ldr	r3, [pc, #620]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	4a9a      	ldr	r2, [pc, #616]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c74:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c76:	4b98      	ldr	r3, [pc, #608]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7a:	4a97      	ldr	r2, [pc, #604]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c80:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c82:	4a95      	ldr	r2, [pc, #596]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c92:	d115      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fc fb2a 	bl	80012ec <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c9a:	e00b      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9c:	f7fc fb26 	bl	80012ec <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d902      	bls.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	75fb      	strb	r3, [r7, #23]
            break;
 8004cb2:	e005      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cb4:	4b88      	ldr	r3, [pc, #544]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0ed      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d126      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd4:	d10d      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004cd6:	4b80      	ldr	r3, [pc, #512]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ce4:	0919      	lsrs	r1, r3, #4
 8004ce6:	4b7e      	ldr	r3, [pc, #504]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004ce8:	400b      	ands	r3, r1
 8004cea:	497b      	ldr	r1, [pc, #492]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	610b      	str	r3, [r1, #16]
 8004cf0:	e005      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004cf2:	4b79      	ldr	r3, [pc, #484]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	4a78      	ldr	r2, [pc, #480]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cf8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004cfc:	6113      	str	r3, [r2, #16]
 8004cfe:	4b76      	ldr	r3, [pc, #472]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0c:	4972      	ldr	r1, [pc, #456]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	670b      	str	r3, [r1, #112]	; 0x70
 8004d12:	e004      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
 8004d16:	75bb      	strb	r3, [r7, #22]
 8004d18:	e001      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1a:	7dfb      	ldrb	r3, [r7, #23]
 8004d1c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d07d      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d2e:	2b28      	cmp	r3, #40	; 0x28
 8004d30:	d866      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004d32:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d38:	08004e07 	.word	0x08004e07
 8004d3c:	08004e01 	.word	0x08004e01
 8004d40:	08004e01 	.word	0x08004e01
 8004d44:	08004e01 	.word	0x08004e01
 8004d48:	08004e01 	.word	0x08004e01
 8004d4c:	08004e01 	.word	0x08004e01
 8004d50:	08004e01 	.word	0x08004e01
 8004d54:	08004e01 	.word	0x08004e01
 8004d58:	08004ddd 	.word	0x08004ddd
 8004d5c:	08004e01 	.word	0x08004e01
 8004d60:	08004e01 	.word	0x08004e01
 8004d64:	08004e01 	.word	0x08004e01
 8004d68:	08004e01 	.word	0x08004e01
 8004d6c:	08004e01 	.word	0x08004e01
 8004d70:	08004e01 	.word	0x08004e01
 8004d74:	08004e01 	.word	0x08004e01
 8004d78:	08004def 	.word	0x08004def
 8004d7c:	08004e01 	.word	0x08004e01
 8004d80:	08004e01 	.word	0x08004e01
 8004d84:	08004e01 	.word	0x08004e01
 8004d88:	08004e01 	.word	0x08004e01
 8004d8c:	08004e01 	.word	0x08004e01
 8004d90:	08004e01 	.word	0x08004e01
 8004d94:	08004e01 	.word	0x08004e01
 8004d98:	08004e07 	.word	0x08004e07
 8004d9c:	08004e01 	.word	0x08004e01
 8004da0:	08004e01 	.word	0x08004e01
 8004da4:	08004e01 	.word	0x08004e01
 8004da8:	08004e01 	.word	0x08004e01
 8004dac:	08004e01 	.word	0x08004e01
 8004db0:	08004e01 	.word	0x08004e01
 8004db4:	08004e01 	.word	0x08004e01
 8004db8:	08004e07 	.word	0x08004e07
 8004dbc:	08004e01 	.word	0x08004e01
 8004dc0:	08004e01 	.word	0x08004e01
 8004dc4:	08004e01 	.word	0x08004e01
 8004dc8:	08004e01 	.word	0x08004e01
 8004dcc:	08004e01 	.word	0x08004e01
 8004dd0:	08004e01 	.word	0x08004e01
 8004dd4:	08004e01 	.word	0x08004e01
 8004dd8:	08004e07 	.word	0x08004e07
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	2101      	movs	r1, #1
 8004de2:	4618      	mov	r0, r3
 8004de4:	f001 f97a 	bl	80060dc <RCCEx_PLL2_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004dec:	e00c      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3324      	adds	r3, #36	; 0x24
 8004df2:	2101      	movs	r1, #1
 8004df4:	4618      	mov	r0, r3
 8004df6:	f001 fa23 	bl	8006240 <RCCEx_PLL3_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004dfe:	e003      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	75fb      	strb	r3, [r7, #23]
      break;
 8004e04:	e000      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e08:	7dfb      	ldrb	r3, [r7, #23]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e0e:	4b32      	ldr	r3, [pc, #200]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e12:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e1a:	492f      	ldr	r1, [pc, #188]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	654b      	str	r3, [r1, #84]	; 0x54
 8004e20:	e001      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
 8004e24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d037      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d820      	bhi.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004e3a:	a201      	add	r2, pc, #4	; (adr r2, 8004e40 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e40:	08004e83 	.word	0x08004e83
 8004e44:	08004e59 	.word	0x08004e59
 8004e48:	08004e6b 	.word	0x08004e6b
 8004e4c:	08004e83 	.word	0x08004e83
 8004e50:	08004e83 	.word	0x08004e83
 8004e54:	08004e83 	.word	0x08004e83
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 f93c 	bl	80060dc <RCCEx_PLL2_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e68:	e00c      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3324      	adds	r3, #36	; 0x24
 8004e6e:	2101      	movs	r1, #1
 8004e70:	4618      	mov	r0, r3
 8004e72:	f001 f9e5 	bl	8006240 <RCCEx_PLL3_Config>
 8004e76:	4603      	mov	r3, r0
 8004e78:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e7a:	e003      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e80:	e000      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004e82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e84:	7dfb      	ldrb	r3, [r7, #23]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e8a:	4b13      	ldr	r3, [pc, #76]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8e:	f023 0207 	bic.w	r2, r3, #7
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e96:	4910      	ldr	r1, [pc, #64]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	654b      	str	r3, [r1, #84]	; 0x54
 8004e9c:	e001      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ea0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d040      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb4:	2b05      	cmp	r3, #5
 8004eb6:	d827      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004eb8:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004f0f 	.word	0x08004f0f
 8004ec4:	08004ee5 	.word	0x08004ee5
 8004ec8:	08004ef7 	.word	0x08004ef7
 8004ecc:	08004f0f 	.word	0x08004f0f
 8004ed0:	08004f0f 	.word	0x08004f0f
 8004ed4:	08004f0f 	.word	0x08004f0f
 8004ed8:	58024400 	.word	0x58024400
 8004edc:	58024800 	.word	0x58024800
 8004ee0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	2101      	movs	r1, #1
 8004eea:	4618      	mov	r0, r3
 8004eec:	f001 f8f6 	bl	80060dc <RCCEx_PLL2_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ef4:	e00c      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3324      	adds	r3, #36	; 0x24
 8004efa:	2101      	movs	r1, #1
 8004efc:	4618      	mov	r0, r3
 8004efe:	f001 f99f 	bl	8006240 <RCCEx_PLL3_Config>
 8004f02:	4603      	mov	r3, r0
 8004f04:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f06:	e003      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0c:	e000      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10a      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f16:	4bb2      	ldr	r3, [pc, #712]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1a:	f023 0207 	bic.w	r2, r3, #7
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	49ae      	ldr	r1, [pc, #696]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	658b      	str	r3, [r1, #88]	; 0x58
 8004f2a:	e001      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
 8004f2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d044      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f46:	d01b      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f4c:	d805      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d022      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004f52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f56:	d00a      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004f58:	e01b      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5e:	d01d      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f64:	d01c      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004f66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f6a:	d01b      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004f6c:	e011      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3304      	adds	r3, #4
 8004f72:	2100      	movs	r1, #0
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 f8b1 	bl	80060dc <RCCEx_PLL2_Config>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f7e:	e012      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3324      	adds	r3, #36	; 0x24
 8004f84:	2102      	movs	r1, #2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f001 f95a 	bl	8006240 <RCCEx_PLL3_Config>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f90:	e009      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	75fb      	strb	r3, [r7, #23]
      break;
 8004f96:	e006      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004f98:	bf00      	nop
 8004f9a:	e004      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004f9c:	bf00      	nop
 8004f9e:	e002      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004fa0:	bf00      	nop
 8004fa2:	e000      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fac:	4b8c      	ldr	r3, [pc, #560]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fba:	4989      	ldr	r1, [pc, #548]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	654b      	str	r3, [r1, #84]	; 0x54
 8004fc0:	e001      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
 8004fc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d044      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fdc:	d01b      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe2:	d805      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d022      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fec:	d00a      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004fee:	e01b      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff4:	d01d      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004ff6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ffa:	d01c      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004ffc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005000:	d01b      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005002:	e011      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3304      	adds	r3, #4
 8005008:	2100      	movs	r1, #0
 800500a:	4618      	mov	r0, r3
 800500c:	f001 f866 	bl	80060dc <RCCEx_PLL2_Config>
 8005010:	4603      	mov	r3, r0
 8005012:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005014:	e012      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3324      	adds	r3, #36	; 0x24
 800501a:	2102      	movs	r1, #2
 800501c:	4618      	mov	r0, r3
 800501e:	f001 f90f 	bl	8006240 <RCCEx_PLL3_Config>
 8005022:	4603      	mov	r3, r0
 8005024:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005026:	e009      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	75fb      	strb	r3, [r7, #23]
      break;
 800502c:	e006      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800502e:	bf00      	nop
 8005030:	e004      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005032:	bf00      	nop
 8005034:	e002      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005036:	bf00      	nop
 8005038:	e000      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800503a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800503c:	7dfb      	ldrb	r3, [r7, #23]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10a      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005042:	4b67      	ldr	r3, [pc, #412]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005046:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005050:	4963      	ldr	r1, [pc, #396]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005052:	4313      	orrs	r3, r2
 8005054:	658b      	str	r3, [r1, #88]	; 0x58
 8005056:	e001      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	d044      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800506e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005072:	d01b      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005078:	d805      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d022      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800507e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005082:	d00a      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005084:	e01b      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800508a:	d01d      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800508c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005090:	d01c      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005092:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005096:	d01b      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005098:	e011      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3304      	adds	r3, #4
 800509e:	2100      	movs	r1, #0
 80050a0:	4618      	mov	r0, r3
 80050a2:	f001 f81b 	bl	80060dc <RCCEx_PLL2_Config>
 80050a6:	4603      	mov	r3, r0
 80050a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80050aa:	e012      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3324      	adds	r3, #36	; 0x24
 80050b0:	2102      	movs	r1, #2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 f8c4 	bl	8006240 <RCCEx_PLL3_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80050bc:	e009      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	75fb      	strb	r3, [r7, #23]
      break;
 80050c2:	e006      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80050c4:	bf00      	nop
 80050c6:	e004      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80050c8:	bf00      	nop
 80050ca:	e002      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80050cc:	bf00      	nop
 80050ce:	e000      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80050d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80050d8:	4b41      	ldr	r3, [pc, #260]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050e6:	493e      	ldr	r1, [pc, #248]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	658b      	str	r3, [r1, #88]	; 0x58
 80050ec:	e001      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ee:	7dfb      	ldrb	r3, [r7, #23]
 80050f0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005108:	d10a      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3324      	adds	r3, #36	; 0x24
 800510e:	2102      	movs	r1, #2
 8005110:	4618      	mov	r0, r3
 8005112:	f001 f895 	bl	8006240 <RCCEx_PLL3_Config>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005120:	4b2f      	ldr	r3, [pc, #188]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005124:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800512e:	492c      	ldr	r1, [pc, #176]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005130:	4313      	orrs	r3, r2
 8005132:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01a      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514a:	d10a      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3324      	adds	r3, #36	; 0x24
 8005150:	2102      	movs	r1, #2
 8005152:	4618      	mov	r0, r3
 8005154:	f001 f874 	bl	8006240 <RCCEx_PLL3_Config>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005162:	4b1f      	ldr	r3, [pc, #124]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005170:	491b      	ldr	r1, [pc, #108]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005172:	4313      	orrs	r3, r2
 8005174:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d032      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518c:	d00d      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800518e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005192:	d016      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d111      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3304      	adds	r3, #4
 800519c:	2100      	movs	r1, #0
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 ff9c 	bl	80060dc <RCCEx_PLL2_Config>
 80051a4:	4603      	mov	r3, r0
 80051a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80051a8:	e00c      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3324      	adds	r3, #36	; 0x24
 80051ae:	2102      	movs	r1, #2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f001 f845 	bl	8006240 <RCCEx_PLL3_Config>
 80051b6:	4603      	mov	r3, r0
 80051b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80051ba:	e003      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	75fb      	strb	r3, [r7, #23]
      break;
 80051c0:	e000      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80051c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c4:	7dfb      	ldrb	r3, [r7, #23]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10c      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051ca:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80051cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051d8:	4901      	ldr	r1, [pc, #4]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	658b      	str	r3, [r1, #88]	; 0x58
 80051de:	e003      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80051e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
 80051e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d02f      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051fe:	d00c      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005200:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005204:	d015      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800520a:	d10f      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800520c:	4b79      	ldr	r3, [pc, #484]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	4a78      	ldr	r2, [pc, #480]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005218:	e00c      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3324      	adds	r3, #36	; 0x24
 800521e:	2101      	movs	r1, #1
 8005220:	4618      	mov	r0, r3
 8005222:	f001 f80d 	bl	8006240 <RCCEx_PLL3_Config>
 8005226:	4603      	mov	r3, r0
 8005228:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800522a:	e003      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	75fb      	strb	r3, [r7, #23]
      break;
 8005230:	e000      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005234:	7dfb      	ldrb	r3, [r7, #23]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10a      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800523a:	4b6e      	ldr	r3, [pc, #440]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800523c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005248:	496a      	ldr	r1, [pc, #424]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800524a:	4313      	orrs	r3, r2
 800524c:	654b      	str	r3, [r1, #84]	; 0x54
 800524e:	e001      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005250:	7dfb      	ldrb	r3, [r7, #23]
 8005252:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d029      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526c:	d007      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800526e:	e00f      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005270:	4b60      	ldr	r3, [pc, #384]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	4a5f      	ldr	r2, [pc, #380]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800527a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800527c:	e00b      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3304      	adds	r3, #4
 8005282:	2102      	movs	r1, #2
 8005284:	4618      	mov	r0, r3
 8005286:	f000 ff29 	bl	80060dc <RCCEx_PLL2_Config>
 800528a:	4603      	mov	r3, r0
 800528c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800528e:	e002      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	75fb      	strb	r3, [r7, #23]
      break;
 8005294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800529c:	4b55      	ldr	r3, [pc, #340]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800529e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a8:	4952      	ldr	r1, [pc, #328]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80052ae:	e001      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3324      	adds	r3, #36	; 0x24
 80052c4:	2102      	movs	r1, #2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 ffba 	bl	8006240 <RCCEx_PLL3_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d02f      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ea:	d00c      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80052ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f0:	d802      	bhi.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d011      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80052f6:	e00d      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80052f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052fc:	d00f      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80052fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005302:	d00e      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005304:	e006      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005306:	4b3b      	ldr	r3, [pc, #236]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	4a3a      	ldr	r2, [pc, #232]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800530c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005310:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005312:	e007      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	75fb      	strb	r3, [r7, #23]
      break;
 8005318:	e004      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800531a:	bf00      	nop
 800531c:	e002      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800531e:	bf00      	nop
 8005320:	e000      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800532a:	4b32      	ldr	r3, [pc, #200]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005336:	492f      	ldr	r1, [pc, #188]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005338:	4313      	orrs	r3, r2
 800533a:	654b      	str	r3, [r1, #84]	; 0x54
 800533c:	e001      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533e:	7dfb      	ldrb	r3, [r7, #23]
 8005340:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800534e:	4b29      	ldr	r3, [pc, #164]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005352:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	4926      	ldr	r1, [pc, #152]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800535c:	4313      	orrs	r3, r2
 800535e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d009      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800536c:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800537a:	491e      	ldr	r1, [pc, #120]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800537c:	4313      	orrs	r3, r2
 800537e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800538c:	4b19      	ldr	r3, [pc, #100]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800538e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005390:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005398:	4916      	ldr	r1, [pc, #88]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800539a:	4313      	orrs	r3, r2
 800539c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00d      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053aa:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	4a11      	ldr	r2, [pc, #68]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053b4:	6113      	str	r3, [r2, #16]
 80053b6:	4b0f      	ldr	r3, [pc, #60]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80053c0:	490c      	ldr	r1, [pc, #48]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	da08      	bge.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80053ce:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053da:	4906      	ldr	r1, [pc, #24]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80053e0:	7dbb      	ldrb	r3, [r7, #22]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e000      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	58024400 	.word	0x58024400

080053f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b090      	sub	sp, #64	; 0x40
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005406:	d150      	bne.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005408:	4ba1      	ldr	r3, [pc, #644]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800540a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	2b04      	cmp	r3, #4
 8005416:	d844      	bhi.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005435 	.word	0x08005435
 8005424:	08005445 	.word	0x08005445
 8005428:	08005455 	.word	0x08005455
 800542c:	0800549d 	.word	0x0800549d
 8005430:	08005465 	.word	0x08005465
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fd03 	bl	8005e44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005442:	e241      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005444:	f107 0318 	add.w	r3, r7, #24
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fa63 	bl	8005914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005452:	e239      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005454:	f107 030c 	add.w	r3, r7, #12
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fba7 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005462:	e231      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005464:	4b8a      	ldr	r3, [pc, #552]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800546c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800546e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005474:	4b87      	ldr	r3, [pc, #540]	; (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005478:	e226      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005480:	d102      	bne.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8005482:	4b85      	ldr	r3, [pc, #532]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005484:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005486:	e21f      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800548e:	d102      	bne.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8005490:	4b82      	ldr	r3, [pc, #520]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005492:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005494:	e218      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800549a:	e215      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800549c:	4b80      	ldr	r3, [pc, #512]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800549e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054a0:	e212      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054a6:	bf00      	nop
 80054a8:	e20e      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b0:	d14f      	bne.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80054b2:	4b77      	ldr	r3, [pc, #476]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80054b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80054ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80054bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054be:	2b80      	cmp	r3, #128	; 0x80
 80054c0:	d01c      	beq.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d804      	bhi.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d00e      	beq.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80054ce:	e03c      	b.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80054d0:	2bc0      	cmp	r3, #192	; 0xc0
 80054d2:	d037      	beq.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80054d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d8:	d018      	beq.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80054da:	e036      	b.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 fcaf 	bl	8005e44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054ea:	e1ed      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054ec:	f107 0318 	add.w	r3, r7, #24
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fa0f 	bl	8005914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054fa:	e1e5      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054fc:	f107 030c 	add.w	r3, r7, #12
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fb53 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800550a:	e1dd      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800550c:	4b60      	ldr	r3, [pc, #384]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800550e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005514:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800551c:	4b5d      	ldr	r3, [pc, #372]	; (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800551e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005520:	e1d2      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005524:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005528:	d102      	bne.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800552a:	4b5b      	ldr	r3, [pc, #364]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800552c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800552e:	e1cb      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005536:	d102      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8005538:	4b58      	ldr	r3, [pc, #352]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800553c:	e1c4      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005542:	e1c1      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005544:	4b56      	ldr	r3, [pc, #344]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005546:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005548:	e1be      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800554e:	bf00      	nop
 8005550:	e1ba      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005558:	d153      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800555a:	4b4d      	ldr	r3, [pc, #308]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800555c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005562:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800556a:	d01f      	beq.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800556c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005570:	d805      	bhi.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800557a:	d00f      	beq.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800557c:	e03d      	b.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800557e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005582:	d037      	beq.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005584:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005588:	d018      	beq.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800558a:	e036      	b.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800558c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fc57 	bl	8005e44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800559a:	e195      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800559c:	f107 0318 	add.w	r3, r7, #24
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 f9b7 	bl	8005914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055aa:	e18d      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055ac:	f107 030c 	add.w	r3, r7, #12
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fafb 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ba:	e185      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80055bc:	4b34      	ldr	r3, [pc, #208]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80055be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80055c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d102      	bne.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80055cc:	4b31      	ldr	r3, [pc, #196]	; (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80055ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80055d0:	e17a      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80055d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055d8:	d102      	bne.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80055da:	4b2f      	ldr	r3, [pc, #188]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80055dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055de:	e173      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80055e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e6:	d102      	bne.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80055e8:	4b2c      	ldr	r3, [pc, #176]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80055ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ec:	e16c      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055f2:	e169      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80055f4:	4b2a      	ldr	r3, [pc, #168]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055f8:	e166      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055fe:	bf00      	nop
 8005600:	e162      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005608:	d15d      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800560a:	4b21      	ldr	r3, [pc, #132]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800560c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005612:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800561a:	d01f      	beq.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800561c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005620:	d805      	bhi.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005626:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800562a:	d00f      	beq.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800562c:	e047      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800562e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005632:	d041      	beq.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8005634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005638:	d018      	beq.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800563a:	e040      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800563c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fbff 	bl	8005e44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800564a:	e13d      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800564c:	f107 0318 	add.w	r3, r7, #24
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f95f 	bl	8005914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800565a:	e135      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800565c:	f107 030c 	add.w	r3, r7, #12
 8005660:	4618      	mov	r0, r3
 8005662:	f000 faa3 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800566a:	e12d      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800566c:	4b08      	ldr	r3, [pc, #32]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800566e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005670:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005674:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005678:	2b00      	cmp	r3, #0
 800567a:	d102      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800567c:	4b05      	ldr	r3, [pc, #20]	; (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005680:	e122      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005688:	d10c      	bne.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800568a:	4b03      	ldr	r3, [pc, #12]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800568e:	e11b      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005690:	58024400 	.word	0x58024400
 8005694:	03d09000 	.word	0x03d09000
 8005698:	003d0900 	.word	0x003d0900
 800569c:	007a1200 	.word	0x007a1200
 80056a0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80056a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056aa:	d102      	bne.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80056ac:	4b89      	ldr	r3, [pc, #548]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80056ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056b0:	e10a      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056b6:	e107      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80056b8:	4b87      	ldr	r3, [pc, #540]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056bc:	e104      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056c2:	bf00      	nop
 80056c4:	e100      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056cc:	d153      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80056ce:	4b83      	ldr	r3, [pc, #524]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80056d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80056d6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056de:	d01f      	beq.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80056e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e4:	d805      	bhi.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80056ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ee:	d00f      	beq.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80056f0:	e03d      	b.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80056f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056f6:	d037      	beq.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80056f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056fc:	d018      	beq.n	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80056fe:	e036      	b.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fb9d 	bl	8005e44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800570e:	e0db      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005710:	f107 0318 	add.w	r3, r7, #24
 8005714:	4618      	mov	r0, r3
 8005716:	f000 f8fd 	bl	8005914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800571e:	e0d3      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005720:	f107 030c 	add.w	r3, r7, #12
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fa41 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800572e:	e0cb      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005730:	4b6a      	ldr	r3, [pc, #424]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005734:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005738:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800573a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573c:	2b00      	cmp	r3, #0
 800573e:	d102      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005740:	4b67      	ldr	r3, [pc, #412]	; (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005742:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005744:	e0c0      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800574c:	d102      	bne.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800574e:	4b65      	ldr	r3, [pc, #404]	; (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005752:	e0b9      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800575a:	d102      	bne.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800575c:	4b5d      	ldr	r3, [pc, #372]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800575e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005760:	e0b2      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005766:	e0af      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005768:	4b5b      	ldr	r3, [pc, #364]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800576a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800576c:	e0ac      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005772:	bf00      	nop
 8005774:	e0a8      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800577c:	d13d      	bne.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800577e:	4b57      	ldr	r3, [pc, #348]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005782:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005786:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578e:	d00c      	beq.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005794:	d011      	beq.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d12b      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800579a:	f107 0318 	add.w	r3, r7, #24
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f8b8 	bl	8005914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057a8:	e08e      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057aa:	f107 030c 	add.w	r3, r7, #12
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 f9fc 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057b8:	e086      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80057ba:	4b48      	ldr	r3, [pc, #288]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80057bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057c2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80057c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80057ca:	4b45      	ldr	r3, [pc, #276]	; (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80057ce:	e07b      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80057d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057d6:	d102      	bne.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80057d8:	4b42      	ldr	r3, [pc, #264]	; (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057dc:	e074      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80057de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057e4:	d102      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80057e6:	4b3b      	ldr	r3, [pc, #236]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80057e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057ea:	e06d      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057f0:	e06a      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057f6:	bf00      	nop
 80057f8:	e066      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005800:	d11f      	bne.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005802:	4b36      	ldr	r3, [pc, #216]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800580a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005816:	d008      	beq.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005818:	e00f      	b.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800581a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fb10 	bl	8005e44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005828:	e04e      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800582a:	f107 0318 	add.w	r3, r7, #24
 800582e:	4618      	mov	r0, r3
 8005830:	f000 f870 	bl	8005914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005838:	e046      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800583e:	bf00      	nop
 8005840:	e042      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005848:	d13c      	bne.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800584a:	4b24      	ldr	r3, [pc, #144]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800584c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005852:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800585a:	d01e      	beq.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800585c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005860:	d805      	bhi.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00d      	beq.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800586a:	d00e      	beq.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800586c:	e026      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800586e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005872:	d01d      	beq.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005878:	d01d      	beq.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800587a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800587e:	d014      	beq.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8005880:	e01c      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005882:	f000 f831 	bl	80058e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005886:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005888:	e01e      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800588a:	f107 0318 	add.w	r3, r7, #24
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f840 	bl	8005914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005898:	e016      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800589a:	f107 030c 	add.w	r3, r7, #12
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 f984 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058a8:	e00e      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80058aa:	4b0d      	ldr	r3, [pc, #52]	; (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80058ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058ae:	e00b      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80058b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058b4:	e008      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80058b6:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058ba:	e005      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058c0:	bf00      	nop
 80058c2:	e001      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80058c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3740      	adds	r7, #64	; 0x40
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	007a1200 	.word	0x007a1200
 80058d8:	00bb8000 	.word	0x00bb8000
 80058dc:	58024400 	.word	0x58024400
 80058e0:	03d09000 	.word	0x03d09000
 80058e4:	003d0900 	.word	0x003d0900

080058e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80058ec:	f7fe fe3a 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 80058f0:	4601      	mov	r1, r0
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	091b      	lsrs	r3, r3, #4
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	4a04      	ldr	r2, [pc, #16]	; (8005910 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80058fe:	5cd3      	ldrb	r3, [r2, r3]
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005908:	4618      	mov	r0, r3
 800590a:	bd80      	pop	{r7, pc}
 800590c:	58024400 	.word	0x58024400
 8005910:	08008ab8 	.word	0x08008ab8

08005914 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005914:	b480      	push	{r7}
 8005916:	b089      	sub	sp, #36	; 0x24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800591c:	4b9d      	ldr	r3, [pc, #628]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	f003 0303 	and.w	r3, r3, #3
 8005924:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005926:	4b9b      	ldr	r3, [pc, #620]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	0b1b      	lsrs	r3, r3, #12
 800592c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005930:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005932:	4b98      	ldr	r3, [pc, #608]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	091b      	lsrs	r3, r3, #4
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800593e:	4b95      	ldr	r3, [pc, #596]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005942:	08db      	lsrs	r3, r3, #3
 8005944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	fb02 f303 	mul.w	r3, r2, r3
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005956:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 810a 	beq.w	8005b76 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d05a      	beq.n	8005a1e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005968:	2b01      	cmp	r3, #1
 800596a:	d302      	bcc.n	8005972 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800596c:	2b02      	cmp	r3, #2
 800596e:	d078      	beq.n	8005a62 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005970:	e099      	b.n	8005aa6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005972:	4b88      	ldr	r3, [pc, #544]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b00      	cmp	r3, #0
 800597c:	d02d      	beq.n	80059da <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800597e:	4b85      	ldr	r3, [pc, #532]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	08db      	lsrs	r3, r3, #3
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	4a83      	ldr	r2, [pc, #524]	; (8005b98 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800598a:	fa22 f303 	lsr.w	r3, r2, r3
 800598e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	ee07 3a90 	vmov	s15, r3
 80059a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a8:	4b7a      	ldr	r3, [pc, #488]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b0:	ee07 3a90 	vmov	s15, r3
 80059b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80059bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80059c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80059d8:	e087      	b.n	8005aea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	ee07 3a90 	vmov	s15, r3
 80059e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80059e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ec:	4b69      	ldr	r3, [pc, #420]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f4:	ee07 3a90 	vmov	s15, r3
 80059f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a00:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a1c:	e065      	b.n	8005aea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	ee07 3a90 	vmov	s15, r3
 8005a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a28:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a30:	4b58      	ldr	r3, [pc, #352]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a38:	ee07 3a90 	vmov	s15, r3
 8005a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a40:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a44:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a60:	e043      	b.n	8005aea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	ee07 3a90 	vmov	s15, r3
 8005a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a74:	4b47      	ldr	r3, [pc, #284]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7c:	ee07 3a90 	vmov	s15, r3
 8005a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a84:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a88:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aa4:	e021      	b.n	8005aea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	ee07 3a90 	vmov	s15, r3
 8005aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab8:	4b36      	ldr	r3, [pc, #216]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac0:	ee07 3a90 	vmov	s15, r3
 8005ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005acc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005ad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005adc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ae8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005aea:	4b2a      	ldr	r3, [pc, #168]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	0a5b      	lsrs	r3, r3, #9
 8005af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af4:	ee07 3a90 	vmov	s15, r3
 8005af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005afc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b04:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b10:	ee17 2a90 	vmov	r2, s15
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005b18:	4b1e      	ldr	r3, [pc, #120]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	0c1b      	lsrs	r3, r3, #16
 8005b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b32:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b3e:	ee17 2a90 	vmov	r2, s15
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005b46:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	0e1b      	lsrs	r3, r3, #24
 8005b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b60:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b6c:	ee17 2a90 	vmov	r2, s15
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b74:	e008      	b.n	8005b88 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	609a      	str	r2, [r3, #8]
}
 8005b88:	bf00      	nop
 8005b8a:	3724      	adds	r7, #36	; 0x24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	58024400 	.word	0x58024400
 8005b98:	03d09000 	.word	0x03d09000
 8005b9c:	46000000 	.word	0x46000000
 8005ba0:	4c742400 	.word	0x4c742400
 8005ba4:	4a742400 	.word	0x4a742400
 8005ba8:	4af42400 	.word	0x4af42400

08005bac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b089      	sub	sp, #36	; 0x24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bb4:	4b9d      	ldr	r3, [pc, #628]	; (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005bbe:	4b9b      	ldr	r3, [pc, #620]	; (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	0d1b      	lsrs	r3, r3, #20
 8005bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005bca:	4b98      	ldr	r3, [pc, #608]	; (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	0a1b      	lsrs	r3, r3, #8
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005bd6:	4b95      	ldr	r3, [pc, #596]	; (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	08db      	lsrs	r3, r3, #3
 8005bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 810a 	beq.w	8005e0e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d05a      	beq.n	8005cb6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d302      	bcc.n	8005c0a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d078      	beq.n	8005cfa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005c08:	e099      	b.n	8005d3e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c0a:	4b88      	ldr	r3, [pc, #544]	; (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d02d      	beq.n	8005c72 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c16:	4b85      	ldr	r3, [pc, #532]	; (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	4a83      	ldr	r2, [pc, #524]	; (8005e30 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005c22:	fa22 f303 	lsr.w	r3, r2, r3
 8005c26:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	ee07 3a90 	vmov	s15, r3
 8005c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c40:	4b7a      	ldr	r3, [pc, #488]	; (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c48:	ee07 3a90 	vmov	s15, r3
 8005c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c50:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c54:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005c58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c70:	e087      	b.n	8005d82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	ee07 3a90 	vmov	s15, r3
 8005c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c84:	4b69      	ldr	r3, [pc, #420]	; (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c94:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c98:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005c9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cb4:	e065      	b.n	8005d82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	ee07 3a90 	vmov	s15, r3
 8005cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc8:	4b58      	ldr	r3, [pc, #352]	; (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cdc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005ce0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cf8:	e043      	b.n	8005d82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	ee07 3a90 	vmov	s15, r3
 8005d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d04:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005e40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005d08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0c:	4b47      	ldr	r3, [pc, #284]	; (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d14:	ee07 3a90 	vmov	s15, r3
 8005d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d20:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d3c:	e021      	b.n	8005d82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d48:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d50:	4b36      	ldr	r3, [pc, #216]	; (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d60:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d64:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d80:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005d82:	4b2a      	ldr	r3, [pc, #168]	; (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	0a5b      	lsrs	r3, r3, #9
 8005d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8c:	ee07 3a90 	vmov	s15, r3
 8005d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005da8:	ee17 2a90 	vmov	r2, s15
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005db0:	4b1e      	ldr	r3, [pc, #120]	; (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	0c1b      	lsrs	r3, r3, #16
 8005db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd6:	ee17 2a90 	vmov	r2, s15
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005dde:	4b13      	ldr	r3, [pc, #76]	; (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	0e1b      	lsrs	r3, r3, #24
 8005de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005de8:	ee07 3a90 	vmov	s15, r3
 8005dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005df4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005df8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e04:	ee17 2a90 	vmov	r2, s15
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e0c:	e008      	b.n	8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	609a      	str	r2, [r3, #8]
}
 8005e20:	bf00      	nop
 8005e22:	3724      	adds	r7, #36	; 0x24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	58024400 	.word	0x58024400
 8005e30:	03d09000 	.word	0x03d09000
 8005e34:	46000000 	.word	0x46000000
 8005e38:	4c742400 	.word	0x4c742400
 8005e3c:	4a742400 	.word	0x4a742400
 8005e40:	4af42400 	.word	0x4af42400

08005e44 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b089      	sub	sp, #36	; 0x24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e4c:	4b9d      	ldr	r3, [pc, #628]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005e56:	4b9b      	ldr	r3, [pc, #620]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	091b      	lsrs	r3, r3, #4
 8005e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e60:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005e62:	4b98      	ldr	r3, [pc, #608]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e6c:	4b95      	ldr	r3, [pc, #596]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e70:	08db      	lsrs	r3, r3, #3
 8005e72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	fb02 f303 	mul.w	r3, r2, r3
 8005e7c:	ee07 3a90 	vmov	s15, r3
 8005e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e84:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 810a 	beq.w	80060a4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d05a      	beq.n	8005f4c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d302      	bcc.n	8005ea0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d078      	beq.n	8005f90 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8005e9e:	e099      	b.n	8005fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ea0:	4b88      	ldr	r3, [pc, #544]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d02d      	beq.n	8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005eac:	4b85      	ldr	r3, [pc, #532]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	08db      	lsrs	r3, r3, #3
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	4a84      	ldr	r2, [pc, #528]	; (80060c8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8005eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebc:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	ee07 3a90 	vmov	s15, r3
 8005ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed6:	4b7b      	ldr	r3, [pc, #492]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80060cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f06:	e087      	b.n	8006018 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80060d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8005f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1a:	4b6a      	ldr	r3, [pc, #424]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80060cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f4a:	e065      	b.n	8006018 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80060d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8005f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f5e:	4b59      	ldr	r3, [pc, #356]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f72:	eddf 5a56 	vldr	s11, [pc, #344]	; 80060cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f8e:	e043      	b.n	8006018 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	ee07 3a90 	vmov	s15, r3
 8005f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80060d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa2:	4b48      	ldr	r3, [pc, #288]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80060cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fd2:	e021      	b.n	8006018 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80060d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8005fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe6:	4b37      	ldr	r3, [pc, #220]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ffa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80060cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800600a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006012:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006016:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006018:	4b2a      	ldr	r3, [pc, #168]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800601a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601c:	0a5b      	lsrs	r3, r3, #9
 800601e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800602e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006032:	edd7 6a07 	vldr	s13, [r7, #28]
 8006036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800603a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800603e:	ee17 2a90 	vmov	r2, s15
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006046:	4b1f      	ldr	r3, [pc, #124]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	0c1b      	lsrs	r3, r3, #16
 800604c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006050:	ee07 3a90 	vmov	s15, r3
 8006054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006058:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800605c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006060:	edd7 6a07 	vldr	s13, [r7, #28]
 8006064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800606c:	ee17 2a90 	vmov	r2, s15
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006074:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006078:	0e1b      	lsrs	r3, r3, #24
 800607a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800607e:	ee07 3a90 	vmov	s15, r3
 8006082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006086:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800608a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800608e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800609a:	ee17 2a90 	vmov	r2, s15
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80060a2:	e008      	b.n	80060b6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	609a      	str	r2, [r3, #8]
}
 80060b6:	bf00      	nop
 80060b8:	3724      	adds	r7, #36	; 0x24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	58024400 	.word	0x58024400
 80060c8:	03d09000 	.word	0x03d09000
 80060cc:	46000000 	.word	0x46000000
 80060d0:	4c742400 	.word	0x4c742400
 80060d4:	4a742400 	.word	0x4a742400
 80060d8:	4af42400 	.word	0x4af42400

080060dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060ea:	4b53      	ldr	r3, [pc, #332]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d101      	bne.n	80060fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e099      	b.n	800622e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80060fa:	4b4f      	ldr	r3, [pc, #316]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a4e      	ldr	r2, [pc, #312]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006100:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006106:	f7fb f8f1 	bl	80012ec <HAL_GetTick>
 800610a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800610c:	e008      	b.n	8006120 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800610e:	f7fb f8ed 	bl	80012ec <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e086      	b.n	800622e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006120:	4b45      	ldr	r3, [pc, #276]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1f0      	bne.n	800610e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800612c:	4b42      	ldr	r3, [pc, #264]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	031b      	lsls	r3, r3, #12
 800613a:	493f      	ldr	r1, [pc, #252]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 800613c:	4313      	orrs	r3, r2
 800613e:	628b      	str	r3, [r1, #40]	; 0x28
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	3b01      	subs	r3, #1
 8006146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	3b01      	subs	r3, #1
 8006150:	025b      	lsls	r3, r3, #9
 8006152:	b29b      	uxth	r3, r3
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	3b01      	subs	r3, #1
 800615c:	041b      	lsls	r3, r3, #16
 800615e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	3b01      	subs	r3, #1
 800616a:	061b      	lsls	r3, r3, #24
 800616c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006170:	4931      	ldr	r1, [pc, #196]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006172:	4313      	orrs	r3, r2
 8006174:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006176:	4b30      	ldr	r3, [pc, #192]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	492d      	ldr	r1, [pc, #180]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006184:	4313      	orrs	r3, r2
 8006186:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006188:	4b2b      	ldr	r3, [pc, #172]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	f023 0220 	bic.w	r2, r3, #32
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	4928      	ldr	r1, [pc, #160]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006196:	4313      	orrs	r3, r2
 8006198:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800619a:	4b27      	ldr	r3, [pc, #156]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	4a26      	ldr	r2, [pc, #152]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061a0:	f023 0310 	bic.w	r3, r3, #16
 80061a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061a6:	4b24      	ldr	r3, [pc, #144]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061aa:	4b24      	ldr	r3, [pc, #144]	; (800623c <RCCEx_PLL2_Config+0x160>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	69d2      	ldr	r2, [r2, #28]
 80061b2:	00d2      	lsls	r2, r2, #3
 80061b4:	4920      	ldr	r1, [pc, #128]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061ba:	4b1f      	ldr	r3, [pc, #124]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	4a1e      	ldr	r2, [pc, #120]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061c0:	f043 0310 	orr.w	r3, r3, #16
 80061c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061cc:	4b1a      	ldr	r3, [pc, #104]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	4a19      	ldr	r2, [pc, #100]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061d8:	e00f      	b.n	80061fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d106      	bne.n	80061ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061e0:	4b15      	ldr	r3, [pc, #84]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	4a14      	ldr	r2, [pc, #80]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061ec:	e005      	b.n	80061fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80061ee:	4b12      	ldr	r3, [pc, #72]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	4a11      	ldr	r2, [pc, #68]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80061fa:	4b0f      	ldr	r3, [pc, #60]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a0e      	ldr	r2, [pc, #56]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006200:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006206:	f7fb f871 	bl	80012ec <HAL_GetTick>
 800620a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800620c:	e008      	b.n	8006220 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800620e:	f7fb f86d 	bl	80012ec <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e006      	b.n	800622e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006220:	4b05      	ldr	r3, [pc, #20]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f0      	beq.n	800620e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	58024400 	.word	0x58024400
 800623c:	ffff0007 	.word	0xffff0007

08006240 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800624e:	4b53      	ldr	r3, [pc, #332]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b03      	cmp	r3, #3
 8006258:	d101      	bne.n	800625e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e099      	b.n	8006392 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800625e:	4b4f      	ldr	r3, [pc, #316]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a4e      	ldr	r2, [pc, #312]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800626a:	f7fb f83f 	bl	80012ec <HAL_GetTick>
 800626e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006270:	e008      	b.n	8006284 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006272:	f7fb f83b 	bl	80012ec <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e086      	b.n	8006392 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006284:	4b45      	ldr	r3, [pc, #276]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f0      	bne.n	8006272 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006290:	4b42      	ldr	r3, [pc, #264]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	051b      	lsls	r3, r3, #20
 800629e:	493f      	ldr	r1, [pc, #252]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	628b      	str	r3, [r1, #40]	; 0x28
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	025b      	lsls	r3, r3, #9
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	3b01      	subs	r3, #1
 80062c0:	041b      	lsls	r3, r3, #16
 80062c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	061b      	lsls	r3, r3, #24
 80062d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062d4:	4931      	ldr	r1, [pc, #196]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062da:	4b30      	ldr	r3, [pc, #192]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	492d      	ldr	r1, [pc, #180]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80062ec:	4b2b      	ldr	r3, [pc, #172]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	4928      	ldr	r1, [pc, #160]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80062fe:	4b27      	ldr	r3, [pc, #156]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	4a26      	ldr	r2, [pc, #152]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006308:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800630a:	4b24      	ldr	r3, [pc, #144]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 800630c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800630e:	4b24      	ldr	r3, [pc, #144]	; (80063a0 <RCCEx_PLL3_Config+0x160>)
 8006310:	4013      	ands	r3, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	69d2      	ldr	r2, [r2, #28]
 8006316:	00d2      	lsls	r2, r2, #3
 8006318:	4920      	ldr	r1, [pc, #128]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 800631a:	4313      	orrs	r3, r2
 800631c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800631e:	4b1f      	ldr	r3, [pc, #124]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	4a1e      	ldr	r2, [pc, #120]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006328:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d106      	bne.n	800633e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006330:	4b1a      	ldr	r3, [pc, #104]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	4a19      	ldr	r2, [pc, #100]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006336:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800633a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800633c:	e00f      	b.n	800635e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d106      	bne.n	8006352 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006344:	4b15      	ldr	r3, [pc, #84]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	4a14      	ldr	r2, [pc, #80]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 800634a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800634e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006350:	e005      	b.n	800635e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006352:	4b12      	ldr	r3, [pc, #72]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	4a11      	ldr	r2, [pc, #68]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800635c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800635e:	4b0f      	ldr	r3, [pc, #60]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a0e      	ldr	r2, [pc, #56]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800636a:	f7fa ffbf 	bl	80012ec <HAL_GetTick>
 800636e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006370:	e008      	b.n	8006384 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006372:	f7fa ffbb 	bl	80012ec <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e006      	b.n	8006392 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006384:	4b05      	ldr	r3, [pc, #20]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f0      	beq.n	8006372 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	58024400 	.word	0x58024400
 80063a0:	ffff0007 	.word	0xffff0007

080063a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e042      	b.n	800643c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d106      	bne.n	80063ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7fa fd7d 	bl	8000ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2224      	movs	r2, #36	; 0x24
 80063d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f8c2 	bl	8006570 <UART_SetConfig>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e022      	b.n	800643c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fe66 	bl	80070d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 feed 	bl	8007214 <UART_CheckIdleState>
 800643a:	4603      	mov	r3, r0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	; 0x28
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800645a:	2b20      	cmp	r3, #32
 800645c:	f040 8083 	bne.w	8006566 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <HAL_UART_Transmit+0x28>
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e07b      	b.n	8006568 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_UART_Transmit+0x3a>
 800647a:	2302      	movs	r3, #2
 800647c:	e074      	b.n	8006568 <HAL_UART_Transmit+0x124>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2221      	movs	r2, #33	; 0x21
 8006492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006496:	f7fa ff29 	bl	80012ec <HAL_GetTick>
 800649a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	88fa      	ldrh	r2, [r7, #6]
 80064a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	88fa      	ldrh	r2, [r7, #6]
 80064a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b4:	d108      	bne.n	80064c8 <HAL_UART_Transmit+0x84>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	e003      	b.n	80064d0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80064d8:	e02c      	b.n	8006534 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2200      	movs	r2, #0
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 fedd 	bl	80072a4 <UART_WaitOnFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e039      	b.n	8006568 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006508:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	3302      	adds	r3, #2
 800650e:	61bb      	str	r3, [r7, #24]
 8006510:	e007      	b.n	8006522 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	781a      	ldrb	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	3301      	adds	r3, #1
 8006520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1cc      	bne.n	80064da <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2200      	movs	r2, #0
 8006548:	2140      	movs	r1, #64	; 0x40
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 feaa 	bl	80072a4 <UART_WaitOnFlagUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e006      	b.n	8006568 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2220      	movs	r2, #32
 800655e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	e000      	b.n	8006568 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006566:	2302      	movs	r3, #2
  }
}
 8006568:	4618      	mov	r0, r3
 800656a:	3720      	adds	r7, #32
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006570:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006574:	b08e      	sub	sp, #56	; 0x38
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	4313      	orrs	r3, r2
 8006596:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800659c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800659e:	4313      	orrs	r3, r2
 80065a0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	4bc1      	ldr	r3, [pc, #772]	; (80068b0 <UART_SetConfig+0x340>)
 80065aa:	4013      	ands	r3, r2
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065b2:	430b      	orrs	r3, r1
 80065b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4ab7      	ldr	r2, [pc, #732]	; (80068b4 <UART_SetConfig+0x344>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d004      	beq.n	80065e6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065e2:	4313      	orrs	r3, r2
 80065e4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	4bb2      	ldr	r3, [pc, #712]	; (80068b8 <UART_SetConfig+0x348>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6812      	ldr	r2, [r2, #0]
 80065f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065f6:	430b      	orrs	r3, r1
 80065f8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	f023 010f 	bic.w	r1, r3, #15
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4aa9      	ldr	r2, [pc, #676]	; (80068bc <UART_SetConfig+0x34c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d177      	bne.n	800670a <UART_SetConfig+0x19a>
 800661a:	4ba9      	ldr	r3, [pc, #676]	; (80068c0 <UART_SetConfig+0x350>)
 800661c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006622:	2b28      	cmp	r3, #40	; 0x28
 8006624:	d86c      	bhi.n	8006700 <UART_SetConfig+0x190>
 8006626:	a201      	add	r2, pc, #4	; (adr r2, 800662c <UART_SetConfig+0xbc>)
 8006628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662c:	080066d1 	.word	0x080066d1
 8006630:	08006701 	.word	0x08006701
 8006634:	08006701 	.word	0x08006701
 8006638:	08006701 	.word	0x08006701
 800663c:	08006701 	.word	0x08006701
 8006640:	08006701 	.word	0x08006701
 8006644:	08006701 	.word	0x08006701
 8006648:	08006701 	.word	0x08006701
 800664c:	080066d9 	.word	0x080066d9
 8006650:	08006701 	.word	0x08006701
 8006654:	08006701 	.word	0x08006701
 8006658:	08006701 	.word	0x08006701
 800665c:	08006701 	.word	0x08006701
 8006660:	08006701 	.word	0x08006701
 8006664:	08006701 	.word	0x08006701
 8006668:	08006701 	.word	0x08006701
 800666c:	080066e1 	.word	0x080066e1
 8006670:	08006701 	.word	0x08006701
 8006674:	08006701 	.word	0x08006701
 8006678:	08006701 	.word	0x08006701
 800667c:	08006701 	.word	0x08006701
 8006680:	08006701 	.word	0x08006701
 8006684:	08006701 	.word	0x08006701
 8006688:	08006701 	.word	0x08006701
 800668c:	080066e9 	.word	0x080066e9
 8006690:	08006701 	.word	0x08006701
 8006694:	08006701 	.word	0x08006701
 8006698:	08006701 	.word	0x08006701
 800669c:	08006701 	.word	0x08006701
 80066a0:	08006701 	.word	0x08006701
 80066a4:	08006701 	.word	0x08006701
 80066a8:	08006701 	.word	0x08006701
 80066ac:	080066f1 	.word	0x080066f1
 80066b0:	08006701 	.word	0x08006701
 80066b4:	08006701 	.word	0x08006701
 80066b8:	08006701 	.word	0x08006701
 80066bc:	08006701 	.word	0x08006701
 80066c0:	08006701 	.word	0x08006701
 80066c4:	08006701 	.word	0x08006701
 80066c8:	08006701 	.word	0x08006701
 80066cc:	080066f9 	.word	0x080066f9
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066d6:	e233      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80066d8:	2304      	movs	r3, #4
 80066da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066de:	e22f      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80066e0:	2308      	movs	r3, #8
 80066e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066e6:	e22b      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80066e8:	2310      	movs	r3, #16
 80066ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ee:	e227      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80066f0:	2320      	movs	r3, #32
 80066f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066f6:	e223      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80066f8:	2340      	movs	r3, #64	; 0x40
 80066fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066fe:	e21f      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006700:	2380      	movs	r3, #128	; 0x80
 8006702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006706:	bf00      	nop
 8006708:	e21a      	b.n	8006b40 <UART_SetConfig+0x5d0>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a6d      	ldr	r2, [pc, #436]	; (80068c4 <UART_SetConfig+0x354>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d132      	bne.n	800677a <UART_SetConfig+0x20a>
 8006714:	4b6a      	ldr	r3, [pc, #424]	; (80068c0 <UART_SetConfig+0x350>)
 8006716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006718:	f003 0307 	and.w	r3, r3, #7
 800671c:	2b05      	cmp	r3, #5
 800671e:	d827      	bhi.n	8006770 <UART_SetConfig+0x200>
 8006720:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0x1b8>)
 8006722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006726:	bf00      	nop
 8006728:	08006741 	.word	0x08006741
 800672c:	08006749 	.word	0x08006749
 8006730:	08006751 	.word	0x08006751
 8006734:	08006759 	.word	0x08006759
 8006738:	08006761 	.word	0x08006761
 800673c:	08006769 	.word	0x08006769
 8006740:	2300      	movs	r3, #0
 8006742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006746:	e1fb      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006748:	2304      	movs	r3, #4
 800674a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800674e:	e1f7      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006750:	2308      	movs	r3, #8
 8006752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006756:	e1f3      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006758:	2310      	movs	r3, #16
 800675a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800675e:	e1ef      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006760:	2320      	movs	r3, #32
 8006762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006766:	e1eb      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006768:	2340      	movs	r3, #64	; 0x40
 800676a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800676e:	e1e7      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006776:	bf00      	nop
 8006778:	e1e2      	b.n	8006b40 <UART_SetConfig+0x5d0>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a52      	ldr	r2, [pc, #328]	; (80068c8 <UART_SetConfig+0x358>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d132      	bne.n	80067ea <UART_SetConfig+0x27a>
 8006784:	4b4e      	ldr	r3, [pc, #312]	; (80068c0 <UART_SetConfig+0x350>)
 8006786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	2b05      	cmp	r3, #5
 800678e:	d827      	bhi.n	80067e0 <UART_SetConfig+0x270>
 8006790:	a201      	add	r2, pc, #4	; (adr r2, 8006798 <UART_SetConfig+0x228>)
 8006792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006796:	bf00      	nop
 8006798:	080067b1 	.word	0x080067b1
 800679c:	080067b9 	.word	0x080067b9
 80067a0:	080067c1 	.word	0x080067c1
 80067a4:	080067c9 	.word	0x080067c9
 80067a8:	080067d1 	.word	0x080067d1
 80067ac:	080067d9 	.word	0x080067d9
 80067b0:	2300      	movs	r3, #0
 80067b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067b6:	e1c3      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80067b8:	2304      	movs	r3, #4
 80067ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067be:	e1bf      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80067c0:	2308      	movs	r3, #8
 80067c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067c6:	e1bb      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80067c8:	2310      	movs	r3, #16
 80067ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ce:	e1b7      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80067d0:	2320      	movs	r3, #32
 80067d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067d6:	e1b3      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80067d8:	2340      	movs	r3, #64	; 0x40
 80067da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067de:	e1af      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80067e0:	2380      	movs	r3, #128	; 0x80
 80067e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067e6:	bf00      	nop
 80067e8:	e1aa      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a37      	ldr	r2, [pc, #220]	; (80068cc <UART_SetConfig+0x35c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d132      	bne.n	800685a <UART_SetConfig+0x2ea>
 80067f4:	4b32      	ldr	r3, [pc, #200]	; (80068c0 <UART_SetConfig+0x350>)
 80067f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	2b05      	cmp	r3, #5
 80067fe:	d827      	bhi.n	8006850 <UART_SetConfig+0x2e0>
 8006800:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <UART_SetConfig+0x298>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	08006821 	.word	0x08006821
 800680c:	08006829 	.word	0x08006829
 8006810:	08006831 	.word	0x08006831
 8006814:	08006839 	.word	0x08006839
 8006818:	08006841 	.word	0x08006841
 800681c:	08006849 	.word	0x08006849
 8006820:	2300      	movs	r3, #0
 8006822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006826:	e18b      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006828:	2304      	movs	r3, #4
 800682a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800682e:	e187      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006830:	2308      	movs	r3, #8
 8006832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006836:	e183      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006838:	2310      	movs	r3, #16
 800683a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800683e:	e17f      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006840:	2320      	movs	r3, #32
 8006842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006846:	e17b      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006848:	2340      	movs	r3, #64	; 0x40
 800684a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800684e:	e177      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006856:	bf00      	nop
 8006858:	e172      	b.n	8006b40 <UART_SetConfig+0x5d0>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a1c      	ldr	r2, [pc, #112]	; (80068d0 <UART_SetConfig+0x360>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d144      	bne.n	80068ee <UART_SetConfig+0x37e>
 8006864:	4b16      	ldr	r3, [pc, #88]	; (80068c0 <UART_SetConfig+0x350>)
 8006866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	2b05      	cmp	r3, #5
 800686e:	d839      	bhi.n	80068e4 <UART_SetConfig+0x374>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <UART_SetConfig+0x308>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	08006891 	.word	0x08006891
 800687c:	08006899 	.word	0x08006899
 8006880:	080068a1 	.word	0x080068a1
 8006884:	080068a9 	.word	0x080068a9
 8006888:	080068d5 	.word	0x080068d5
 800688c:	080068dd 	.word	0x080068dd
 8006890:	2300      	movs	r3, #0
 8006892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006896:	e153      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006898:	2304      	movs	r3, #4
 800689a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800689e:	e14f      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80068a0:	2308      	movs	r3, #8
 80068a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a6:	e14b      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80068a8:	2310      	movs	r3, #16
 80068aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ae:	e147      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80068b0:	cfff69f3 	.word	0xcfff69f3
 80068b4:	58000c00 	.word	0x58000c00
 80068b8:	11fff4ff 	.word	0x11fff4ff
 80068bc:	40011000 	.word	0x40011000
 80068c0:	58024400 	.word	0x58024400
 80068c4:	40004400 	.word	0x40004400
 80068c8:	40004800 	.word	0x40004800
 80068cc:	40004c00 	.word	0x40004c00
 80068d0:	40005000 	.word	0x40005000
 80068d4:	2320      	movs	r3, #32
 80068d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068da:	e131      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80068dc:	2340      	movs	r3, #64	; 0x40
 80068de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068e2:	e12d      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80068e4:	2380      	movs	r3, #128	; 0x80
 80068e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ea:	bf00      	nop
 80068ec:	e128      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4ab6      	ldr	r2, [pc, #728]	; (8006bcc <UART_SetConfig+0x65c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d178      	bne.n	80069ea <UART_SetConfig+0x47a>
 80068f8:	4bb5      	ldr	r3, [pc, #724]	; (8006bd0 <UART_SetConfig+0x660>)
 80068fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006900:	2b28      	cmp	r3, #40	; 0x28
 8006902:	d86d      	bhi.n	80069e0 <UART_SetConfig+0x470>
 8006904:	a201      	add	r2, pc, #4	; (adr r2, 800690c <UART_SetConfig+0x39c>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	080069b1 	.word	0x080069b1
 8006910:	080069e1 	.word	0x080069e1
 8006914:	080069e1 	.word	0x080069e1
 8006918:	080069e1 	.word	0x080069e1
 800691c:	080069e1 	.word	0x080069e1
 8006920:	080069e1 	.word	0x080069e1
 8006924:	080069e1 	.word	0x080069e1
 8006928:	080069e1 	.word	0x080069e1
 800692c:	080069b9 	.word	0x080069b9
 8006930:	080069e1 	.word	0x080069e1
 8006934:	080069e1 	.word	0x080069e1
 8006938:	080069e1 	.word	0x080069e1
 800693c:	080069e1 	.word	0x080069e1
 8006940:	080069e1 	.word	0x080069e1
 8006944:	080069e1 	.word	0x080069e1
 8006948:	080069e1 	.word	0x080069e1
 800694c:	080069c1 	.word	0x080069c1
 8006950:	080069e1 	.word	0x080069e1
 8006954:	080069e1 	.word	0x080069e1
 8006958:	080069e1 	.word	0x080069e1
 800695c:	080069e1 	.word	0x080069e1
 8006960:	080069e1 	.word	0x080069e1
 8006964:	080069e1 	.word	0x080069e1
 8006968:	080069e1 	.word	0x080069e1
 800696c:	080069c9 	.word	0x080069c9
 8006970:	080069e1 	.word	0x080069e1
 8006974:	080069e1 	.word	0x080069e1
 8006978:	080069e1 	.word	0x080069e1
 800697c:	080069e1 	.word	0x080069e1
 8006980:	080069e1 	.word	0x080069e1
 8006984:	080069e1 	.word	0x080069e1
 8006988:	080069e1 	.word	0x080069e1
 800698c:	080069d1 	.word	0x080069d1
 8006990:	080069e1 	.word	0x080069e1
 8006994:	080069e1 	.word	0x080069e1
 8006998:	080069e1 	.word	0x080069e1
 800699c:	080069e1 	.word	0x080069e1
 80069a0:	080069e1 	.word	0x080069e1
 80069a4:	080069e1 	.word	0x080069e1
 80069a8:	080069e1 	.word	0x080069e1
 80069ac:	080069d9 	.word	0x080069d9
 80069b0:	2301      	movs	r3, #1
 80069b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069b6:	e0c3      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80069b8:	2304      	movs	r3, #4
 80069ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069be:	e0bf      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80069c0:	2308      	movs	r3, #8
 80069c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069c6:	e0bb      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80069c8:	2310      	movs	r3, #16
 80069ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ce:	e0b7      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80069d0:	2320      	movs	r3, #32
 80069d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069d6:	e0b3      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80069d8:	2340      	movs	r3, #64	; 0x40
 80069da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069de:	e0af      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80069e0:	2380      	movs	r3, #128	; 0x80
 80069e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069e6:	bf00      	nop
 80069e8:	e0aa      	b.n	8006b40 <UART_SetConfig+0x5d0>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a79      	ldr	r2, [pc, #484]	; (8006bd4 <UART_SetConfig+0x664>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d132      	bne.n	8006a5a <UART_SetConfig+0x4ea>
 80069f4:	4b76      	ldr	r3, [pc, #472]	; (8006bd0 <UART_SetConfig+0x660>)
 80069f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	2b05      	cmp	r3, #5
 80069fe:	d827      	bhi.n	8006a50 <UART_SetConfig+0x4e0>
 8006a00:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <UART_SetConfig+0x498>)
 8006a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a06:	bf00      	nop
 8006a08:	08006a21 	.word	0x08006a21
 8006a0c:	08006a29 	.word	0x08006a29
 8006a10:	08006a31 	.word	0x08006a31
 8006a14:	08006a39 	.word	0x08006a39
 8006a18:	08006a41 	.word	0x08006a41
 8006a1c:	08006a49 	.word	0x08006a49
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a26:	e08b      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006a28:	2304      	movs	r3, #4
 8006a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a2e:	e087      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006a30:	2308      	movs	r3, #8
 8006a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a36:	e083      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006a38:	2310      	movs	r3, #16
 8006a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a3e:	e07f      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006a40:	2320      	movs	r3, #32
 8006a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a46:	e07b      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006a48:	2340      	movs	r3, #64	; 0x40
 8006a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a4e:	e077      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006a50:	2380      	movs	r3, #128	; 0x80
 8006a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a56:	bf00      	nop
 8006a58:	e072      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a5e      	ldr	r2, [pc, #376]	; (8006bd8 <UART_SetConfig+0x668>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d132      	bne.n	8006aca <UART_SetConfig+0x55a>
 8006a64:	4b5a      	ldr	r3, [pc, #360]	; (8006bd0 <UART_SetConfig+0x660>)
 8006a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	2b05      	cmp	r3, #5
 8006a6e:	d827      	bhi.n	8006ac0 <UART_SetConfig+0x550>
 8006a70:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <UART_SetConfig+0x508>)
 8006a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a76:	bf00      	nop
 8006a78:	08006a91 	.word	0x08006a91
 8006a7c:	08006a99 	.word	0x08006a99
 8006a80:	08006aa1 	.word	0x08006aa1
 8006a84:	08006aa9 	.word	0x08006aa9
 8006a88:	08006ab1 	.word	0x08006ab1
 8006a8c:	08006ab9 	.word	0x08006ab9
 8006a90:	2300      	movs	r3, #0
 8006a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a96:	e053      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006a98:	2304      	movs	r3, #4
 8006a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a9e:	e04f      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006aa0:	2308      	movs	r3, #8
 8006aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aa6:	e04b      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aae:	e047      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006ab0:	2320      	movs	r3, #32
 8006ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ab6:	e043      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006ab8:	2340      	movs	r3, #64	; 0x40
 8006aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006abe:	e03f      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006ac0:	2380      	movs	r3, #128	; 0x80
 8006ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ac6:	bf00      	nop
 8006ac8:	e03a      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a43      	ldr	r2, [pc, #268]	; (8006bdc <UART_SetConfig+0x66c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d132      	bne.n	8006b3a <UART_SetConfig+0x5ca>
 8006ad4:	4b3e      	ldr	r3, [pc, #248]	; (8006bd0 <UART_SetConfig+0x660>)
 8006ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	2b05      	cmp	r3, #5
 8006ade:	d827      	bhi.n	8006b30 <UART_SetConfig+0x5c0>
 8006ae0:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <UART_SetConfig+0x578>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006b01 	.word	0x08006b01
 8006aec:	08006b09 	.word	0x08006b09
 8006af0:	08006b11 	.word	0x08006b11
 8006af4:	08006b19 	.word	0x08006b19
 8006af8:	08006b21 	.word	0x08006b21
 8006afc:	08006b29 	.word	0x08006b29
 8006b00:	2302      	movs	r3, #2
 8006b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b06:	e01b      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006b08:	2304      	movs	r3, #4
 8006b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b0e:	e017      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006b10:	2308      	movs	r3, #8
 8006b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b16:	e013      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006b18:	2310      	movs	r3, #16
 8006b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b1e:	e00f      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006b20:	2320      	movs	r3, #32
 8006b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b26:	e00b      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006b28:	2340      	movs	r3, #64	; 0x40
 8006b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b2e:	e007      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006b30:	2380      	movs	r3, #128	; 0x80
 8006b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b36:	bf00      	nop
 8006b38:	e002      	b.n	8006b40 <UART_SetConfig+0x5d0>
 8006b3a:	2380      	movs	r3, #128	; 0x80
 8006b3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a25      	ldr	r2, [pc, #148]	; (8006bdc <UART_SetConfig+0x66c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	f040 80b8 	bne.w	8006cbc <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d019      	beq.n	8006b88 <UART_SetConfig+0x618>
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	dc04      	bgt.n	8006b62 <UART_SetConfig+0x5f2>
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d009      	beq.n	8006b70 <UART_SetConfig+0x600>
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d00b      	beq.n	8006b78 <UART_SetConfig+0x608>
 8006b60:	e042      	b.n	8006be8 <UART_SetConfig+0x678>
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d02b      	beq.n	8006bbe <UART_SetConfig+0x64e>
 8006b66:	2b40      	cmp	r3, #64	; 0x40
 8006b68:	d02c      	beq.n	8006bc4 <UART_SetConfig+0x654>
 8006b6a:	2b10      	cmp	r3, #16
 8006b6c:	d014      	beq.n	8006b98 <UART_SetConfig+0x628>
 8006b6e:	e03b      	b.n	8006be8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006b70:	f7fe feba 	bl	80058e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006b74:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006b76:	e03d      	b.n	8006bf4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b78:	f107 0314 	add.w	r3, r7, #20
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fec9 	bl	8005914 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b86:	e035      	b.n	8006bf4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b88:	f107 0308 	add.w	r3, r7, #8
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff f80d 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b96:	e02d      	b.n	8006bf4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b98:	4b0d      	ldr	r3, [pc, #52]	; (8006bd0 <UART_SetConfig+0x660>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d009      	beq.n	8006bb8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <UART_SetConfig+0x660>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	08db      	lsrs	r3, r3, #3
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	4a0c      	ldr	r2, [pc, #48]	; (8006be0 <UART_SetConfig+0x670>)
 8006bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bb6:	e01d      	b.n	8006bf4 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8006bb8:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <UART_SetConfig+0x670>)
 8006bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bbc:	e01a      	b.n	8006bf4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bbe:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <UART_SetConfig+0x674>)
 8006bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bc2:	e017      	b.n	8006bf4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bca:	e013      	b.n	8006bf4 <UART_SetConfig+0x684>
 8006bcc:	40011400 	.word	0x40011400
 8006bd0:	58024400 	.word	0x58024400
 8006bd4:	40007800 	.word	0x40007800
 8006bd8:	40007c00 	.word	0x40007c00
 8006bdc:	58000c00 	.word	0x58000c00
 8006be0:	03d09000 	.word	0x03d09000
 8006be4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006bf2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 824d 	beq.w	8007096 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	4aad      	ldr	r2, [pc, #692]	; (8006eb8 <UART_SetConfig+0x948>)
 8006c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c06:	461a      	mov	r2, r3
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c0e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	4613      	mov	r3, r2
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	4413      	add	r3, r2
 8006c1a:	6a3a      	ldr	r2, [r7, #32]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d305      	bcc.n	8006c2c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c26:	6a3a      	ldr	r2, [r7, #32]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d903      	bls.n	8006c34 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006c32:	e230      	b.n	8007096 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	4618      	mov	r0, r3
 8006c38:	f04f 0100 	mov.w	r1, #0
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	4a9d      	ldr	r2, [pc, #628]	; (8006eb8 <UART_SetConfig+0x948>)
 8006c42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	f04f 0400 	mov.w	r4, #0
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4623      	mov	r3, r4
 8006c50:	f7f9 fb96 	bl	8000380 <__aeabi_uldivmod>
 8006c54:	4603      	mov	r3, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	f04f 0400 	mov.w	r4, #0
 8006c64:	0214      	lsls	r4, r2, #8
 8006c66:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006c6a:	020b      	lsls	r3, r1, #8
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6852      	ldr	r2, [r2, #4]
 8006c70:	0852      	lsrs	r2, r2, #1
 8006c72:	4611      	mov	r1, r2
 8006c74:	f04f 0200 	mov.w	r2, #0
 8006c78:	eb13 0b01 	adds.w	fp, r3, r1
 8006c7c:	eb44 0c02 	adc.w	ip, r4, r2
 8006c80:	4658      	mov	r0, fp
 8006c82:	4661      	mov	r1, ip
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f04f 0400 	mov.w	r4, #0
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4623      	mov	r3, r4
 8006c90:	f7f9 fb76 	bl	8000380 <__aeabi_uldivmod>
 8006c94:	4603      	mov	r3, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca0:	d308      	bcc.n	8006cb4 <UART_SetConfig+0x744>
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ca8:	d204      	bcs.n	8006cb4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cb0:	60da      	str	r2, [r3, #12]
 8006cb2:	e1f0      	b.n	8007096 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006cba:	e1ec      	b.n	8007096 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc4:	f040 8100 	bne.w	8006ec8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8006cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ccc:	2b40      	cmp	r3, #64	; 0x40
 8006cce:	f200 80b7 	bhi.w	8006e40 <UART_SetConfig+0x8d0>
 8006cd2:	a201      	add	r2, pc, #4	; (adr r2, 8006cd8 <UART_SetConfig+0x768>)
 8006cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd8:	08006ddd 	.word	0x08006ddd
 8006cdc:	08006de5 	.word	0x08006de5
 8006ce0:	08006e41 	.word	0x08006e41
 8006ce4:	08006e41 	.word	0x08006e41
 8006ce8:	08006ded 	.word	0x08006ded
 8006cec:	08006e41 	.word	0x08006e41
 8006cf0:	08006e41 	.word	0x08006e41
 8006cf4:	08006e41 	.word	0x08006e41
 8006cf8:	08006dfd 	.word	0x08006dfd
 8006cfc:	08006e41 	.word	0x08006e41
 8006d00:	08006e41 	.word	0x08006e41
 8006d04:	08006e41 	.word	0x08006e41
 8006d08:	08006e41 	.word	0x08006e41
 8006d0c:	08006e41 	.word	0x08006e41
 8006d10:	08006e41 	.word	0x08006e41
 8006d14:	08006e41 	.word	0x08006e41
 8006d18:	08006e0d 	.word	0x08006e0d
 8006d1c:	08006e41 	.word	0x08006e41
 8006d20:	08006e41 	.word	0x08006e41
 8006d24:	08006e41 	.word	0x08006e41
 8006d28:	08006e41 	.word	0x08006e41
 8006d2c:	08006e41 	.word	0x08006e41
 8006d30:	08006e41 	.word	0x08006e41
 8006d34:	08006e41 	.word	0x08006e41
 8006d38:	08006e41 	.word	0x08006e41
 8006d3c:	08006e41 	.word	0x08006e41
 8006d40:	08006e41 	.word	0x08006e41
 8006d44:	08006e41 	.word	0x08006e41
 8006d48:	08006e41 	.word	0x08006e41
 8006d4c:	08006e41 	.word	0x08006e41
 8006d50:	08006e41 	.word	0x08006e41
 8006d54:	08006e41 	.word	0x08006e41
 8006d58:	08006e33 	.word	0x08006e33
 8006d5c:	08006e41 	.word	0x08006e41
 8006d60:	08006e41 	.word	0x08006e41
 8006d64:	08006e41 	.word	0x08006e41
 8006d68:	08006e41 	.word	0x08006e41
 8006d6c:	08006e41 	.word	0x08006e41
 8006d70:	08006e41 	.word	0x08006e41
 8006d74:	08006e41 	.word	0x08006e41
 8006d78:	08006e41 	.word	0x08006e41
 8006d7c:	08006e41 	.word	0x08006e41
 8006d80:	08006e41 	.word	0x08006e41
 8006d84:	08006e41 	.word	0x08006e41
 8006d88:	08006e41 	.word	0x08006e41
 8006d8c:	08006e41 	.word	0x08006e41
 8006d90:	08006e41 	.word	0x08006e41
 8006d94:	08006e41 	.word	0x08006e41
 8006d98:	08006e41 	.word	0x08006e41
 8006d9c:	08006e41 	.word	0x08006e41
 8006da0:	08006e41 	.word	0x08006e41
 8006da4:	08006e41 	.word	0x08006e41
 8006da8:	08006e41 	.word	0x08006e41
 8006dac:	08006e41 	.word	0x08006e41
 8006db0:	08006e41 	.word	0x08006e41
 8006db4:	08006e41 	.word	0x08006e41
 8006db8:	08006e41 	.word	0x08006e41
 8006dbc:	08006e41 	.word	0x08006e41
 8006dc0:	08006e41 	.word	0x08006e41
 8006dc4:	08006e41 	.word	0x08006e41
 8006dc8:	08006e41 	.word	0x08006e41
 8006dcc:	08006e41 	.word	0x08006e41
 8006dd0:	08006e41 	.word	0x08006e41
 8006dd4:	08006e41 	.word	0x08006e41
 8006dd8:	08006e39 	.word	0x08006e39
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ddc:	f7fd fbf2 	bl	80045c4 <HAL_RCC_GetPCLK1Freq>
 8006de0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006de2:	e033      	b.n	8006e4c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006de4:	f7fd fc04 	bl	80045f0 <HAL_RCC_GetPCLK2Freq>
 8006de8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006dea:	e02f      	b.n	8006e4c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dec:	f107 0314 	add.w	r3, r7, #20
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fe fd8f 	bl	8005914 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dfa:	e027      	b.n	8006e4c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dfc:	f107 0308 	add.w	r3, r7, #8
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fe fed3 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e0a:	e01f      	b.n	8006e4c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e0c:	4b2b      	ldr	r3, [pc, #172]	; (8006ebc <UART_SetConfig+0x94c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0320 	and.w	r3, r3, #32
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d009      	beq.n	8006e2c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e18:	4b28      	ldr	r3, [pc, #160]	; (8006ebc <UART_SetConfig+0x94c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	08db      	lsrs	r3, r3, #3
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	4a27      	ldr	r2, [pc, #156]	; (8006ec0 <UART_SetConfig+0x950>)
 8006e24:	fa22 f303 	lsr.w	r3, r2, r3
 8006e28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e2a:	e00f      	b.n	8006e4c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8006e2c:	4b24      	ldr	r3, [pc, #144]	; (8006ec0 <UART_SetConfig+0x950>)
 8006e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e30:	e00c      	b.n	8006e4c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e32:	4b24      	ldr	r3, [pc, #144]	; (8006ec4 <UART_SetConfig+0x954>)
 8006e34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e36:	e009      	b.n	8006e4c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e3e:	e005      	b.n	8006e4c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006e4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 8121 	beq.w	8007096 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	4a17      	ldr	r2, [pc, #92]	; (8006eb8 <UART_SetConfig+0x948>)
 8006e5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e66:	005a      	lsls	r2, r3, #1
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	085b      	lsrs	r3, r3, #1
 8006e6e:	441a      	add	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	2b0f      	cmp	r3, #15
 8006e80:	d916      	bls.n	8006eb0 <UART_SetConfig+0x940>
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e88:	d212      	bcs.n	8006eb0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f023 030f 	bic.w	r3, r3, #15
 8006e92:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	085b      	lsrs	r3, r3, #1
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006eac:	60da      	str	r2, [r3, #12]
 8006eae:	e0f2      	b.n	8007096 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006eb6:	e0ee      	b.n	8007096 <UART_SetConfig+0xb26>
 8006eb8:	08008ac8 	.word	0x08008ac8
 8006ebc:	58024400 	.word	0x58024400
 8006ec0:	03d09000 	.word	0x03d09000
 8006ec4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ec8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ecc:	2b40      	cmp	r3, #64	; 0x40
 8006ece:	f200 80b7 	bhi.w	8007040 <UART_SetConfig+0xad0>
 8006ed2:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <UART_SetConfig+0x968>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006fdd 	.word	0x08006fdd
 8006edc:	08006fe5 	.word	0x08006fe5
 8006ee0:	08007041 	.word	0x08007041
 8006ee4:	08007041 	.word	0x08007041
 8006ee8:	08006fed 	.word	0x08006fed
 8006eec:	08007041 	.word	0x08007041
 8006ef0:	08007041 	.word	0x08007041
 8006ef4:	08007041 	.word	0x08007041
 8006ef8:	08006ffd 	.word	0x08006ffd
 8006efc:	08007041 	.word	0x08007041
 8006f00:	08007041 	.word	0x08007041
 8006f04:	08007041 	.word	0x08007041
 8006f08:	08007041 	.word	0x08007041
 8006f0c:	08007041 	.word	0x08007041
 8006f10:	08007041 	.word	0x08007041
 8006f14:	08007041 	.word	0x08007041
 8006f18:	0800700d 	.word	0x0800700d
 8006f1c:	08007041 	.word	0x08007041
 8006f20:	08007041 	.word	0x08007041
 8006f24:	08007041 	.word	0x08007041
 8006f28:	08007041 	.word	0x08007041
 8006f2c:	08007041 	.word	0x08007041
 8006f30:	08007041 	.word	0x08007041
 8006f34:	08007041 	.word	0x08007041
 8006f38:	08007041 	.word	0x08007041
 8006f3c:	08007041 	.word	0x08007041
 8006f40:	08007041 	.word	0x08007041
 8006f44:	08007041 	.word	0x08007041
 8006f48:	08007041 	.word	0x08007041
 8006f4c:	08007041 	.word	0x08007041
 8006f50:	08007041 	.word	0x08007041
 8006f54:	08007041 	.word	0x08007041
 8006f58:	08007033 	.word	0x08007033
 8006f5c:	08007041 	.word	0x08007041
 8006f60:	08007041 	.word	0x08007041
 8006f64:	08007041 	.word	0x08007041
 8006f68:	08007041 	.word	0x08007041
 8006f6c:	08007041 	.word	0x08007041
 8006f70:	08007041 	.word	0x08007041
 8006f74:	08007041 	.word	0x08007041
 8006f78:	08007041 	.word	0x08007041
 8006f7c:	08007041 	.word	0x08007041
 8006f80:	08007041 	.word	0x08007041
 8006f84:	08007041 	.word	0x08007041
 8006f88:	08007041 	.word	0x08007041
 8006f8c:	08007041 	.word	0x08007041
 8006f90:	08007041 	.word	0x08007041
 8006f94:	08007041 	.word	0x08007041
 8006f98:	08007041 	.word	0x08007041
 8006f9c:	08007041 	.word	0x08007041
 8006fa0:	08007041 	.word	0x08007041
 8006fa4:	08007041 	.word	0x08007041
 8006fa8:	08007041 	.word	0x08007041
 8006fac:	08007041 	.word	0x08007041
 8006fb0:	08007041 	.word	0x08007041
 8006fb4:	08007041 	.word	0x08007041
 8006fb8:	08007041 	.word	0x08007041
 8006fbc:	08007041 	.word	0x08007041
 8006fc0:	08007041 	.word	0x08007041
 8006fc4:	08007041 	.word	0x08007041
 8006fc8:	08007041 	.word	0x08007041
 8006fcc:	08007041 	.word	0x08007041
 8006fd0:	08007041 	.word	0x08007041
 8006fd4:	08007041 	.word	0x08007041
 8006fd8:	08007039 	.word	0x08007039
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fdc:	f7fd faf2 	bl	80045c4 <HAL_RCC_GetPCLK1Freq>
 8006fe0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006fe2:	e033      	b.n	800704c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fe4:	f7fd fb04 	bl	80045f0 <HAL_RCC_GetPCLK2Freq>
 8006fe8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006fea:	e02f      	b.n	800704c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fec:	f107 0314 	add.w	r3, r7, #20
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fe fc8f 	bl	8005914 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ffa:	e027      	b.n	800704c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ffc:	f107 0308 	add.w	r3, r7, #8
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe fdd3 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800700a:	e01f      	b.n	800704c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800700c:	4b2c      	ldr	r3, [pc, #176]	; (80070c0 <UART_SetConfig+0xb50>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0320 	and.w	r3, r3, #32
 8007014:	2b00      	cmp	r3, #0
 8007016:	d009      	beq.n	800702c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007018:	4b29      	ldr	r3, [pc, #164]	; (80070c0 <UART_SetConfig+0xb50>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	08db      	lsrs	r3, r3, #3
 800701e:	f003 0303 	and.w	r3, r3, #3
 8007022:	4a28      	ldr	r2, [pc, #160]	; (80070c4 <UART_SetConfig+0xb54>)
 8007024:	fa22 f303 	lsr.w	r3, r2, r3
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800702a:	e00f      	b.n	800704c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800702c:	4b25      	ldr	r3, [pc, #148]	; (80070c4 <UART_SetConfig+0xb54>)
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007030:	e00c      	b.n	800704c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007032:	4b25      	ldr	r3, [pc, #148]	; (80070c8 <UART_SetConfig+0xb58>)
 8007034:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007036:	e009      	b.n	800704c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800703c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800703e:	e005      	b.n	800704c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800704a:	bf00      	nop
    }

    if (pclk != 0U)
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	2b00      	cmp	r3, #0
 8007050:	d021      	beq.n	8007096 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007056:	4a1d      	ldr	r2, [pc, #116]	; (80070cc <UART_SetConfig+0xb5c>)
 8007058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800705c:	461a      	mov	r2, r3
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	fbb3 f2f2 	udiv	r2, r3, r2
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	085b      	lsrs	r3, r3, #1
 800706a:	441a      	add	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	fbb2 f3f3 	udiv	r3, r2, r3
 8007074:	b29b      	uxth	r3, r3
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	2b0f      	cmp	r3, #15
 800707c:	d908      	bls.n	8007090 <UART_SetConfig+0xb20>
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007084:	d204      	bcs.n	8007090 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800708c:	60da      	str	r2, [r3, #12]
 800708e:	e002      	b.n	8007096 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80070b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3738      	adds	r7, #56	; 0x38
 80070ba:	46bd      	mov	sp, r7
 80070bc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80070c0:	58024400 	.word	0x58024400
 80070c4:	03d09000 	.word	0x03d09000
 80070c8:	003d0900 	.word	0x003d0900
 80070cc:	08008ac8 	.word	0x08008ac8

080070d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00a      	beq.n	80070fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00a      	beq.n	800711c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	f003 0310 	and.w	r3, r3, #16
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00a      	beq.n	8007182 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01a      	beq.n	80071e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071ce:	d10a      	bne.n	80071e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	605a      	str	r2, [r3, #4]
  }
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af02      	add	r7, sp, #8
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007224:	f7fa f862 	bl	80012ec <HAL_GetTick>
 8007228:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b08      	cmp	r3, #8
 8007236:	d10e      	bne.n	8007256 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f82c 	bl	80072a4 <UART_WaitOnFlagUntilTimeout>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e022      	b.n	800729c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b04      	cmp	r3, #4
 8007262:	d10e      	bne.n	8007282 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007264:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f816 	bl	80072a4 <UART_WaitOnFlagUntilTimeout>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e00c      	b.n	800729c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2220      	movs	r2, #32
 800728e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	4613      	mov	r3, r2
 80072b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b4:	e062      	b.n	800737c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072bc:	d05e      	beq.n	800737c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072be:	f7fa f815 	bl	80012ec <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d302      	bcc.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d11d      	bne.n	8007310 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072e2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0201 	bic.w	r2, r2, #1
 80072f2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2220      	movs	r2, #32
 8007300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e045      	b.n	800739c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b00      	cmp	r3, #0
 800731c:	d02e      	beq.n	800737c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800732c:	d126      	bne.n	800737c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007336:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007346:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689a      	ldr	r2, [r3, #8]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0201 	bic.w	r2, r2, #1
 8007356:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2220      	movs	r2, #32
 800735c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2220      	movs	r2, #32
 8007364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e00f      	b.n	800739c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69da      	ldr	r2, [r3, #28]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	4013      	ands	r3, r2
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	429a      	cmp	r2, r3
 800738a:	bf0c      	ite	eq
 800738c:	2301      	moveq	r3, #1
 800738e:	2300      	movne	r3, #0
 8007390:	b2db      	uxtb	r3, r3
 8007392:	461a      	mov	r2, r3
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	429a      	cmp	r2, r3
 8007398:	d08d      	beq.n	80072b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d101      	bne.n	80073ba <HAL_UARTEx_DisableFifoMode+0x16>
 80073b6:	2302      	movs	r3, #2
 80073b8:	e027      	b.n	800740a <HAL_UARTEx_DisableFifoMode+0x66>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2224      	movs	r2, #36	; 0x24
 80073c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0201 	bic.w	r2, r2, #1
 80073e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80073e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007426:	2b01      	cmp	r3, #1
 8007428:	d101      	bne.n	800742e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800742a:	2302      	movs	r3, #2
 800742c:	e02d      	b.n	800748a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2224      	movs	r2, #36	; 0x24
 800743a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0201 	bic.w	r2, r2, #1
 8007454:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	430a      	orrs	r2, r1
 8007468:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f850 	bl	8007510 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2220      	movs	r2, #32
 800747c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b084      	sub	sp, #16
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d101      	bne.n	80074aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074a6:	2302      	movs	r3, #2
 80074a8:	e02d      	b.n	8007506 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2224      	movs	r2, #36	; 0x24
 80074b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0201 	bic.w	r2, r2, #1
 80074d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f812 	bl	8007510 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007510:	b480      	push	{r7}
 8007512:	b089      	sub	sp, #36	; 0x24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007518:	4a2f      	ldr	r2, [pc, #188]	; (80075d8 <UARTEx_SetNbDataToProcess+0xc8>)
 800751a:	f107 0314 	add.w	r3, r7, #20
 800751e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007522:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007526:	4a2d      	ldr	r2, [pc, #180]	; (80075dc <UARTEx_SetNbDataToProcess+0xcc>)
 8007528:	f107 030c 	add.w	r3, r7, #12
 800752c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007530:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007538:	2b00      	cmp	r3, #0
 800753a:	d108      	bne.n	800754e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800754c:	e03d      	b.n	80075ca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800754e:	2310      	movs	r3, #16
 8007550:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007552:	2310      	movs	r3, #16
 8007554:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	0e5b      	lsrs	r3, r3, #25
 800755e:	b2db      	uxtb	r3, r3
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	0f5b      	lsrs	r3, r3, #29
 800756e:	b2db      	uxtb	r3, r3
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007576:	7fbb      	ldrb	r3, [r7, #30]
 8007578:	7f3a      	ldrb	r2, [r7, #28]
 800757a:	f107 0120 	add.w	r1, r7, #32
 800757e:	440a      	add	r2, r1
 8007580:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007584:	fb02 f303 	mul.w	r3, r2, r3
 8007588:	7f3a      	ldrb	r2, [r7, #28]
 800758a:	f107 0120 	add.w	r1, r7, #32
 800758e:	440a      	add	r2, r1
 8007590:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007594:	fb93 f3f2 	sdiv	r3, r3, r2
 8007598:	b29a      	uxth	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80075a0:	7ffb      	ldrb	r3, [r7, #31]
 80075a2:	7f7a      	ldrb	r2, [r7, #29]
 80075a4:	f107 0120 	add.w	r1, r7, #32
 80075a8:	440a      	add	r2, r1
 80075aa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80075ae:	fb02 f303 	mul.w	r3, r2, r3
 80075b2:	7f7a      	ldrb	r2, [r7, #29]
 80075b4:	f107 0120 	add.w	r1, r7, #32
 80075b8:	440a      	add	r2, r1
 80075ba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80075be:	fb93 f3f2 	sdiv	r3, r3, r2
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80075ca:	bf00      	nop
 80075cc:	3724      	adds	r7, #36	; 0x24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	08008aa8 	.word	0x08008aa8
 80075dc:	08008ab0 	.word	0x08008ab0

080075e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075e0:	b084      	sub	sp, #16
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	f107 001c 	add.w	r0, r7, #28
 80075ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d120      	bne.n	800763a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	4b25      	ldr	r3, [pc, #148]	; (80076a0 <USB_CoreInit+0xc0>)
 800760a:	4013      	ands	r3, r2
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800761c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800761e:	2b01      	cmp	r3, #1
 8007620:	d105      	bne.n	800762e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa4c 	bl	8007acc <USB_CoreReset>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]
 8007638:	e01a      	b.n	8007670 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fa40 	bl	8007acc <USB_CoreReset>
 800764c:	4603      	mov	r3, r0
 800764e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007652:	2b00      	cmp	r3, #0
 8007654:	d106      	bne.n	8007664 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	639a      	str	r2, [r3, #56]	; 0x38
 8007662:	e005      	b.n	8007670 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	2b01      	cmp	r3, #1
 8007674:	d10b      	bne.n	800768e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f043 0206 	orr.w	r2, r3, #6
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f043 0220 	orr.w	r2, r3, #32
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800769a:	b004      	add	sp, #16
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	ffbdffbf 	.word	0xffbdffbf

080076a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f023 0201 	bic.w	r2, r3, #1
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d106      	bne.n	80076f2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	60da      	str	r2, [r3, #12]
 80076f0:	e00b      	b.n	800770a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d106      	bne.n	8007706 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	60da      	str	r2, [r3, #12]
 8007704:	e001      	b.n	800770a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e003      	b.n	8007712 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800770a:	2032      	movs	r0, #50	; 0x32
 800770c:	f7f9 fdfa 	bl	8001304 <HAL_Delay>

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800771c:	b084      	sub	sp, #16
 800771e:	b580      	push	{r7, lr}
 8007720:	b086      	sub	sp, #24
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800772a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007736:	2300      	movs	r3, #0
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	e009      	b.n	8007750 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	3340      	adds	r3, #64	; 0x40
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	2200      	movs	r2, #0
 8007748:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	3301      	adds	r3, #1
 800774e:	613b      	str	r3, [r7, #16]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b0e      	cmp	r3, #14
 8007754:	d9f2      	bls.n	800773c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d11c      	bne.n	8007796 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800776a:	f043 0302 	orr.w	r3, r3, #2
 800776e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007774:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	e005      	b.n	80077a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077a8:	461a      	mov	r2, r3
 80077aa:	2300      	movs	r3, #0
 80077ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b4:	4619      	mov	r1, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077bc:	461a      	mov	r2, r3
 80077be:	680b      	ldr	r3, [r1, #0]
 80077c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d10c      	bne.n	80077e2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d104      	bne.n	80077d8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80077ce:	2100      	movs	r1, #0
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f949 	bl	8007a68 <USB_SetDevSpeed>
 80077d6:	e008      	b.n	80077ea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80077d8:	2101      	movs	r1, #1
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f944 	bl	8007a68 <USB_SetDevSpeed>
 80077e0:	e003      	b.n	80077ea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077e2:	2103      	movs	r1, #3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f93f 	bl	8007a68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077ea:	2110      	movs	r1, #16
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f8f3 	bl	80079d8 <USB_FlushTxFifo>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f911 	bl	8007a24 <USB_FlushRxFifo>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007812:	461a      	mov	r2, r3
 8007814:	2300      	movs	r3, #0
 8007816:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781e:	461a      	mov	r2, r3
 8007820:	2300      	movs	r3, #0
 8007822:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782a:	461a      	mov	r2, r3
 800782c:	2300      	movs	r3, #0
 800782e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007830:	2300      	movs	r3, #0
 8007832:	613b      	str	r3, [r7, #16]
 8007834:	e043      	b.n	80078be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	015a      	lsls	r2, r3, #5
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	4413      	add	r3, r2
 800783e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800784c:	d118      	bne.n	8007880 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10a      	bne.n	800786a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007860:	461a      	mov	r2, r3
 8007862:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	e013      	b.n	8007892 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007876:	461a      	mov	r2, r3
 8007878:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	e008      	b.n	8007892 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788c:	461a      	mov	r2, r3
 800788e:	2300      	movs	r3, #0
 8007890:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789e:	461a      	mov	r2, r3
 80078a0:	2300      	movs	r3, #0
 80078a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b0:	461a      	mov	r2, r3
 80078b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	3301      	adds	r3, #1
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d3b7      	bcc.n	8007836 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078c6:	2300      	movs	r3, #0
 80078c8:	613b      	str	r3, [r7, #16]
 80078ca:	e043      	b.n	8007954 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078e2:	d118      	bne.n	8007916 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10a      	bne.n	8007900 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f6:	461a      	mov	r2, r3
 80078f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	e013      	b.n	8007928 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790c:	461a      	mov	r2, r3
 800790e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	e008      	b.n	8007928 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007922:	461a      	mov	r2, r3
 8007924:	2300      	movs	r3, #0
 8007926:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007934:	461a      	mov	r2, r3
 8007936:	2300      	movs	r3, #0
 8007938:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	461a      	mov	r2, r3
 8007948:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800794c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	3301      	adds	r3, #1
 8007952:	613b      	str	r3, [r7, #16]
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	429a      	cmp	r2, r3
 800795a:	d3b7      	bcc.n	80078cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800796a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800796e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800797c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	2b00      	cmp	r3, #0
 8007982:	d105      	bne.n	8007990 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f043 0210 	orr.w	r2, r3, #16
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	699a      	ldr	r2, [r3, #24]
 8007994:	4b0e      	ldr	r3, [pc, #56]	; (80079d0 <USB_DevInit+0x2b4>)
 8007996:	4313      	orrs	r3, r2
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800799c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d005      	beq.n	80079ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	f043 0208 	orr.w	r2, r3, #8
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80079ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d105      	bne.n	80079c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	699a      	ldr	r2, [r3, #24]
 80079b8:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <USB_DevInit+0x2b8>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079cc:	b004      	add	sp, #16
 80079ce:	4770      	bx	lr
 80079d0:	803c3800 	.word	0x803c3800
 80079d4:	40000004 	.word	0x40000004

080079d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	019b      	lsls	r3, r3, #6
 80079ea:	f043 0220 	orr.w	r2, r3, #32
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4a09      	ldr	r2, [pc, #36]	; (8007a20 <USB_FlushTxFifo+0x48>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d901      	bls.n	8007a04 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e006      	b.n	8007a12 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	f003 0320 	and.w	r3, r3, #32
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d0f0      	beq.n	80079f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	00030d40 	.word	0x00030d40

08007a24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2210      	movs	r2, #16
 8007a34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4a09      	ldr	r2, [pc, #36]	; (8007a64 <USB_FlushRxFifo+0x40>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d901      	bls.n	8007a48 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e006      	b.n	8007a56 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	2b10      	cmp	r3, #16
 8007a52:	d0f0      	beq.n	8007a36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	00030d40 	.word	0x00030d40

08007a68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	68f9      	ldr	r1, [r7, #12]
 8007a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ab4:	f043 0302 	orr.w	r3, r3, #2
 8007ab8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007aba:	2003      	movs	r0, #3
 8007abc:	f7f9 fc22 	bl	8001304 <HAL_Delay>

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3301      	adds	r3, #1
 8007adc:	60fb      	str	r3, [r7, #12]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4a13      	ldr	r2, [pc, #76]	; (8007b30 <USB_CoreReset+0x64>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d901      	bls.n	8007aea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e01b      	b.n	8007b22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	daf2      	bge.n	8007ad8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f043 0201 	orr.w	r2, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3301      	adds	r3, #1
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4a09      	ldr	r2, [pc, #36]	; (8007b30 <USB_CoreReset+0x64>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d901      	bls.n	8007b14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e006      	b.n	8007b22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d0f0      	beq.n	8007b02 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	00030d40 	.word	0x00030d40

08007b34 <__errno>:
 8007b34:	4b01      	ldr	r3, [pc, #4]	; (8007b3c <__errno+0x8>)
 8007b36:	6818      	ldr	r0, [r3, #0]
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	20000010 	.word	0x20000010

08007b40 <__libc_init_array>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	4e0d      	ldr	r6, [pc, #52]	; (8007b78 <__libc_init_array+0x38>)
 8007b44:	4c0d      	ldr	r4, [pc, #52]	; (8007b7c <__libc_init_array+0x3c>)
 8007b46:	1ba4      	subs	r4, r4, r6
 8007b48:	10a4      	asrs	r4, r4, #2
 8007b4a:	2500      	movs	r5, #0
 8007b4c:	42a5      	cmp	r5, r4
 8007b4e:	d109      	bne.n	8007b64 <__libc_init_array+0x24>
 8007b50:	4e0b      	ldr	r6, [pc, #44]	; (8007b80 <__libc_init_array+0x40>)
 8007b52:	4c0c      	ldr	r4, [pc, #48]	; (8007b84 <__libc_init_array+0x44>)
 8007b54:	f000 ff68 	bl	8008a28 <_init>
 8007b58:	1ba4      	subs	r4, r4, r6
 8007b5a:	10a4      	asrs	r4, r4, #2
 8007b5c:	2500      	movs	r5, #0
 8007b5e:	42a5      	cmp	r5, r4
 8007b60:	d105      	bne.n	8007b6e <__libc_init_array+0x2e>
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b68:	4798      	blx	r3
 8007b6a:	3501      	adds	r5, #1
 8007b6c:	e7ee      	b.n	8007b4c <__libc_init_array+0xc>
 8007b6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b72:	4798      	blx	r3
 8007b74:	3501      	adds	r5, #1
 8007b76:	e7f2      	b.n	8007b5e <__libc_init_array+0x1e>
 8007b78:	08008b80 	.word	0x08008b80
 8007b7c:	08008b80 	.word	0x08008b80
 8007b80:	08008b80 	.word	0x08008b80
 8007b84:	08008b84 	.word	0x08008b84

08007b88 <memset>:
 8007b88:	4402      	add	r2, r0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d100      	bne.n	8007b92 <memset+0xa>
 8007b90:	4770      	bx	lr
 8007b92:	f803 1b01 	strb.w	r1, [r3], #1
 8007b96:	e7f9      	b.n	8007b8c <memset+0x4>

08007b98 <iprintf>:
 8007b98:	b40f      	push	{r0, r1, r2, r3}
 8007b9a:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <iprintf+0x2c>)
 8007b9c:	b513      	push	{r0, r1, r4, lr}
 8007b9e:	681c      	ldr	r4, [r3, #0]
 8007ba0:	b124      	cbz	r4, 8007bac <iprintf+0x14>
 8007ba2:	69a3      	ldr	r3, [r4, #24]
 8007ba4:	b913      	cbnz	r3, 8007bac <iprintf+0x14>
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f000 fa22 	bl	8007ff0 <__sinit>
 8007bac:	ab05      	add	r3, sp, #20
 8007bae:	9a04      	ldr	r2, [sp, #16]
 8007bb0:	68a1      	ldr	r1, [r4, #8]
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f000 fbdb 	bl	8008370 <_vfiprintf_r>
 8007bba:	b002      	add	sp, #8
 8007bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc0:	b004      	add	sp, #16
 8007bc2:	4770      	bx	lr
 8007bc4:	20000010 	.word	0x20000010

08007bc8 <_puts_r>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	460e      	mov	r6, r1
 8007bcc:	4605      	mov	r5, r0
 8007bce:	b118      	cbz	r0, 8007bd8 <_puts_r+0x10>
 8007bd0:	6983      	ldr	r3, [r0, #24]
 8007bd2:	b90b      	cbnz	r3, 8007bd8 <_puts_r+0x10>
 8007bd4:	f000 fa0c 	bl	8007ff0 <__sinit>
 8007bd8:	69ab      	ldr	r3, [r5, #24]
 8007bda:	68ac      	ldr	r4, [r5, #8]
 8007bdc:	b913      	cbnz	r3, 8007be4 <_puts_r+0x1c>
 8007bde:	4628      	mov	r0, r5
 8007be0:	f000 fa06 	bl	8007ff0 <__sinit>
 8007be4:	4b23      	ldr	r3, [pc, #140]	; (8007c74 <_puts_r+0xac>)
 8007be6:	429c      	cmp	r4, r3
 8007be8:	d117      	bne.n	8007c1a <_puts_r+0x52>
 8007bea:	686c      	ldr	r4, [r5, #4]
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	071b      	lsls	r3, r3, #28
 8007bf0:	d51d      	bpl.n	8007c2e <_puts_r+0x66>
 8007bf2:	6923      	ldr	r3, [r4, #16]
 8007bf4:	b1db      	cbz	r3, 8007c2e <_puts_r+0x66>
 8007bf6:	3e01      	subs	r6, #1
 8007bf8:	68a3      	ldr	r3, [r4, #8]
 8007bfa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	60a3      	str	r3, [r4, #8]
 8007c02:	b9e9      	cbnz	r1, 8007c40 <_puts_r+0x78>
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	da2e      	bge.n	8007c66 <_puts_r+0x9e>
 8007c08:	4622      	mov	r2, r4
 8007c0a:	210a      	movs	r1, #10
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f000 f83f 	bl	8007c90 <__swbuf_r>
 8007c12:	3001      	adds	r0, #1
 8007c14:	d011      	beq.n	8007c3a <_puts_r+0x72>
 8007c16:	200a      	movs	r0, #10
 8007c18:	e011      	b.n	8007c3e <_puts_r+0x76>
 8007c1a:	4b17      	ldr	r3, [pc, #92]	; (8007c78 <_puts_r+0xb0>)
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	d101      	bne.n	8007c24 <_puts_r+0x5c>
 8007c20:	68ac      	ldr	r4, [r5, #8]
 8007c22:	e7e3      	b.n	8007bec <_puts_r+0x24>
 8007c24:	4b15      	ldr	r3, [pc, #84]	; (8007c7c <_puts_r+0xb4>)
 8007c26:	429c      	cmp	r4, r3
 8007c28:	bf08      	it	eq
 8007c2a:	68ec      	ldreq	r4, [r5, #12]
 8007c2c:	e7de      	b.n	8007bec <_puts_r+0x24>
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4628      	mov	r0, r5
 8007c32:	f000 f87f 	bl	8007d34 <__swsetup_r>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d0dd      	beq.n	8007bf6 <_puts_r+0x2e>
 8007c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3e:	bd70      	pop	{r4, r5, r6, pc}
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	da04      	bge.n	8007c4e <_puts_r+0x86>
 8007c44:	69a2      	ldr	r2, [r4, #24]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	dc06      	bgt.n	8007c58 <_puts_r+0x90>
 8007c4a:	290a      	cmp	r1, #10
 8007c4c:	d004      	beq.n	8007c58 <_puts_r+0x90>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	6022      	str	r2, [r4, #0]
 8007c54:	7019      	strb	r1, [r3, #0]
 8007c56:	e7cf      	b.n	8007bf8 <_puts_r+0x30>
 8007c58:	4622      	mov	r2, r4
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 f818 	bl	8007c90 <__swbuf_r>
 8007c60:	3001      	adds	r0, #1
 8007c62:	d1c9      	bne.n	8007bf8 <_puts_r+0x30>
 8007c64:	e7e9      	b.n	8007c3a <_puts_r+0x72>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	200a      	movs	r0, #10
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	6022      	str	r2, [r4, #0]
 8007c6e:	7018      	strb	r0, [r3, #0]
 8007c70:	e7e5      	b.n	8007c3e <_puts_r+0x76>
 8007c72:	bf00      	nop
 8007c74:	08008b04 	.word	0x08008b04
 8007c78:	08008b24 	.word	0x08008b24
 8007c7c:	08008ae4 	.word	0x08008ae4

08007c80 <puts>:
 8007c80:	4b02      	ldr	r3, [pc, #8]	; (8007c8c <puts+0xc>)
 8007c82:	4601      	mov	r1, r0
 8007c84:	6818      	ldr	r0, [r3, #0]
 8007c86:	f7ff bf9f 	b.w	8007bc8 <_puts_r>
 8007c8a:	bf00      	nop
 8007c8c:	20000010 	.word	0x20000010

08007c90 <__swbuf_r>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	460e      	mov	r6, r1
 8007c94:	4614      	mov	r4, r2
 8007c96:	4605      	mov	r5, r0
 8007c98:	b118      	cbz	r0, 8007ca2 <__swbuf_r+0x12>
 8007c9a:	6983      	ldr	r3, [r0, #24]
 8007c9c:	b90b      	cbnz	r3, 8007ca2 <__swbuf_r+0x12>
 8007c9e:	f000 f9a7 	bl	8007ff0 <__sinit>
 8007ca2:	4b21      	ldr	r3, [pc, #132]	; (8007d28 <__swbuf_r+0x98>)
 8007ca4:	429c      	cmp	r4, r3
 8007ca6:	d12a      	bne.n	8007cfe <__swbuf_r+0x6e>
 8007ca8:	686c      	ldr	r4, [r5, #4]
 8007caa:	69a3      	ldr	r3, [r4, #24]
 8007cac:	60a3      	str	r3, [r4, #8]
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	071a      	lsls	r2, r3, #28
 8007cb2:	d52e      	bpl.n	8007d12 <__swbuf_r+0x82>
 8007cb4:	6923      	ldr	r3, [r4, #16]
 8007cb6:	b363      	cbz	r3, 8007d12 <__swbuf_r+0x82>
 8007cb8:	6923      	ldr	r3, [r4, #16]
 8007cba:	6820      	ldr	r0, [r4, #0]
 8007cbc:	1ac0      	subs	r0, r0, r3
 8007cbe:	6963      	ldr	r3, [r4, #20]
 8007cc0:	b2f6      	uxtb	r6, r6
 8007cc2:	4283      	cmp	r3, r0
 8007cc4:	4637      	mov	r7, r6
 8007cc6:	dc04      	bgt.n	8007cd2 <__swbuf_r+0x42>
 8007cc8:	4621      	mov	r1, r4
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f000 f926 	bl	8007f1c <_fflush_r>
 8007cd0:	bb28      	cbnz	r0, 8007d1e <__swbuf_r+0x8e>
 8007cd2:	68a3      	ldr	r3, [r4, #8]
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	60a3      	str	r3, [r4, #8]
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	6022      	str	r2, [r4, #0]
 8007cde:	701e      	strb	r6, [r3, #0]
 8007ce0:	6963      	ldr	r3, [r4, #20]
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	4283      	cmp	r3, r0
 8007ce6:	d004      	beq.n	8007cf2 <__swbuf_r+0x62>
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	07db      	lsls	r3, r3, #31
 8007cec:	d519      	bpl.n	8007d22 <__swbuf_r+0x92>
 8007cee:	2e0a      	cmp	r6, #10
 8007cf0:	d117      	bne.n	8007d22 <__swbuf_r+0x92>
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	f000 f911 	bl	8007f1c <_fflush_r>
 8007cfa:	b190      	cbz	r0, 8007d22 <__swbuf_r+0x92>
 8007cfc:	e00f      	b.n	8007d1e <__swbuf_r+0x8e>
 8007cfe:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <__swbuf_r+0x9c>)
 8007d00:	429c      	cmp	r4, r3
 8007d02:	d101      	bne.n	8007d08 <__swbuf_r+0x78>
 8007d04:	68ac      	ldr	r4, [r5, #8]
 8007d06:	e7d0      	b.n	8007caa <__swbuf_r+0x1a>
 8007d08:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <__swbuf_r+0xa0>)
 8007d0a:	429c      	cmp	r4, r3
 8007d0c:	bf08      	it	eq
 8007d0e:	68ec      	ldreq	r4, [r5, #12]
 8007d10:	e7cb      	b.n	8007caa <__swbuf_r+0x1a>
 8007d12:	4621      	mov	r1, r4
 8007d14:	4628      	mov	r0, r5
 8007d16:	f000 f80d 	bl	8007d34 <__swsetup_r>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	d0cc      	beq.n	8007cb8 <__swbuf_r+0x28>
 8007d1e:	f04f 37ff 	mov.w	r7, #4294967295
 8007d22:	4638      	mov	r0, r7
 8007d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d26:	bf00      	nop
 8007d28:	08008b04 	.word	0x08008b04
 8007d2c:	08008b24 	.word	0x08008b24
 8007d30:	08008ae4 	.word	0x08008ae4

08007d34 <__swsetup_r>:
 8007d34:	4b32      	ldr	r3, [pc, #200]	; (8007e00 <__swsetup_r+0xcc>)
 8007d36:	b570      	push	{r4, r5, r6, lr}
 8007d38:	681d      	ldr	r5, [r3, #0]
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	b125      	cbz	r5, 8007d4a <__swsetup_r+0x16>
 8007d40:	69ab      	ldr	r3, [r5, #24]
 8007d42:	b913      	cbnz	r3, 8007d4a <__swsetup_r+0x16>
 8007d44:	4628      	mov	r0, r5
 8007d46:	f000 f953 	bl	8007ff0 <__sinit>
 8007d4a:	4b2e      	ldr	r3, [pc, #184]	; (8007e04 <__swsetup_r+0xd0>)
 8007d4c:	429c      	cmp	r4, r3
 8007d4e:	d10f      	bne.n	8007d70 <__swsetup_r+0x3c>
 8007d50:	686c      	ldr	r4, [r5, #4]
 8007d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	0715      	lsls	r5, r2, #28
 8007d5a:	d42c      	bmi.n	8007db6 <__swsetup_r+0x82>
 8007d5c:	06d0      	lsls	r0, r2, #27
 8007d5e:	d411      	bmi.n	8007d84 <__swsetup_r+0x50>
 8007d60:	2209      	movs	r2, #9
 8007d62:	6032      	str	r2, [r6, #0]
 8007d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d68:	81a3      	strh	r3, [r4, #12]
 8007d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6e:	e03e      	b.n	8007dee <__swsetup_r+0xba>
 8007d70:	4b25      	ldr	r3, [pc, #148]	; (8007e08 <__swsetup_r+0xd4>)
 8007d72:	429c      	cmp	r4, r3
 8007d74:	d101      	bne.n	8007d7a <__swsetup_r+0x46>
 8007d76:	68ac      	ldr	r4, [r5, #8]
 8007d78:	e7eb      	b.n	8007d52 <__swsetup_r+0x1e>
 8007d7a:	4b24      	ldr	r3, [pc, #144]	; (8007e0c <__swsetup_r+0xd8>)
 8007d7c:	429c      	cmp	r4, r3
 8007d7e:	bf08      	it	eq
 8007d80:	68ec      	ldreq	r4, [r5, #12]
 8007d82:	e7e6      	b.n	8007d52 <__swsetup_r+0x1e>
 8007d84:	0751      	lsls	r1, r2, #29
 8007d86:	d512      	bpl.n	8007dae <__swsetup_r+0x7a>
 8007d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d8a:	b141      	cbz	r1, 8007d9e <__swsetup_r+0x6a>
 8007d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d90:	4299      	cmp	r1, r3
 8007d92:	d002      	beq.n	8007d9a <__swsetup_r+0x66>
 8007d94:	4630      	mov	r0, r6
 8007d96:	f000 fa19 	bl	80081cc <_free_r>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007da4:	81a3      	strh	r3, [r4, #12]
 8007da6:	2300      	movs	r3, #0
 8007da8:	6063      	str	r3, [r4, #4]
 8007daa:	6923      	ldr	r3, [r4, #16]
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	f043 0308 	orr.w	r3, r3, #8
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	6923      	ldr	r3, [r4, #16]
 8007db8:	b94b      	cbnz	r3, 8007dce <__swsetup_r+0x9a>
 8007dba:	89a3      	ldrh	r3, [r4, #12]
 8007dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc4:	d003      	beq.n	8007dce <__swsetup_r+0x9a>
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 f9bf 	bl	800814c <__smakebuf_r>
 8007dce:	89a2      	ldrh	r2, [r4, #12]
 8007dd0:	f012 0301 	ands.w	r3, r2, #1
 8007dd4:	d00c      	beq.n	8007df0 <__swsetup_r+0xbc>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60a3      	str	r3, [r4, #8]
 8007dda:	6963      	ldr	r3, [r4, #20]
 8007ddc:	425b      	negs	r3, r3
 8007dde:	61a3      	str	r3, [r4, #24]
 8007de0:	6923      	ldr	r3, [r4, #16]
 8007de2:	b953      	cbnz	r3, 8007dfa <__swsetup_r+0xc6>
 8007de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007de8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007dec:	d1ba      	bne.n	8007d64 <__swsetup_r+0x30>
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	0792      	lsls	r2, r2, #30
 8007df2:	bf58      	it	pl
 8007df4:	6963      	ldrpl	r3, [r4, #20]
 8007df6:	60a3      	str	r3, [r4, #8]
 8007df8:	e7f2      	b.n	8007de0 <__swsetup_r+0xac>
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	e7f7      	b.n	8007dee <__swsetup_r+0xba>
 8007dfe:	bf00      	nop
 8007e00:	20000010 	.word	0x20000010
 8007e04:	08008b04 	.word	0x08008b04
 8007e08:	08008b24 	.word	0x08008b24
 8007e0c:	08008ae4 	.word	0x08008ae4

08007e10 <__sflush_r>:
 8007e10:	898a      	ldrh	r2, [r1, #12]
 8007e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e16:	4605      	mov	r5, r0
 8007e18:	0710      	lsls	r0, r2, #28
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	d458      	bmi.n	8007ed0 <__sflush_r+0xc0>
 8007e1e:	684b      	ldr	r3, [r1, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	dc05      	bgt.n	8007e30 <__sflush_r+0x20>
 8007e24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	dc02      	bgt.n	8007e30 <__sflush_r+0x20>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e32:	2e00      	cmp	r6, #0
 8007e34:	d0f9      	beq.n	8007e2a <__sflush_r+0x1a>
 8007e36:	2300      	movs	r3, #0
 8007e38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e3c:	682f      	ldr	r7, [r5, #0]
 8007e3e:	6a21      	ldr	r1, [r4, #32]
 8007e40:	602b      	str	r3, [r5, #0]
 8007e42:	d032      	beq.n	8007eaa <__sflush_r+0x9a>
 8007e44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	075a      	lsls	r2, r3, #29
 8007e4a:	d505      	bpl.n	8007e58 <__sflush_r+0x48>
 8007e4c:	6863      	ldr	r3, [r4, #4]
 8007e4e:	1ac0      	subs	r0, r0, r3
 8007e50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e52:	b10b      	cbz	r3, 8007e58 <__sflush_r+0x48>
 8007e54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e56:	1ac0      	subs	r0, r0, r3
 8007e58:	2300      	movs	r3, #0
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e5e:	6a21      	ldr	r1, [r4, #32]
 8007e60:	4628      	mov	r0, r5
 8007e62:	47b0      	blx	r6
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	d106      	bne.n	8007e78 <__sflush_r+0x68>
 8007e6a:	6829      	ldr	r1, [r5, #0]
 8007e6c:	291d      	cmp	r1, #29
 8007e6e:	d848      	bhi.n	8007f02 <__sflush_r+0xf2>
 8007e70:	4a29      	ldr	r2, [pc, #164]	; (8007f18 <__sflush_r+0x108>)
 8007e72:	40ca      	lsrs	r2, r1
 8007e74:	07d6      	lsls	r6, r2, #31
 8007e76:	d544      	bpl.n	8007f02 <__sflush_r+0xf2>
 8007e78:	2200      	movs	r2, #0
 8007e7a:	6062      	str	r2, [r4, #4]
 8007e7c:	04d9      	lsls	r1, r3, #19
 8007e7e:	6922      	ldr	r2, [r4, #16]
 8007e80:	6022      	str	r2, [r4, #0]
 8007e82:	d504      	bpl.n	8007e8e <__sflush_r+0x7e>
 8007e84:	1c42      	adds	r2, r0, #1
 8007e86:	d101      	bne.n	8007e8c <__sflush_r+0x7c>
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	b903      	cbnz	r3, 8007e8e <__sflush_r+0x7e>
 8007e8c:	6560      	str	r0, [r4, #84]	; 0x54
 8007e8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e90:	602f      	str	r7, [r5, #0]
 8007e92:	2900      	cmp	r1, #0
 8007e94:	d0c9      	beq.n	8007e2a <__sflush_r+0x1a>
 8007e96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e9a:	4299      	cmp	r1, r3
 8007e9c:	d002      	beq.n	8007ea4 <__sflush_r+0x94>
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 f994 	bl	80081cc <_free_r>
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	6360      	str	r0, [r4, #52]	; 0x34
 8007ea8:	e7c0      	b.n	8007e2c <__sflush_r+0x1c>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	4628      	mov	r0, r5
 8007eae:	47b0      	blx	r6
 8007eb0:	1c41      	adds	r1, r0, #1
 8007eb2:	d1c8      	bne.n	8007e46 <__sflush_r+0x36>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0c5      	beq.n	8007e46 <__sflush_r+0x36>
 8007eba:	2b1d      	cmp	r3, #29
 8007ebc:	d001      	beq.n	8007ec2 <__sflush_r+0xb2>
 8007ebe:	2b16      	cmp	r3, #22
 8007ec0:	d101      	bne.n	8007ec6 <__sflush_r+0xb6>
 8007ec2:	602f      	str	r7, [r5, #0]
 8007ec4:	e7b1      	b.n	8007e2a <__sflush_r+0x1a>
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ecc:	81a3      	strh	r3, [r4, #12]
 8007ece:	e7ad      	b.n	8007e2c <__sflush_r+0x1c>
 8007ed0:	690f      	ldr	r7, [r1, #16]
 8007ed2:	2f00      	cmp	r7, #0
 8007ed4:	d0a9      	beq.n	8007e2a <__sflush_r+0x1a>
 8007ed6:	0793      	lsls	r3, r2, #30
 8007ed8:	680e      	ldr	r6, [r1, #0]
 8007eda:	bf08      	it	eq
 8007edc:	694b      	ldreq	r3, [r1, #20]
 8007ede:	600f      	str	r7, [r1, #0]
 8007ee0:	bf18      	it	ne
 8007ee2:	2300      	movne	r3, #0
 8007ee4:	eba6 0807 	sub.w	r8, r6, r7
 8007ee8:	608b      	str	r3, [r1, #8]
 8007eea:	f1b8 0f00 	cmp.w	r8, #0
 8007eee:	dd9c      	ble.n	8007e2a <__sflush_r+0x1a>
 8007ef0:	4643      	mov	r3, r8
 8007ef2:	463a      	mov	r2, r7
 8007ef4:	6a21      	ldr	r1, [r4, #32]
 8007ef6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b0      	blx	r6
 8007efc:	2800      	cmp	r0, #0
 8007efe:	dc06      	bgt.n	8007f0e <__sflush_r+0xfe>
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f06:	81a3      	strh	r3, [r4, #12]
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0c:	e78e      	b.n	8007e2c <__sflush_r+0x1c>
 8007f0e:	4407      	add	r7, r0
 8007f10:	eba8 0800 	sub.w	r8, r8, r0
 8007f14:	e7e9      	b.n	8007eea <__sflush_r+0xda>
 8007f16:	bf00      	nop
 8007f18:	20400001 	.word	0x20400001

08007f1c <_fflush_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	690b      	ldr	r3, [r1, #16]
 8007f20:	4605      	mov	r5, r0
 8007f22:	460c      	mov	r4, r1
 8007f24:	b1db      	cbz	r3, 8007f5e <_fflush_r+0x42>
 8007f26:	b118      	cbz	r0, 8007f30 <_fflush_r+0x14>
 8007f28:	6983      	ldr	r3, [r0, #24]
 8007f2a:	b90b      	cbnz	r3, 8007f30 <_fflush_r+0x14>
 8007f2c:	f000 f860 	bl	8007ff0 <__sinit>
 8007f30:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <_fflush_r+0x48>)
 8007f32:	429c      	cmp	r4, r3
 8007f34:	d109      	bne.n	8007f4a <_fflush_r+0x2e>
 8007f36:	686c      	ldr	r4, [r5, #4]
 8007f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f3c:	b17b      	cbz	r3, 8007f5e <_fflush_r+0x42>
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4628      	mov	r0, r5
 8007f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f46:	f7ff bf63 	b.w	8007e10 <__sflush_r>
 8007f4a:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <_fflush_r+0x4c>)
 8007f4c:	429c      	cmp	r4, r3
 8007f4e:	d101      	bne.n	8007f54 <_fflush_r+0x38>
 8007f50:	68ac      	ldr	r4, [r5, #8]
 8007f52:	e7f1      	b.n	8007f38 <_fflush_r+0x1c>
 8007f54:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <_fflush_r+0x50>)
 8007f56:	429c      	cmp	r4, r3
 8007f58:	bf08      	it	eq
 8007f5a:	68ec      	ldreq	r4, [r5, #12]
 8007f5c:	e7ec      	b.n	8007f38 <_fflush_r+0x1c>
 8007f5e:	2000      	movs	r0, #0
 8007f60:	bd38      	pop	{r3, r4, r5, pc}
 8007f62:	bf00      	nop
 8007f64:	08008b04 	.word	0x08008b04
 8007f68:	08008b24 	.word	0x08008b24
 8007f6c:	08008ae4 	.word	0x08008ae4

08007f70 <std>:
 8007f70:	2300      	movs	r3, #0
 8007f72:	b510      	push	{r4, lr}
 8007f74:	4604      	mov	r4, r0
 8007f76:	e9c0 3300 	strd	r3, r3, [r0]
 8007f7a:	6083      	str	r3, [r0, #8]
 8007f7c:	8181      	strh	r1, [r0, #12]
 8007f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8007f80:	81c2      	strh	r2, [r0, #14]
 8007f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f86:	6183      	str	r3, [r0, #24]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	2208      	movs	r2, #8
 8007f8c:	305c      	adds	r0, #92	; 0x5c
 8007f8e:	f7ff fdfb 	bl	8007b88 <memset>
 8007f92:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <std+0x38>)
 8007f94:	6263      	str	r3, [r4, #36]	; 0x24
 8007f96:	4b05      	ldr	r3, [pc, #20]	; (8007fac <std+0x3c>)
 8007f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <std+0x40>)
 8007f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f9e:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <std+0x44>)
 8007fa0:	6224      	str	r4, [r4, #32]
 8007fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8007fa4:	bd10      	pop	{r4, pc}
 8007fa6:	bf00      	nop
 8007fa8:	080088cd 	.word	0x080088cd
 8007fac:	080088ef 	.word	0x080088ef
 8007fb0:	08008927 	.word	0x08008927
 8007fb4:	0800894b 	.word	0x0800894b

08007fb8 <_cleanup_r>:
 8007fb8:	4901      	ldr	r1, [pc, #4]	; (8007fc0 <_cleanup_r+0x8>)
 8007fba:	f000 b885 	b.w	80080c8 <_fwalk_reent>
 8007fbe:	bf00      	nop
 8007fc0:	08007f1d 	.word	0x08007f1d

08007fc4 <__sfmoreglue>:
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	1e4a      	subs	r2, r1, #1
 8007fc8:	2568      	movs	r5, #104	; 0x68
 8007fca:	4355      	muls	r5, r2
 8007fcc:	460e      	mov	r6, r1
 8007fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fd2:	f000 f949 	bl	8008268 <_malloc_r>
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	b140      	cbz	r0, 8007fec <__sfmoreglue+0x28>
 8007fda:	2100      	movs	r1, #0
 8007fdc:	e9c0 1600 	strd	r1, r6, [r0]
 8007fe0:	300c      	adds	r0, #12
 8007fe2:	60a0      	str	r0, [r4, #8]
 8007fe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fe8:	f7ff fdce 	bl	8007b88 <memset>
 8007fec:	4620      	mov	r0, r4
 8007fee:	bd70      	pop	{r4, r5, r6, pc}

08007ff0 <__sinit>:
 8007ff0:	6983      	ldr	r3, [r0, #24]
 8007ff2:	b510      	push	{r4, lr}
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	bb33      	cbnz	r3, 8008046 <__sinit+0x56>
 8007ff8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007ffc:	6503      	str	r3, [r0, #80]	; 0x50
 8007ffe:	4b12      	ldr	r3, [pc, #72]	; (8008048 <__sinit+0x58>)
 8008000:	4a12      	ldr	r2, [pc, #72]	; (800804c <__sinit+0x5c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6282      	str	r2, [r0, #40]	; 0x28
 8008006:	4298      	cmp	r0, r3
 8008008:	bf04      	itt	eq
 800800a:	2301      	moveq	r3, #1
 800800c:	6183      	streq	r3, [r0, #24]
 800800e:	f000 f81f 	bl	8008050 <__sfp>
 8008012:	6060      	str	r0, [r4, #4]
 8008014:	4620      	mov	r0, r4
 8008016:	f000 f81b 	bl	8008050 <__sfp>
 800801a:	60a0      	str	r0, [r4, #8]
 800801c:	4620      	mov	r0, r4
 800801e:	f000 f817 	bl	8008050 <__sfp>
 8008022:	2200      	movs	r2, #0
 8008024:	60e0      	str	r0, [r4, #12]
 8008026:	2104      	movs	r1, #4
 8008028:	6860      	ldr	r0, [r4, #4]
 800802a:	f7ff ffa1 	bl	8007f70 <std>
 800802e:	2201      	movs	r2, #1
 8008030:	2109      	movs	r1, #9
 8008032:	68a0      	ldr	r0, [r4, #8]
 8008034:	f7ff ff9c 	bl	8007f70 <std>
 8008038:	2202      	movs	r2, #2
 800803a:	2112      	movs	r1, #18
 800803c:	68e0      	ldr	r0, [r4, #12]
 800803e:	f7ff ff97 	bl	8007f70 <std>
 8008042:	2301      	movs	r3, #1
 8008044:	61a3      	str	r3, [r4, #24]
 8008046:	bd10      	pop	{r4, pc}
 8008048:	08008ae0 	.word	0x08008ae0
 800804c:	08007fb9 	.word	0x08007fb9

08008050 <__sfp>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	4b1b      	ldr	r3, [pc, #108]	; (80080c0 <__sfp+0x70>)
 8008054:	681e      	ldr	r6, [r3, #0]
 8008056:	69b3      	ldr	r3, [r6, #24]
 8008058:	4607      	mov	r7, r0
 800805a:	b913      	cbnz	r3, 8008062 <__sfp+0x12>
 800805c:	4630      	mov	r0, r6
 800805e:	f7ff ffc7 	bl	8007ff0 <__sinit>
 8008062:	3648      	adds	r6, #72	; 0x48
 8008064:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008068:	3b01      	subs	r3, #1
 800806a:	d503      	bpl.n	8008074 <__sfp+0x24>
 800806c:	6833      	ldr	r3, [r6, #0]
 800806e:	b133      	cbz	r3, 800807e <__sfp+0x2e>
 8008070:	6836      	ldr	r6, [r6, #0]
 8008072:	e7f7      	b.n	8008064 <__sfp+0x14>
 8008074:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008078:	b16d      	cbz	r5, 8008096 <__sfp+0x46>
 800807a:	3468      	adds	r4, #104	; 0x68
 800807c:	e7f4      	b.n	8008068 <__sfp+0x18>
 800807e:	2104      	movs	r1, #4
 8008080:	4638      	mov	r0, r7
 8008082:	f7ff ff9f 	bl	8007fc4 <__sfmoreglue>
 8008086:	6030      	str	r0, [r6, #0]
 8008088:	2800      	cmp	r0, #0
 800808a:	d1f1      	bne.n	8008070 <__sfp+0x20>
 800808c:	230c      	movs	r3, #12
 800808e:	603b      	str	r3, [r7, #0]
 8008090:	4604      	mov	r4, r0
 8008092:	4620      	mov	r0, r4
 8008094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008096:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <__sfp+0x74>)
 8008098:	6665      	str	r5, [r4, #100]	; 0x64
 800809a:	e9c4 5500 	strd	r5, r5, [r4]
 800809e:	60a5      	str	r5, [r4, #8]
 80080a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80080a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80080a8:	2208      	movs	r2, #8
 80080aa:	4629      	mov	r1, r5
 80080ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080b0:	f7ff fd6a 	bl	8007b88 <memset>
 80080b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080bc:	e7e9      	b.n	8008092 <__sfp+0x42>
 80080be:	bf00      	nop
 80080c0:	08008ae0 	.word	0x08008ae0
 80080c4:	ffff0001 	.word	0xffff0001

080080c8 <_fwalk_reent>:
 80080c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080cc:	4680      	mov	r8, r0
 80080ce:	4689      	mov	r9, r1
 80080d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080d4:	2600      	movs	r6, #0
 80080d6:	b914      	cbnz	r4, 80080de <_fwalk_reent+0x16>
 80080d8:	4630      	mov	r0, r6
 80080da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80080e2:	3f01      	subs	r7, #1
 80080e4:	d501      	bpl.n	80080ea <_fwalk_reent+0x22>
 80080e6:	6824      	ldr	r4, [r4, #0]
 80080e8:	e7f5      	b.n	80080d6 <_fwalk_reent+0xe>
 80080ea:	89ab      	ldrh	r3, [r5, #12]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d907      	bls.n	8008100 <_fwalk_reent+0x38>
 80080f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080f4:	3301      	adds	r3, #1
 80080f6:	d003      	beq.n	8008100 <_fwalk_reent+0x38>
 80080f8:	4629      	mov	r1, r5
 80080fa:	4640      	mov	r0, r8
 80080fc:	47c8      	blx	r9
 80080fe:	4306      	orrs	r6, r0
 8008100:	3568      	adds	r5, #104	; 0x68
 8008102:	e7ee      	b.n	80080e2 <_fwalk_reent+0x1a>

08008104 <__swhatbuf_r>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	460e      	mov	r6, r1
 8008108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800810c:	2900      	cmp	r1, #0
 800810e:	b096      	sub	sp, #88	; 0x58
 8008110:	4614      	mov	r4, r2
 8008112:	461d      	mov	r5, r3
 8008114:	da07      	bge.n	8008126 <__swhatbuf_r+0x22>
 8008116:	2300      	movs	r3, #0
 8008118:	602b      	str	r3, [r5, #0]
 800811a:	89b3      	ldrh	r3, [r6, #12]
 800811c:	061a      	lsls	r2, r3, #24
 800811e:	d410      	bmi.n	8008142 <__swhatbuf_r+0x3e>
 8008120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008124:	e00e      	b.n	8008144 <__swhatbuf_r+0x40>
 8008126:	466a      	mov	r2, sp
 8008128:	f000 fc36 	bl	8008998 <_fstat_r>
 800812c:	2800      	cmp	r0, #0
 800812e:	dbf2      	blt.n	8008116 <__swhatbuf_r+0x12>
 8008130:	9a01      	ldr	r2, [sp, #4]
 8008132:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008136:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800813a:	425a      	negs	r2, r3
 800813c:	415a      	adcs	r2, r3
 800813e:	602a      	str	r2, [r5, #0]
 8008140:	e7ee      	b.n	8008120 <__swhatbuf_r+0x1c>
 8008142:	2340      	movs	r3, #64	; 0x40
 8008144:	2000      	movs	r0, #0
 8008146:	6023      	str	r3, [r4, #0]
 8008148:	b016      	add	sp, #88	; 0x58
 800814a:	bd70      	pop	{r4, r5, r6, pc}

0800814c <__smakebuf_r>:
 800814c:	898b      	ldrh	r3, [r1, #12]
 800814e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008150:	079d      	lsls	r5, r3, #30
 8008152:	4606      	mov	r6, r0
 8008154:	460c      	mov	r4, r1
 8008156:	d507      	bpl.n	8008168 <__smakebuf_r+0x1c>
 8008158:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	6123      	str	r3, [r4, #16]
 8008160:	2301      	movs	r3, #1
 8008162:	6163      	str	r3, [r4, #20]
 8008164:	b002      	add	sp, #8
 8008166:	bd70      	pop	{r4, r5, r6, pc}
 8008168:	ab01      	add	r3, sp, #4
 800816a:	466a      	mov	r2, sp
 800816c:	f7ff ffca 	bl	8008104 <__swhatbuf_r>
 8008170:	9900      	ldr	r1, [sp, #0]
 8008172:	4605      	mov	r5, r0
 8008174:	4630      	mov	r0, r6
 8008176:	f000 f877 	bl	8008268 <_malloc_r>
 800817a:	b948      	cbnz	r0, 8008190 <__smakebuf_r+0x44>
 800817c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008180:	059a      	lsls	r2, r3, #22
 8008182:	d4ef      	bmi.n	8008164 <__smakebuf_r+0x18>
 8008184:	f023 0303 	bic.w	r3, r3, #3
 8008188:	f043 0302 	orr.w	r3, r3, #2
 800818c:	81a3      	strh	r3, [r4, #12]
 800818e:	e7e3      	b.n	8008158 <__smakebuf_r+0xc>
 8008190:	4b0d      	ldr	r3, [pc, #52]	; (80081c8 <__smakebuf_r+0x7c>)
 8008192:	62b3      	str	r3, [r6, #40]	; 0x28
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	6020      	str	r0, [r4, #0]
 8008198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800819c:	81a3      	strh	r3, [r4, #12]
 800819e:	9b00      	ldr	r3, [sp, #0]
 80081a0:	6163      	str	r3, [r4, #20]
 80081a2:	9b01      	ldr	r3, [sp, #4]
 80081a4:	6120      	str	r0, [r4, #16]
 80081a6:	b15b      	cbz	r3, 80081c0 <__smakebuf_r+0x74>
 80081a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ac:	4630      	mov	r0, r6
 80081ae:	f000 fc05 	bl	80089bc <_isatty_r>
 80081b2:	b128      	cbz	r0, 80081c0 <__smakebuf_r+0x74>
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	f023 0303 	bic.w	r3, r3, #3
 80081ba:	f043 0301 	orr.w	r3, r3, #1
 80081be:	81a3      	strh	r3, [r4, #12]
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	431d      	orrs	r5, r3
 80081c4:	81a5      	strh	r5, [r4, #12]
 80081c6:	e7cd      	b.n	8008164 <__smakebuf_r+0x18>
 80081c8:	08007fb9 	.word	0x08007fb9

080081cc <_free_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4605      	mov	r5, r0
 80081d0:	2900      	cmp	r1, #0
 80081d2:	d045      	beq.n	8008260 <_free_r+0x94>
 80081d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d8:	1f0c      	subs	r4, r1, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	bfb8      	it	lt
 80081de:	18e4      	addlt	r4, r4, r3
 80081e0:	f000 fc0e 	bl	8008a00 <__malloc_lock>
 80081e4:	4a1f      	ldr	r2, [pc, #124]	; (8008264 <_free_r+0x98>)
 80081e6:	6813      	ldr	r3, [r2, #0]
 80081e8:	4610      	mov	r0, r2
 80081ea:	b933      	cbnz	r3, 80081fa <_free_r+0x2e>
 80081ec:	6063      	str	r3, [r4, #4]
 80081ee:	6014      	str	r4, [r2, #0]
 80081f0:	4628      	mov	r0, r5
 80081f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081f6:	f000 bc04 	b.w	8008a02 <__malloc_unlock>
 80081fa:	42a3      	cmp	r3, r4
 80081fc:	d90c      	bls.n	8008218 <_free_r+0x4c>
 80081fe:	6821      	ldr	r1, [r4, #0]
 8008200:	1862      	adds	r2, r4, r1
 8008202:	4293      	cmp	r3, r2
 8008204:	bf04      	itt	eq
 8008206:	681a      	ldreq	r2, [r3, #0]
 8008208:	685b      	ldreq	r3, [r3, #4]
 800820a:	6063      	str	r3, [r4, #4]
 800820c:	bf04      	itt	eq
 800820e:	1852      	addeq	r2, r2, r1
 8008210:	6022      	streq	r2, [r4, #0]
 8008212:	6004      	str	r4, [r0, #0]
 8008214:	e7ec      	b.n	80081f0 <_free_r+0x24>
 8008216:	4613      	mov	r3, r2
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	b10a      	cbz	r2, 8008220 <_free_r+0x54>
 800821c:	42a2      	cmp	r2, r4
 800821e:	d9fa      	bls.n	8008216 <_free_r+0x4a>
 8008220:	6819      	ldr	r1, [r3, #0]
 8008222:	1858      	adds	r0, r3, r1
 8008224:	42a0      	cmp	r0, r4
 8008226:	d10b      	bne.n	8008240 <_free_r+0x74>
 8008228:	6820      	ldr	r0, [r4, #0]
 800822a:	4401      	add	r1, r0
 800822c:	1858      	adds	r0, r3, r1
 800822e:	4282      	cmp	r2, r0
 8008230:	6019      	str	r1, [r3, #0]
 8008232:	d1dd      	bne.n	80081f0 <_free_r+0x24>
 8008234:	6810      	ldr	r0, [r2, #0]
 8008236:	6852      	ldr	r2, [r2, #4]
 8008238:	605a      	str	r2, [r3, #4]
 800823a:	4401      	add	r1, r0
 800823c:	6019      	str	r1, [r3, #0]
 800823e:	e7d7      	b.n	80081f0 <_free_r+0x24>
 8008240:	d902      	bls.n	8008248 <_free_r+0x7c>
 8008242:	230c      	movs	r3, #12
 8008244:	602b      	str	r3, [r5, #0]
 8008246:	e7d3      	b.n	80081f0 <_free_r+0x24>
 8008248:	6820      	ldr	r0, [r4, #0]
 800824a:	1821      	adds	r1, r4, r0
 800824c:	428a      	cmp	r2, r1
 800824e:	bf04      	itt	eq
 8008250:	6811      	ldreq	r1, [r2, #0]
 8008252:	6852      	ldreq	r2, [r2, #4]
 8008254:	6062      	str	r2, [r4, #4]
 8008256:	bf04      	itt	eq
 8008258:	1809      	addeq	r1, r1, r0
 800825a:	6021      	streq	r1, [r4, #0]
 800825c:	605c      	str	r4, [r3, #4]
 800825e:	e7c7      	b.n	80081f0 <_free_r+0x24>
 8008260:	bd38      	pop	{r3, r4, r5, pc}
 8008262:	bf00      	nop
 8008264:	2000009c 	.word	0x2000009c

08008268 <_malloc_r>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	1ccd      	adds	r5, r1, #3
 800826c:	f025 0503 	bic.w	r5, r5, #3
 8008270:	3508      	adds	r5, #8
 8008272:	2d0c      	cmp	r5, #12
 8008274:	bf38      	it	cc
 8008276:	250c      	movcc	r5, #12
 8008278:	2d00      	cmp	r5, #0
 800827a:	4606      	mov	r6, r0
 800827c:	db01      	blt.n	8008282 <_malloc_r+0x1a>
 800827e:	42a9      	cmp	r1, r5
 8008280:	d903      	bls.n	800828a <_malloc_r+0x22>
 8008282:	230c      	movs	r3, #12
 8008284:	6033      	str	r3, [r6, #0]
 8008286:	2000      	movs	r0, #0
 8008288:	bd70      	pop	{r4, r5, r6, pc}
 800828a:	f000 fbb9 	bl	8008a00 <__malloc_lock>
 800828e:	4a21      	ldr	r2, [pc, #132]	; (8008314 <_malloc_r+0xac>)
 8008290:	6814      	ldr	r4, [r2, #0]
 8008292:	4621      	mov	r1, r4
 8008294:	b991      	cbnz	r1, 80082bc <_malloc_r+0x54>
 8008296:	4c20      	ldr	r4, [pc, #128]	; (8008318 <_malloc_r+0xb0>)
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	b91b      	cbnz	r3, 80082a4 <_malloc_r+0x3c>
 800829c:	4630      	mov	r0, r6
 800829e:	f000 fb05 	bl	80088ac <_sbrk_r>
 80082a2:	6020      	str	r0, [r4, #0]
 80082a4:	4629      	mov	r1, r5
 80082a6:	4630      	mov	r0, r6
 80082a8:	f000 fb00 	bl	80088ac <_sbrk_r>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	d124      	bne.n	80082fa <_malloc_r+0x92>
 80082b0:	230c      	movs	r3, #12
 80082b2:	6033      	str	r3, [r6, #0]
 80082b4:	4630      	mov	r0, r6
 80082b6:	f000 fba4 	bl	8008a02 <__malloc_unlock>
 80082ba:	e7e4      	b.n	8008286 <_malloc_r+0x1e>
 80082bc:	680b      	ldr	r3, [r1, #0]
 80082be:	1b5b      	subs	r3, r3, r5
 80082c0:	d418      	bmi.n	80082f4 <_malloc_r+0x8c>
 80082c2:	2b0b      	cmp	r3, #11
 80082c4:	d90f      	bls.n	80082e6 <_malloc_r+0x7e>
 80082c6:	600b      	str	r3, [r1, #0]
 80082c8:	50cd      	str	r5, [r1, r3]
 80082ca:	18cc      	adds	r4, r1, r3
 80082cc:	4630      	mov	r0, r6
 80082ce:	f000 fb98 	bl	8008a02 <__malloc_unlock>
 80082d2:	f104 000b 	add.w	r0, r4, #11
 80082d6:	1d23      	adds	r3, r4, #4
 80082d8:	f020 0007 	bic.w	r0, r0, #7
 80082dc:	1ac3      	subs	r3, r0, r3
 80082de:	d0d3      	beq.n	8008288 <_malloc_r+0x20>
 80082e0:	425a      	negs	r2, r3
 80082e2:	50e2      	str	r2, [r4, r3]
 80082e4:	e7d0      	b.n	8008288 <_malloc_r+0x20>
 80082e6:	428c      	cmp	r4, r1
 80082e8:	684b      	ldr	r3, [r1, #4]
 80082ea:	bf16      	itet	ne
 80082ec:	6063      	strne	r3, [r4, #4]
 80082ee:	6013      	streq	r3, [r2, #0]
 80082f0:	460c      	movne	r4, r1
 80082f2:	e7eb      	b.n	80082cc <_malloc_r+0x64>
 80082f4:	460c      	mov	r4, r1
 80082f6:	6849      	ldr	r1, [r1, #4]
 80082f8:	e7cc      	b.n	8008294 <_malloc_r+0x2c>
 80082fa:	1cc4      	adds	r4, r0, #3
 80082fc:	f024 0403 	bic.w	r4, r4, #3
 8008300:	42a0      	cmp	r0, r4
 8008302:	d005      	beq.n	8008310 <_malloc_r+0xa8>
 8008304:	1a21      	subs	r1, r4, r0
 8008306:	4630      	mov	r0, r6
 8008308:	f000 fad0 	bl	80088ac <_sbrk_r>
 800830c:	3001      	adds	r0, #1
 800830e:	d0cf      	beq.n	80082b0 <_malloc_r+0x48>
 8008310:	6025      	str	r5, [r4, #0]
 8008312:	e7db      	b.n	80082cc <_malloc_r+0x64>
 8008314:	2000009c 	.word	0x2000009c
 8008318:	200000a0 	.word	0x200000a0

0800831c <__sfputc_r>:
 800831c:	6893      	ldr	r3, [r2, #8]
 800831e:	3b01      	subs	r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	b410      	push	{r4}
 8008324:	6093      	str	r3, [r2, #8]
 8008326:	da08      	bge.n	800833a <__sfputc_r+0x1e>
 8008328:	6994      	ldr	r4, [r2, #24]
 800832a:	42a3      	cmp	r3, r4
 800832c:	db01      	blt.n	8008332 <__sfputc_r+0x16>
 800832e:	290a      	cmp	r1, #10
 8008330:	d103      	bne.n	800833a <__sfputc_r+0x1e>
 8008332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008336:	f7ff bcab 	b.w	8007c90 <__swbuf_r>
 800833a:	6813      	ldr	r3, [r2, #0]
 800833c:	1c58      	adds	r0, r3, #1
 800833e:	6010      	str	r0, [r2, #0]
 8008340:	7019      	strb	r1, [r3, #0]
 8008342:	4608      	mov	r0, r1
 8008344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008348:	4770      	bx	lr

0800834a <__sfputs_r>:
 800834a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834c:	4606      	mov	r6, r0
 800834e:	460f      	mov	r7, r1
 8008350:	4614      	mov	r4, r2
 8008352:	18d5      	adds	r5, r2, r3
 8008354:	42ac      	cmp	r4, r5
 8008356:	d101      	bne.n	800835c <__sfputs_r+0x12>
 8008358:	2000      	movs	r0, #0
 800835a:	e007      	b.n	800836c <__sfputs_r+0x22>
 800835c:	463a      	mov	r2, r7
 800835e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008362:	4630      	mov	r0, r6
 8008364:	f7ff ffda 	bl	800831c <__sfputc_r>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d1f3      	bne.n	8008354 <__sfputs_r+0xa>
 800836c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008370 <_vfiprintf_r>:
 8008370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008374:	460c      	mov	r4, r1
 8008376:	b09d      	sub	sp, #116	; 0x74
 8008378:	4617      	mov	r7, r2
 800837a:	461d      	mov	r5, r3
 800837c:	4606      	mov	r6, r0
 800837e:	b118      	cbz	r0, 8008388 <_vfiprintf_r+0x18>
 8008380:	6983      	ldr	r3, [r0, #24]
 8008382:	b90b      	cbnz	r3, 8008388 <_vfiprintf_r+0x18>
 8008384:	f7ff fe34 	bl	8007ff0 <__sinit>
 8008388:	4b7c      	ldr	r3, [pc, #496]	; (800857c <_vfiprintf_r+0x20c>)
 800838a:	429c      	cmp	r4, r3
 800838c:	d158      	bne.n	8008440 <_vfiprintf_r+0xd0>
 800838e:	6874      	ldr	r4, [r6, #4]
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	0718      	lsls	r0, r3, #28
 8008394:	d55e      	bpl.n	8008454 <_vfiprintf_r+0xe4>
 8008396:	6923      	ldr	r3, [r4, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d05b      	beq.n	8008454 <_vfiprintf_r+0xe4>
 800839c:	2300      	movs	r3, #0
 800839e:	9309      	str	r3, [sp, #36]	; 0x24
 80083a0:	2320      	movs	r3, #32
 80083a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083a6:	2330      	movs	r3, #48	; 0x30
 80083a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083ac:	9503      	str	r5, [sp, #12]
 80083ae:	f04f 0b01 	mov.w	fp, #1
 80083b2:	46b8      	mov	r8, r7
 80083b4:	4645      	mov	r5, r8
 80083b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80083ba:	b10b      	cbz	r3, 80083c0 <_vfiprintf_r+0x50>
 80083bc:	2b25      	cmp	r3, #37	; 0x25
 80083be:	d154      	bne.n	800846a <_vfiprintf_r+0xfa>
 80083c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80083c4:	d00b      	beq.n	80083de <_vfiprintf_r+0x6e>
 80083c6:	4653      	mov	r3, sl
 80083c8:	463a      	mov	r2, r7
 80083ca:	4621      	mov	r1, r4
 80083cc:	4630      	mov	r0, r6
 80083ce:	f7ff ffbc 	bl	800834a <__sfputs_r>
 80083d2:	3001      	adds	r0, #1
 80083d4:	f000 80c2 	beq.w	800855c <_vfiprintf_r+0x1ec>
 80083d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083da:	4453      	add	r3, sl
 80083dc:	9309      	str	r3, [sp, #36]	; 0x24
 80083de:	f898 3000 	ldrb.w	r3, [r8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f000 80ba 	beq.w	800855c <_vfiprintf_r+0x1ec>
 80083e8:	2300      	movs	r3, #0
 80083ea:	f04f 32ff 	mov.w	r2, #4294967295
 80083ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083f2:	9304      	str	r3, [sp, #16]
 80083f4:	9307      	str	r3, [sp, #28]
 80083f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083fa:	931a      	str	r3, [sp, #104]	; 0x68
 80083fc:	46a8      	mov	r8, r5
 80083fe:	2205      	movs	r2, #5
 8008400:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008404:	485e      	ldr	r0, [pc, #376]	; (8008580 <_vfiprintf_r+0x210>)
 8008406:	f7f7 ff6b 	bl	80002e0 <memchr>
 800840a:	9b04      	ldr	r3, [sp, #16]
 800840c:	bb78      	cbnz	r0, 800846e <_vfiprintf_r+0xfe>
 800840e:	06d9      	lsls	r1, r3, #27
 8008410:	bf44      	itt	mi
 8008412:	2220      	movmi	r2, #32
 8008414:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008418:	071a      	lsls	r2, r3, #28
 800841a:	bf44      	itt	mi
 800841c:	222b      	movmi	r2, #43	; 0x2b
 800841e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008422:	782a      	ldrb	r2, [r5, #0]
 8008424:	2a2a      	cmp	r2, #42	; 0x2a
 8008426:	d02a      	beq.n	800847e <_vfiprintf_r+0x10e>
 8008428:	9a07      	ldr	r2, [sp, #28]
 800842a:	46a8      	mov	r8, r5
 800842c:	2000      	movs	r0, #0
 800842e:	250a      	movs	r5, #10
 8008430:	4641      	mov	r1, r8
 8008432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008436:	3b30      	subs	r3, #48	; 0x30
 8008438:	2b09      	cmp	r3, #9
 800843a:	d969      	bls.n	8008510 <_vfiprintf_r+0x1a0>
 800843c:	b360      	cbz	r0, 8008498 <_vfiprintf_r+0x128>
 800843e:	e024      	b.n	800848a <_vfiprintf_r+0x11a>
 8008440:	4b50      	ldr	r3, [pc, #320]	; (8008584 <_vfiprintf_r+0x214>)
 8008442:	429c      	cmp	r4, r3
 8008444:	d101      	bne.n	800844a <_vfiprintf_r+0xda>
 8008446:	68b4      	ldr	r4, [r6, #8]
 8008448:	e7a2      	b.n	8008390 <_vfiprintf_r+0x20>
 800844a:	4b4f      	ldr	r3, [pc, #316]	; (8008588 <_vfiprintf_r+0x218>)
 800844c:	429c      	cmp	r4, r3
 800844e:	bf08      	it	eq
 8008450:	68f4      	ldreq	r4, [r6, #12]
 8008452:	e79d      	b.n	8008390 <_vfiprintf_r+0x20>
 8008454:	4621      	mov	r1, r4
 8008456:	4630      	mov	r0, r6
 8008458:	f7ff fc6c 	bl	8007d34 <__swsetup_r>
 800845c:	2800      	cmp	r0, #0
 800845e:	d09d      	beq.n	800839c <_vfiprintf_r+0x2c>
 8008460:	f04f 30ff 	mov.w	r0, #4294967295
 8008464:	b01d      	add	sp, #116	; 0x74
 8008466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846a:	46a8      	mov	r8, r5
 800846c:	e7a2      	b.n	80083b4 <_vfiprintf_r+0x44>
 800846e:	4a44      	ldr	r2, [pc, #272]	; (8008580 <_vfiprintf_r+0x210>)
 8008470:	1a80      	subs	r0, r0, r2
 8008472:	fa0b f000 	lsl.w	r0, fp, r0
 8008476:	4318      	orrs	r0, r3
 8008478:	9004      	str	r0, [sp, #16]
 800847a:	4645      	mov	r5, r8
 800847c:	e7be      	b.n	80083fc <_vfiprintf_r+0x8c>
 800847e:	9a03      	ldr	r2, [sp, #12]
 8008480:	1d11      	adds	r1, r2, #4
 8008482:	6812      	ldr	r2, [r2, #0]
 8008484:	9103      	str	r1, [sp, #12]
 8008486:	2a00      	cmp	r2, #0
 8008488:	db01      	blt.n	800848e <_vfiprintf_r+0x11e>
 800848a:	9207      	str	r2, [sp, #28]
 800848c:	e004      	b.n	8008498 <_vfiprintf_r+0x128>
 800848e:	4252      	negs	r2, r2
 8008490:	f043 0302 	orr.w	r3, r3, #2
 8008494:	9207      	str	r2, [sp, #28]
 8008496:	9304      	str	r3, [sp, #16]
 8008498:	f898 3000 	ldrb.w	r3, [r8]
 800849c:	2b2e      	cmp	r3, #46	; 0x2e
 800849e:	d10e      	bne.n	80084be <_vfiprintf_r+0x14e>
 80084a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80084a4:	2b2a      	cmp	r3, #42	; 0x2a
 80084a6:	d138      	bne.n	800851a <_vfiprintf_r+0x1aa>
 80084a8:	9b03      	ldr	r3, [sp, #12]
 80084aa:	1d1a      	adds	r2, r3, #4
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	9203      	str	r2, [sp, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	bfb8      	it	lt
 80084b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80084b8:	f108 0802 	add.w	r8, r8, #2
 80084bc:	9305      	str	r3, [sp, #20]
 80084be:	4d33      	ldr	r5, [pc, #204]	; (800858c <_vfiprintf_r+0x21c>)
 80084c0:	f898 1000 	ldrb.w	r1, [r8]
 80084c4:	2203      	movs	r2, #3
 80084c6:	4628      	mov	r0, r5
 80084c8:	f7f7 ff0a 	bl	80002e0 <memchr>
 80084cc:	b140      	cbz	r0, 80084e0 <_vfiprintf_r+0x170>
 80084ce:	2340      	movs	r3, #64	; 0x40
 80084d0:	1b40      	subs	r0, r0, r5
 80084d2:	fa03 f000 	lsl.w	r0, r3, r0
 80084d6:	9b04      	ldr	r3, [sp, #16]
 80084d8:	4303      	orrs	r3, r0
 80084da:	f108 0801 	add.w	r8, r8, #1
 80084de:	9304      	str	r3, [sp, #16]
 80084e0:	f898 1000 	ldrb.w	r1, [r8]
 80084e4:	482a      	ldr	r0, [pc, #168]	; (8008590 <_vfiprintf_r+0x220>)
 80084e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084ea:	2206      	movs	r2, #6
 80084ec:	f108 0701 	add.w	r7, r8, #1
 80084f0:	f7f7 fef6 	bl	80002e0 <memchr>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d037      	beq.n	8008568 <_vfiprintf_r+0x1f8>
 80084f8:	4b26      	ldr	r3, [pc, #152]	; (8008594 <_vfiprintf_r+0x224>)
 80084fa:	bb1b      	cbnz	r3, 8008544 <_vfiprintf_r+0x1d4>
 80084fc:	9b03      	ldr	r3, [sp, #12]
 80084fe:	3307      	adds	r3, #7
 8008500:	f023 0307 	bic.w	r3, r3, #7
 8008504:	3308      	adds	r3, #8
 8008506:	9303      	str	r3, [sp, #12]
 8008508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850a:	444b      	add	r3, r9
 800850c:	9309      	str	r3, [sp, #36]	; 0x24
 800850e:	e750      	b.n	80083b2 <_vfiprintf_r+0x42>
 8008510:	fb05 3202 	mla	r2, r5, r2, r3
 8008514:	2001      	movs	r0, #1
 8008516:	4688      	mov	r8, r1
 8008518:	e78a      	b.n	8008430 <_vfiprintf_r+0xc0>
 800851a:	2300      	movs	r3, #0
 800851c:	f108 0801 	add.w	r8, r8, #1
 8008520:	9305      	str	r3, [sp, #20]
 8008522:	4619      	mov	r1, r3
 8008524:	250a      	movs	r5, #10
 8008526:	4640      	mov	r0, r8
 8008528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800852c:	3a30      	subs	r2, #48	; 0x30
 800852e:	2a09      	cmp	r2, #9
 8008530:	d903      	bls.n	800853a <_vfiprintf_r+0x1ca>
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0c3      	beq.n	80084be <_vfiprintf_r+0x14e>
 8008536:	9105      	str	r1, [sp, #20]
 8008538:	e7c1      	b.n	80084be <_vfiprintf_r+0x14e>
 800853a:	fb05 2101 	mla	r1, r5, r1, r2
 800853e:	2301      	movs	r3, #1
 8008540:	4680      	mov	r8, r0
 8008542:	e7f0      	b.n	8008526 <_vfiprintf_r+0x1b6>
 8008544:	ab03      	add	r3, sp, #12
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	4622      	mov	r2, r4
 800854a:	4b13      	ldr	r3, [pc, #76]	; (8008598 <_vfiprintf_r+0x228>)
 800854c:	a904      	add	r1, sp, #16
 800854e:	4630      	mov	r0, r6
 8008550:	f3af 8000 	nop.w
 8008554:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008558:	4681      	mov	r9, r0
 800855a:	d1d5      	bne.n	8008508 <_vfiprintf_r+0x198>
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	065b      	lsls	r3, r3, #25
 8008560:	f53f af7e 	bmi.w	8008460 <_vfiprintf_r+0xf0>
 8008564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008566:	e77d      	b.n	8008464 <_vfiprintf_r+0xf4>
 8008568:	ab03      	add	r3, sp, #12
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	4622      	mov	r2, r4
 800856e:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <_vfiprintf_r+0x228>)
 8008570:	a904      	add	r1, sp, #16
 8008572:	4630      	mov	r0, r6
 8008574:	f000 f888 	bl	8008688 <_printf_i>
 8008578:	e7ec      	b.n	8008554 <_vfiprintf_r+0x1e4>
 800857a:	bf00      	nop
 800857c:	08008b04 	.word	0x08008b04
 8008580:	08008b44 	.word	0x08008b44
 8008584:	08008b24 	.word	0x08008b24
 8008588:	08008ae4 	.word	0x08008ae4
 800858c:	08008b4a 	.word	0x08008b4a
 8008590:	08008b4e 	.word	0x08008b4e
 8008594:	00000000 	.word	0x00000000
 8008598:	0800834b 	.word	0x0800834b

0800859c <_printf_common>:
 800859c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a0:	4691      	mov	r9, r2
 80085a2:	461f      	mov	r7, r3
 80085a4:	688a      	ldr	r2, [r1, #8]
 80085a6:	690b      	ldr	r3, [r1, #16]
 80085a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085ac:	4293      	cmp	r3, r2
 80085ae:	bfb8      	it	lt
 80085b0:	4613      	movlt	r3, r2
 80085b2:	f8c9 3000 	str.w	r3, [r9]
 80085b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085ba:	4606      	mov	r6, r0
 80085bc:	460c      	mov	r4, r1
 80085be:	b112      	cbz	r2, 80085c6 <_printf_common+0x2a>
 80085c0:	3301      	adds	r3, #1
 80085c2:	f8c9 3000 	str.w	r3, [r9]
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	0699      	lsls	r1, r3, #26
 80085ca:	bf42      	ittt	mi
 80085cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80085d0:	3302      	addmi	r3, #2
 80085d2:	f8c9 3000 	strmi.w	r3, [r9]
 80085d6:	6825      	ldr	r5, [r4, #0]
 80085d8:	f015 0506 	ands.w	r5, r5, #6
 80085dc:	d107      	bne.n	80085ee <_printf_common+0x52>
 80085de:	f104 0a19 	add.w	sl, r4, #25
 80085e2:	68e3      	ldr	r3, [r4, #12]
 80085e4:	f8d9 2000 	ldr.w	r2, [r9]
 80085e8:	1a9b      	subs	r3, r3, r2
 80085ea:	42ab      	cmp	r3, r5
 80085ec:	dc28      	bgt.n	8008640 <_printf_common+0xa4>
 80085ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80085f2:	6822      	ldr	r2, [r4, #0]
 80085f4:	3300      	adds	r3, #0
 80085f6:	bf18      	it	ne
 80085f8:	2301      	movne	r3, #1
 80085fa:	0692      	lsls	r2, r2, #26
 80085fc:	d42d      	bmi.n	800865a <_printf_common+0xbe>
 80085fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008602:	4639      	mov	r1, r7
 8008604:	4630      	mov	r0, r6
 8008606:	47c0      	blx	r8
 8008608:	3001      	adds	r0, #1
 800860a:	d020      	beq.n	800864e <_printf_common+0xb2>
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	68e5      	ldr	r5, [r4, #12]
 8008610:	f8d9 2000 	ldr.w	r2, [r9]
 8008614:	f003 0306 	and.w	r3, r3, #6
 8008618:	2b04      	cmp	r3, #4
 800861a:	bf08      	it	eq
 800861c:	1aad      	subeq	r5, r5, r2
 800861e:	68a3      	ldr	r3, [r4, #8]
 8008620:	6922      	ldr	r2, [r4, #16]
 8008622:	bf0c      	ite	eq
 8008624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008628:	2500      	movne	r5, #0
 800862a:	4293      	cmp	r3, r2
 800862c:	bfc4      	itt	gt
 800862e:	1a9b      	subgt	r3, r3, r2
 8008630:	18ed      	addgt	r5, r5, r3
 8008632:	f04f 0900 	mov.w	r9, #0
 8008636:	341a      	adds	r4, #26
 8008638:	454d      	cmp	r5, r9
 800863a:	d11a      	bne.n	8008672 <_printf_common+0xd6>
 800863c:	2000      	movs	r0, #0
 800863e:	e008      	b.n	8008652 <_printf_common+0xb6>
 8008640:	2301      	movs	r3, #1
 8008642:	4652      	mov	r2, sl
 8008644:	4639      	mov	r1, r7
 8008646:	4630      	mov	r0, r6
 8008648:	47c0      	blx	r8
 800864a:	3001      	adds	r0, #1
 800864c:	d103      	bne.n	8008656 <_printf_common+0xba>
 800864e:	f04f 30ff 	mov.w	r0, #4294967295
 8008652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008656:	3501      	adds	r5, #1
 8008658:	e7c3      	b.n	80085e2 <_printf_common+0x46>
 800865a:	18e1      	adds	r1, r4, r3
 800865c:	1c5a      	adds	r2, r3, #1
 800865e:	2030      	movs	r0, #48	; 0x30
 8008660:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008664:	4422      	add	r2, r4
 8008666:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800866a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800866e:	3302      	adds	r3, #2
 8008670:	e7c5      	b.n	80085fe <_printf_common+0x62>
 8008672:	2301      	movs	r3, #1
 8008674:	4622      	mov	r2, r4
 8008676:	4639      	mov	r1, r7
 8008678:	4630      	mov	r0, r6
 800867a:	47c0      	blx	r8
 800867c:	3001      	adds	r0, #1
 800867e:	d0e6      	beq.n	800864e <_printf_common+0xb2>
 8008680:	f109 0901 	add.w	r9, r9, #1
 8008684:	e7d8      	b.n	8008638 <_printf_common+0x9c>
	...

08008688 <_printf_i>:
 8008688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800868c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008690:	460c      	mov	r4, r1
 8008692:	7e09      	ldrb	r1, [r1, #24]
 8008694:	b085      	sub	sp, #20
 8008696:	296e      	cmp	r1, #110	; 0x6e
 8008698:	4617      	mov	r7, r2
 800869a:	4606      	mov	r6, r0
 800869c:	4698      	mov	r8, r3
 800869e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086a0:	f000 80b3 	beq.w	800880a <_printf_i+0x182>
 80086a4:	d822      	bhi.n	80086ec <_printf_i+0x64>
 80086a6:	2963      	cmp	r1, #99	; 0x63
 80086a8:	d036      	beq.n	8008718 <_printf_i+0x90>
 80086aa:	d80a      	bhi.n	80086c2 <_printf_i+0x3a>
 80086ac:	2900      	cmp	r1, #0
 80086ae:	f000 80b9 	beq.w	8008824 <_printf_i+0x19c>
 80086b2:	2958      	cmp	r1, #88	; 0x58
 80086b4:	f000 8083 	beq.w	80087be <_printf_i+0x136>
 80086b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80086c0:	e032      	b.n	8008728 <_printf_i+0xa0>
 80086c2:	2964      	cmp	r1, #100	; 0x64
 80086c4:	d001      	beq.n	80086ca <_printf_i+0x42>
 80086c6:	2969      	cmp	r1, #105	; 0x69
 80086c8:	d1f6      	bne.n	80086b8 <_printf_i+0x30>
 80086ca:	6820      	ldr	r0, [r4, #0]
 80086cc:	6813      	ldr	r3, [r2, #0]
 80086ce:	0605      	lsls	r5, r0, #24
 80086d0:	f103 0104 	add.w	r1, r3, #4
 80086d4:	d52a      	bpl.n	800872c <_printf_i+0xa4>
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6011      	str	r1, [r2, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	da03      	bge.n	80086e6 <_printf_i+0x5e>
 80086de:	222d      	movs	r2, #45	; 0x2d
 80086e0:	425b      	negs	r3, r3
 80086e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80086e6:	486f      	ldr	r0, [pc, #444]	; (80088a4 <_printf_i+0x21c>)
 80086e8:	220a      	movs	r2, #10
 80086ea:	e039      	b.n	8008760 <_printf_i+0xd8>
 80086ec:	2973      	cmp	r1, #115	; 0x73
 80086ee:	f000 809d 	beq.w	800882c <_printf_i+0x1a4>
 80086f2:	d808      	bhi.n	8008706 <_printf_i+0x7e>
 80086f4:	296f      	cmp	r1, #111	; 0x6f
 80086f6:	d020      	beq.n	800873a <_printf_i+0xb2>
 80086f8:	2970      	cmp	r1, #112	; 0x70
 80086fa:	d1dd      	bne.n	80086b8 <_printf_i+0x30>
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	f043 0320 	orr.w	r3, r3, #32
 8008702:	6023      	str	r3, [r4, #0]
 8008704:	e003      	b.n	800870e <_printf_i+0x86>
 8008706:	2975      	cmp	r1, #117	; 0x75
 8008708:	d017      	beq.n	800873a <_printf_i+0xb2>
 800870a:	2978      	cmp	r1, #120	; 0x78
 800870c:	d1d4      	bne.n	80086b8 <_printf_i+0x30>
 800870e:	2378      	movs	r3, #120	; 0x78
 8008710:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008714:	4864      	ldr	r0, [pc, #400]	; (80088a8 <_printf_i+0x220>)
 8008716:	e055      	b.n	80087c4 <_printf_i+0x13c>
 8008718:	6813      	ldr	r3, [r2, #0]
 800871a:	1d19      	adds	r1, r3, #4
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6011      	str	r1, [r2, #0]
 8008720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008728:	2301      	movs	r3, #1
 800872a:	e08c      	b.n	8008846 <_printf_i+0x1be>
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6011      	str	r1, [r2, #0]
 8008730:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008734:	bf18      	it	ne
 8008736:	b21b      	sxthne	r3, r3
 8008738:	e7cf      	b.n	80086da <_printf_i+0x52>
 800873a:	6813      	ldr	r3, [r2, #0]
 800873c:	6825      	ldr	r5, [r4, #0]
 800873e:	1d18      	adds	r0, r3, #4
 8008740:	6010      	str	r0, [r2, #0]
 8008742:	0628      	lsls	r0, r5, #24
 8008744:	d501      	bpl.n	800874a <_printf_i+0xc2>
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	e002      	b.n	8008750 <_printf_i+0xc8>
 800874a:	0668      	lsls	r0, r5, #25
 800874c:	d5fb      	bpl.n	8008746 <_printf_i+0xbe>
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	4854      	ldr	r0, [pc, #336]	; (80088a4 <_printf_i+0x21c>)
 8008752:	296f      	cmp	r1, #111	; 0x6f
 8008754:	bf14      	ite	ne
 8008756:	220a      	movne	r2, #10
 8008758:	2208      	moveq	r2, #8
 800875a:	2100      	movs	r1, #0
 800875c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008760:	6865      	ldr	r5, [r4, #4]
 8008762:	60a5      	str	r5, [r4, #8]
 8008764:	2d00      	cmp	r5, #0
 8008766:	f2c0 8095 	blt.w	8008894 <_printf_i+0x20c>
 800876a:	6821      	ldr	r1, [r4, #0]
 800876c:	f021 0104 	bic.w	r1, r1, #4
 8008770:	6021      	str	r1, [r4, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d13d      	bne.n	80087f2 <_printf_i+0x16a>
 8008776:	2d00      	cmp	r5, #0
 8008778:	f040 808e 	bne.w	8008898 <_printf_i+0x210>
 800877c:	4665      	mov	r5, ip
 800877e:	2a08      	cmp	r2, #8
 8008780:	d10b      	bne.n	800879a <_printf_i+0x112>
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	07db      	lsls	r3, r3, #31
 8008786:	d508      	bpl.n	800879a <_printf_i+0x112>
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	6862      	ldr	r2, [r4, #4]
 800878c:	429a      	cmp	r2, r3
 800878e:	bfde      	ittt	le
 8008790:	2330      	movle	r3, #48	; 0x30
 8008792:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008796:	f105 35ff 	addle.w	r5, r5, #4294967295
 800879a:	ebac 0305 	sub.w	r3, ip, r5
 800879e:	6123      	str	r3, [r4, #16]
 80087a0:	f8cd 8000 	str.w	r8, [sp]
 80087a4:	463b      	mov	r3, r7
 80087a6:	aa03      	add	r2, sp, #12
 80087a8:	4621      	mov	r1, r4
 80087aa:	4630      	mov	r0, r6
 80087ac:	f7ff fef6 	bl	800859c <_printf_common>
 80087b0:	3001      	adds	r0, #1
 80087b2:	d14d      	bne.n	8008850 <_printf_i+0x1c8>
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295
 80087b8:	b005      	add	sp, #20
 80087ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087be:	4839      	ldr	r0, [pc, #228]	; (80088a4 <_printf_i+0x21c>)
 80087c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80087c4:	6813      	ldr	r3, [r2, #0]
 80087c6:	6821      	ldr	r1, [r4, #0]
 80087c8:	1d1d      	adds	r5, r3, #4
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6015      	str	r5, [r2, #0]
 80087ce:	060a      	lsls	r2, r1, #24
 80087d0:	d50b      	bpl.n	80087ea <_printf_i+0x162>
 80087d2:	07ca      	lsls	r2, r1, #31
 80087d4:	bf44      	itt	mi
 80087d6:	f041 0120 	orrmi.w	r1, r1, #32
 80087da:	6021      	strmi	r1, [r4, #0]
 80087dc:	b91b      	cbnz	r3, 80087e6 <_printf_i+0x15e>
 80087de:	6822      	ldr	r2, [r4, #0]
 80087e0:	f022 0220 	bic.w	r2, r2, #32
 80087e4:	6022      	str	r2, [r4, #0]
 80087e6:	2210      	movs	r2, #16
 80087e8:	e7b7      	b.n	800875a <_printf_i+0xd2>
 80087ea:	064d      	lsls	r5, r1, #25
 80087ec:	bf48      	it	mi
 80087ee:	b29b      	uxthmi	r3, r3
 80087f0:	e7ef      	b.n	80087d2 <_printf_i+0x14a>
 80087f2:	4665      	mov	r5, ip
 80087f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80087f8:	fb02 3311 	mls	r3, r2, r1, r3
 80087fc:	5cc3      	ldrb	r3, [r0, r3]
 80087fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008802:	460b      	mov	r3, r1
 8008804:	2900      	cmp	r1, #0
 8008806:	d1f5      	bne.n	80087f4 <_printf_i+0x16c>
 8008808:	e7b9      	b.n	800877e <_printf_i+0xf6>
 800880a:	6813      	ldr	r3, [r2, #0]
 800880c:	6825      	ldr	r5, [r4, #0]
 800880e:	6961      	ldr	r1, [r4, #20]
 8008810:	1d18      	adds	r0, r3, #4
 8008812:	6010      	str	r0, [r2, #0]
 8008814:	0628      	lsls	r0, r5, #24
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	d501      	bpl.n	800881e <_printf_i+0x196>
 800881a:	6019      	str	r1, [r3, #0]
 800881c:	e002      	b.n	8008824 <_printf_i+0x19c>
 800881e:	066a      	lsls	r2, r5, #25
 8008820:	d5fb      	bpl.n	800881a <_printf_i+0x192>
 8008822:	8019      	strh	r1, [r3, #0]
 8008824:	2300      	movs	r3, #0
 8008826:	6123      	str	r3, [r4, #16]
 8008828:	4665      	mov	r5, ip
 800882a:	e7b9      	b.n	80087a0 <_printf_i+0x118>
 800882c:	6813      	ldr	r3, [r2, #0]
 800882e:	1d19      	adds	r1, r3, #4
 8008830:	6011      	str	r1, [r2, #0]
 8008832:	681d      	ldr	r5, [r3, #0]
 8008834:	6862      	ldr	r2, [r4, #4]
 8008836:	2100      	movs	r1, #0
 8008838:	4628      	mov	r0, r5
 800883a:	f7f7 fd51 	bl	80002e0 <memchr>
 800883e:	b108      	cbz	r0, 8008844 <_printf_i+0x1bc>
 8008840:	1b40      	subs	r0, r0, r5
 8008842:	6060      	str	r0, [r4, #4]
 8008844:	6863      	ldr	r3, [r4, #4]
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	2300      	movs	r3, #0
 800884a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800884e:	e7a7      	b.n	80087a0 <_printf_i+0x118>
 8008850:	6923      	ldr	r3, [r4, #16]
 8008852:	462a      	mov	r2, r5
 8008854:	4639      	mov	r1, r7
 8008856:	4630      	mov	r0, r6
 8008858:	47c0      	blx	r8
 800885a:	3001      	adds	r0, #1
 800885c:	d0aa      	beq.n	80087b4 <_printf_i+0x12c>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	079b      	lsls	r3, r3, #30
 8008862:	d413      	bmi.n	800888c <_printf_i+0x204>
 8008864:	68e0      	ldr	r0, [r4, #12]
 8008866:	9b03      	ldr	r3, [sp, #12]
 8008868:	4298      	cmp	r0, r3
 800886a:	bfb8      	it	lt
 800886c:	4618      	movlt	r0, r3
 800886e:	e7a3      	b.n	80087b8 <_printf_i+0x130>
 8008870:	2301      	movs	r3, #1
 8008872:	464a      	mov	r2, r9
 8008874:	4639      	mov	r1, r7
 8008876:	4630      	mov	r0, r6
 8008878:	47c0      	blx	r8
 800887a:	3001      	adds	r0, #1
 800887c:	d09a      	beq.n	80087b4 <_printf_i+0x12c>
 800887e:	3501      	adds	r5, #1
 8008880:	68e3      	ldr	r3, [r4, #12]
 8008882:	9a03      	ldr	r2, [sp, #12]
 8008884:	1a9b      	subs	r3, r3, r2
 8008886:	42ab      	cmp	r3, r5
 8008888:	dcf2      	bgt.n	8008870 <_printf_i+0x1e8>
 800888a:	e7eb      	b.n	8008864 <_printf_i+0x1dc>
 800888c:	2500      	movs	r5, #0
 800888e:	f104 0919 	add.w	r9, r4, #25
 8008892:	e7f5      	b.n	8008880 <_printf_i+0x1f8>
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1ac      	bne.n	80087f2 <_printf_i+0x16a>
 8008898:	7803      	ldrb	r3, [r0, #0]
 800889a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800889e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088a2:	e76c      	b.n	800877e <_printf_i+0xf6>
 80088a4:	08008b55 	.word	0x08008b55
 80088a8:	08008b66 	.word	0x08008b66

080088ac <_sbrk_r>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	4c06      	ldr	r4, [pc, #24]	; (80088c8 <_sbrk_r+0x1c>)
 80088b0:	2300      	movs	r3, #0
 80088b2:	4605      	mov	r5, r0
 80088b4:	4608      	mov	r0, r1
 80088b6:	6023      	str	r3, [r4, #0]
 80088b8:	f7f8 fc32 	bl	8001120 <_sbrk>
 80088bc:	1c43      	adds	r3, r0, #1
 80088be:	d102      	bne.n	80088c6 <_sbrk_r+0x1a>
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	b103      	cbz	r3, 80088c6 <_sbrk_r+0x1a>
 80088c4:	602b      	str	r3, [r5, #0]
 80088c6:	bd38      	pop	{r3, r4, r5, pc}
 80088c8:	200005a0 	.word	0x200005a0

080088cc <__sread>:
 80088cc:	b510      	push	{r4, lr}
 80088ce:	460c      	mov	r4, r1
 80088d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d4:	f000 f896 	bl	8008a04 <_read_r>
 80088d8:	2800      	cmp	r0, #0
 80088da:	bfab      	itete	ge
 80088dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088de:	89a3      	ldrhlt	r3, [r4, #12]
 80088e0:	181b      	addge	r3, r3, r0
 80088e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088e6:	bfac      	ite	ge
 80088e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80088ea:	81a3      	strhlt	r3, [r4, #12]
 80088ec:	bd10      	pop	{r4, pc}

080088ee <__swrite>:
 80088ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f2:	461f      	mov	r7, r3
 80088f4:	898b      	ldrh	r3, [r1, #12]
 80088f6:	05db      	lsls	r3, r3, #23
 80088f8:	4605      	mov	r5, r0
 80088fa:	460c      	mov	r4, r1
 80088fc:	4616      	mov	r6, r2
 80088fe:	d505      	bpl.n	800890c <__swrite+0x1e>
 8008900:	2302      	movs	r3, #2
 8008902:	2200      	movs	r2, #0
 8008904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008908:	f000 f868 	bl	80089dc <_lseek_r>
 800890c:	89a3      	ldrh	r3, [r4, #12]
 800890e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008916:	81a3      	strh	r3, [r4, #12]
 8008918:	4632      	mov	r2, r6
 800891a:	463b      	mov	r3, r7
 800891c:	4628      	mov	r0, r5
 800891e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008922:	f000 b817 	b.w	8008954 <_write_r>

08008926 <__sseek>:
 8008926:	b510      	push	{r4, lr}
 8008928:	460c      	mov	r4, r1
 800892a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800892e:	f000 f855 	bl	80089dc <_lseek_r>
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	bf15      	itete	ne
 8008938:	6560      	strne	r0, [r4, #84]	; 0x54
 800893a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800893e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008942:	81a3      	strheq	r3, [r4, #12]
 8008944:	bf18      	it	ne
 8008946:	81a3      	strhne	r3, [r4, #12]
 8008948:	bd10      	pop	{r4, pc}

0800894a <__sclose>:
 800894a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894e:	f000 b813 	b.w	8008978 <_close_r>
	...

08008954 <_write_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4c07      	ldr	r4, [pc, #28]	; (8008974 <_write_r+0x20>)
 8008958:	4605      	mov	r5, r0
 800895a:	4608      	mov	r0, r1
 800895c:	4611      	mov	r1, r2
 800895e:	2200      	movs	r2, #0
 8008960:	6022      	str	r2, [r4, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	f7f7 ff26 	bl	80007b4 <_write>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d102      	bne.n	8008972 <_write_r+0x1e>
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	b103      	cbz	r3, 8008972 <_write_r+0x1e>
 8008970:	602b      	str	r3, [r5, #0]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	200005a0 	.word	0x200005a0

08008978 <_close_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4c06      	ldr	r4, [pc, #24]	; (8008994 <_close_r+0x1c>)
 800897c:	2300      	movs	r3, #0
 800897e:	4605      	mov	r5, r0
 8008980:	4608      	mov	r0, r1
 8008982:	6023      	str	r3, [r4, #0]
 8008984:	f7f8 fb97 	bl	80010b6 <_close>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_close_r+0x1a>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	b103      	cbz	r3, 8008992 <_close_r+0x1a>
 8008990:	602b      	str	r3, [r5, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	200005a0 	.word	0x200005a0

08008998 <_fstat_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4c07      	ldr	r4, [pc, #28]	; (80089b8 <_fstat_r+0x20>)
 800899c:	2300      	movs	r3, #0
 800899e:	4605      	mov	r5, r0
 80089a0:	4608      	mov	r0, r1
 80089a2:	4611      	mov	r1, r2
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	f7f8 fb92 	bl	80010ce <_fstat>
 80089aa:	1c43      	adds	r3, r0, #1
 80089ac:	d102      	bne.n	80089b4 <_fstat_r+0x1c>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	b103      	cbz	r3, 80089b4 <_fstat_r+0x1c>
 80089b2:	602b      	str	r3, [r5, #0]
 80089b4:	bd38      	pop	{r3, r4, r5, pc}
 80089b6:	bf00      	nop
 80089b8:	200005a0 	.word	0x200005a0

080089bc <_isatty_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4c06      	ldr	r4, [pc, #24]	; (80089d8 <_isatty_r+0x1c>)
 80089c0:	2300      	movs	r3, #0
 80089c2:	4605      	mov	r5, r0
 80089c4:	4608      	mov	r0, r1
 80089c6:	6023      	str	r3, [r4, #0]
 80089c8:	f7f8 fb91 	bl	80010ee <_isatty>
 80089cc:	1c43      	adds	r3, r0, #1
 80089ce:	d102      	bne.n	80089d6 <_isatty_r+0x1a>
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	b103      	cbz	r3, 80089d6 <_isatty_r+0x1a>
 80089d4:	602b      	str	r3, [r5, #0]
 80089d6:	bd38      	pop	{r3, r4, r5, pc}
 80089d8:	200005a0 	.word	0x200005a0

080089dc <_lseek_r>:
 80089dc:	b538      	push	{r3, r4, r5, lr}
 80089de:	4c07      	ldr	r4, [pc, #28]	; (80089fc <_lseek_r+0x20>)
 80089e0:	4605      	mov	r5, r0
 80089e2:	4608      	mov	r0, r1
 80089e4:	4611      	mov	r1, r2
 80089e6:	2200      	movs	r2, #0
 80089e8:	6022      	str	r2, [r4, #0]
 80089ea:	461a      	mov	r2, r3
 80089ec:	f7f8 fb8a 	bl	8001104 <_lseek>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d102      	bne.n	80089fa <_lseek_r+0x1e>
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	b103      	cbz	r3, 80089fa <_lseek_r+0x1e>
 80089f8:	602b      	str	r3, [r5, #0]
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	200005a0 	.word	0x200005a0

08008a00 <__malloc_lock>:
 8008a00:	4770      	bx	lr

08008a02 <__malloc_unlock>:
 8008a02:	4770      	bx	lr

08008a04 <_read_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4c07      	ldr	r4, [pc, #28]	; (8008a24 <_read_r+0x20>)
 8008a08:	4605      	mov	r5, r0
 8008a0a:	4608      	mov	r0, r1
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	2200      	movs	r2, #0
 8008a10:	6022      	str	r2, [r4, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	f7f8 fb32 	bl	800107c <_read>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_read_r+0x1e>
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_read_r+0x1e>
 8008a20:	602b      	str	r3, [r5, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	200005a0 	.word	0x200005a0

08008a28 <_init>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	bf00      	nop
 8008a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2e:	bc08      	pop	{r3}
 8008a30:	469e      	mov	lr, r3
 8008a32:	4770      	bx	lr

08008a34 <_fini>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	bf00      	nop
 8008a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3a:	bc08      	pop	{r3}
 8008a3c:	469e      	mov	lr, r3
 8008a3e:	4770      	bx	lr
